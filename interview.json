{"questions": [{"count": 1, "question": "What is Python?", "answer": "Python is a high-level, interpreted, interactive and object-oriented scripting language. Python is designed to be highly readable. It uses English keywords frequently where as other languages use punctuation, and it has fewer syntactical constructions than other languages."}, {"count": 2, "question": "What is the purpose of PYTHONPATH environment variable?", "answer": "PYTHONPATH - It has a role similar to PATH. This variable tells the Python interpreter where to locate the module files imported into a program. It should include the Python source library directory and the directories containing Python source code. PYTHONPATH is sometimes preset by the Python installer."}, {"count": 3, "question": "Is python a case sensitive language?", "answer": "Yes! Python is a case sensitive programming language."}, {"count": 4, "question": "What is the output of print str if str = 'Hello World!'?", "answer": "It will print complete string. Output would be Hello World"}, {"count": 5, "question": "What is the output of print str[0] if str = 'Hello World!'?", "answer": "It will print first character of the string. Output would be H."}, {"count": 6, "question": "What are tuples in Python?", "answer": "A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses."}, {"count": 7, "question": "What is the difference between tuples and lists in Python?", "answer": "The main differences between lists and tuples are \u2212 Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as read-only lists."}, {"count": 8, "question": "What are Python's dictionaries?", "answer": "Python's dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object."}, {"count": 9, "question": "How will you get all the values from the dictionary?", "answer": "Using dictionary.values() function, we can get all the values from the dictionary object."}, {"count": 10, "question": "How will you convert a string to an int in python?", "answer": "int(x [,base]) - Converts x to an integer. base specifies the base if x is a string."}, {"count": 11, "question": "How will you convert a string to a long in python?", "answer": "long(x [,base] ) - Converts x to a long integer. base specifies the base if x is a string."}, {"count": 12, "question": "How will you convert a string to a float in python?", "answer": "float(x) \u2212 Converts x to a floating-point number."}, {"count": 13, "question": "How will you convert a object to a string in python?", "answer": "str(x) \u2212 Converts object x to a string representation."}, {"count": 14, "question": "How will you convert a object to a regular expression in python?", "answer": "repr(x) \u2212 Converts object x to an expression string."}, {"count": 15, "question": "How will you convert a String to an object in python?", "answer": "eval(str) \u2212 Evaluates a string and returns an object."}, {"count": 16, "question": "How will you convert a string to a tuple in python?", "answer": "tuple(s) \u2212 Converts s to a tuple."}, {"count": 17, "question": "How will you convert a string to a list in python?", "answer": "list(s) \u2212 Converts s to a list."}, {"count": 18, "question": "How will you convert a string to a set in python?", "answer": "set(s) \u2212 Converts s to a set."}, {"count": 19, "question": "How will you create a dictionary using tuples in python?", "answer": "dict(d) \u2212 Creates a dictionary. d must be a sequence of (key,value) tuples."}, {"count": 20, "question": "How will you convert a string to a frozen set in python?", "answer": "frozenset(s) \u2212 Converts s to a frozen set."}, {"count": 21, "question": "How will you convert an integer to a character in python?", "answer": "chr(x) \u2212 Converts an integer to a character."}, {"count": 22, "question": "How will you convert an integer to an unicode character in python?", "answer": "unichr(x) \u2212 Converts an integer to a Unicode character."}, {"count": 23, "question": "How will you convert a single character to its integer value in python?", "answer": "ord(x) \u2212 Converts a single character to its integer value."}, {"count": 24, "question": "How will you convert an integer to hexadecimal string in python?", "answer": "hex(x) \u2212 Converts an integer to a hexadecimal string."}, {"count": 25, "question": "How will you convert an integer to octal string in python?", "answer": "oct(x) \u2212 Converts an integer to an octal string."}, {"count": 26, "question": "What is the purpose of  operator?", "answer": " Exponent \u2212 Performs exponential (power) calculation on operators. a**b = 10 to the power 20 if a = 10 and b = 20."}, {"count": 27, "question": "What is the purpose of // operator?", "answer": "// Floor Division \u2212 The division of operands where the result is the quotient in which the digits after the decimal point are removed."}, {"count": 28, "question": "What is the purpose of is operator?", "answer": "is \u2212 Evaluates to true if the variables on either side of the operator point to the same object and false otherwise. x is y, here is results in 1 if id(x) equals id(y)."}, {"count": 29, "question": "What is the purpose of not in operator?", "answer": "not in \u2212 Evaluates to true if it does not finds a variable in the specified sequence and false otherwise. x not in y, here not in results in a 1 if x is not a member of sequence y."}, {"count": 30, "question": "What is the purpose break statement in python?", "answer": "break statement \u2212 Terminates the loop statement and transfers execution to the statement immediately following the loop."}, {"count": 31, "question": "What is the purpose continue statement in python?", "answer": "continue statement \u2212 Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating."}, {"count": 32, "question": "What is the purpose pass statement in python?", "answer": "pass statement \u2212 The pass statement in Python is used when a statement is required syntactically but you do not want any command or code to execute."}, {"count": 33, "question": "How can you pick a random item from a list or tuple?", "answer": "choice(seq) \u2212 Returns a random item from a list, tuple, or string."}, {"count": 34, "question": "How can you pick a random item from a range?", "answer": "randrange ([start,] stop [,step]) \u2212 returns a randomly selected element from range(start, stop, step)."}, {"count": 35, "question": "How can you get a random number in python?", "answer": "random() \u2212 returns a random float r, such that 0 is less than or equal to r and r is less than 1."}, {"count": 36, "question": "How will you set the starting value in generating random numbers?", "answer": "seed([x]) \u2212 Sets the integer starting value used in generating random numbers. Call this function before calling any other random module function. Returns None."}, {"count": 37, "question": "How will you randomizes the items of a list in place?", "answer": "shuffle(lst) \u2212 Randomizes the items of a list in place. Returns None."}, {"count": 38, "question": "How will you capitalizes first letter of string?", "answer": "capitalize() \u2212 Capitalizes first letter of string."}, {"count": 39, "question": "How will you check in a string that all characters are alphanumeric?", "answer": "isalnum() \u2212 Returns true if string has at least 1 character and all characters are alphanumeric and false otherwise."}, {"count": 40, "question": "How will you check in a string that all characters are digits?", "answer": "isdigit() \u2212 Returns true if string contains only digits and false otherwise."}, {"count": 41, "question": "What is lambda function in python?", "answer": "\u2018lambda\u2019 is a keyword in python which creates an anonymous function. Lambda does not contain block of statements. It does not contain return statements.\n\u2018lambda\u2019 is a keyword in python which creates an anonymous function. Lambda does not contain block of statements. It does not contain return statements."}, {"count": 42, "question": "Is Python platform independent?", "answer": "No.\nThere are some modules and functions in python that can only run on certain platforms."}, {"count": 43, "question": "Do you think Python has a complier?", "answer": "Yes.\nYes it has a complier which works automatically so we don\u2019t notice the compiler of python."}, {"count": 44, "question": "What are the applications of Python?", "answer": "1.Django (Web framework of Python).\n2. Micro Frame work such as Flask and Bottle.\n3. Plone and Django CMS for advanced content Management."}, {"count": 45, "question": "Is there any double data type in Python?", "answer": "No."}, {"count": 46, "question": "What does pass operation do?", "answer": "Pass indicates that nothing is to be done i.e. it signifies a no operation."}, {"count": 47, "question": "When does a new block begin in python?", "answer": "A block begins when the line is intended by 4 spaces."}, {"count": 48, "question": "Name the python Library used for Machine learning.", "answer": "Scikit-learn python Library used for Machine learning"}, {"count": 49, "question": "How To Find Bugs Or Perform Static Analysis In A Python Application?", "answer": "You can use PyChecker, which is a static analyzer. It identifies the bugs in Python project and also reveals the style and complexity related bugs.\nAnother tool is Pylint, which checks whether the Python module satisfies the coding standard."}, {"count": 50, "question": "When Is The Python Decorator Used?", "answer": "Python decorator is a relative change that you do in Python syntax to adjust the functions quickly."}, {"count": 51, "question": "What Is The Principal Difference Between A List And The Tuple?", "answer": "List Vs. Tuple.\nThe principal difference between a list and the tuple is that the former is mutable while the tuple is not.\nA tuple is allowed to be hashed, for example, using it as a key for dictionaries."}, {"count": 52, "question": "How Does Python Handle\u00a0Memory Management?", "answer": "Python uses private heaps to maintain its memory. So the heap holds all the Python objects and the data structures. This area is only accessible to the Python interpreter;\u00a0programmers can\u2019t use it.\nAnd it\u2019s the\u00a0Python\u00a0memory manager that handles the\u00a0Private heap. It does the required allocation of the memory for Python objects.\nPython employs a built-in garbage collector, which salvages all the unused memory and offloads it to the heap space."}, {"count": 53, "question": "What Are The Principal Differences Between The Lambda And Def?", "answer": "Lambda Vs. Def.\nDef can hold multiple expressions while lambda is a uni-expression function.\nDef generates a function and designates a name to call it later. Lambda forms a function\u00a0object and returns it.\nDef can have a return statement. Lambda can\u2019t have return statements.\nLambda supports to get used\u00a0inside\u00a0a list and dictionary."}, {"count": 54, "question": "Is There A Switch Or Case Statement In Python? If Not Then What Is The Reason For The Same?", "answer": "No, Python does not have a Switch statement, but you can write a Switch function and then use it."}, {"count": 55, "question": "What Is A Built-In Function That Python Uses To Iterate Over A Number Sequence?", "answer": "Range()\u00a0generates a list of numbers, which is used to iterate over for loops.\nfor i in range(5):\n    print(i)\nThe range() function accompanies two sets of parameters.\nrange(stop)\nstop: It is the no. of integers to generate and starts from zero. eg. range(3) == [0, 1, 2].\nrange([start], stop[, step])\nStart: It is the starting no. of the sequence.\nStop: It specifies the upper limit of the sequence.\nStep: It is the incrementing factor for generating the sequence.\nPoints to note:\nOnly integer arguments are allowed.\nParameters can be positive or negative.\nThe\u00a0range()\u00a0function in Python starts from\u00a0the zeroth index."}, {"count": 56, "question": "What Are The Optional Statements Possible Inside A Try-Except Block In Python?", "answer": "There are two\u00a0optional clauses you can use in the\u00a0try-except\u00a0block.\nThe \u201celse\u201d\u00a0clause\nIt is useful if you want to run a piece of code when the try block doesn\u2019t create an exception.\nThe\u00a0\u201cfinally\u201d\u00a0clause\nIt is useful when you want to execute some steps which run, irrespective of whether there occurs an exception or not."}, {"count": 57, "question": "What Is A String In Python?", "answer": "A string in Python is a sequence of alpha-numeric characters. They are immutable objects. It means that they don\u2019t allow modification once they get assigned a value. Python provides several methods, such as join(), replace(), or split() to alter strings. But none of these change the original object."}, {"count": 58, "question": "What Is Slicing In Python?", "answer": "Slicing is a string operation for extracting a part of the string, or some part of a list. In Python, a string (say text) begins at index 0, and the nth character stores at position text[n-1]. Python can also perform reverse indexing, i.e., in the backward direction, with the help of negative numbers. In Python, the slice() is also a constructor function which generates a slice object. The result is a set of indices mentioned by range(start, stop, step). The slice() method allows three parameters. 1. start \u2013 starting number for the slicing to begin. 2. stop \u2013 the number which indicates the end of slicing. 3. step \u2013 the value to increment after each index (default = 1)."}, {"count": 59, "question": "What Is %S In Python?", "answer": "Python has support for formatting any value into a string. It may contain quite complex expressions.One of the common usages is to push values into a string with the %s format specifier. The formatting operation in Python has the comparable syntax as the C function printf() has."}, {"count": 60, "question": "Is A String Immutable Or Mutable In Python?", "answer": "Python strings are indeed immutable.\nLet\u2019s take an example. We have an \u201cstr\u201d variable holding a string value. We can\u2019t mutate the container, i.e., the string, but can modify what it contains that means the value of the variable."}, {"count": 61, "question": "What Is The Index In Python?", "answer": "An index is an integer data type which denotes a position within an ordered list or a string.\nIn Python, strings are also lists of characters. We can access them using the index which begins from zero and goes to the length minus one.\nFor example, in the string \u201cProgram,\u201d the indexing happens like this:\nProgram 0 1 2 3 4 5"}, {"count": 62, "question": "What Is Docstring In Python?", "answer": "A docstring is a unique text that happens to be the first statement in the following Python constructs:\nModule, Function, Class, or Method definition.\nA docstring gets added to the __doc__ attribute of the string object.\nNow, read some of the Python interview questions on functions."}, {"count": 63, "question": "What Is A Function In Python Programming?", "answer": "A function is an object which represents a block of code and is a reusable entity. It brings modularity to a program and a higher degree of code reusability.\nPython has given us many built-in functions such as print() and provides the ability to create user-defined functions."}, {"count": 64, "question": "How Many Basic Types Of Functions Are Available In Python?", "answer": "Python gives us two basic types of functions.\n1. Built-in, and\n2. User-defined.\nThe built-in functions happen to be part of the Python language. Some of these are print(), dir(), len(), and abs() etc."}, {"count": 65, "question": "How Do We Write A Function In Python?", "answer": "We can create a Python function in the following manner.\nStep-1: to begin the function, start writing with the keyword def and then mention the function name.\nStep-2: We can now pass the arguments and enclose them using the parentheses. A colon, in the end, marks the end of the function header.\nStep-3: After pressing an enter, we can add the desired Python statements for execution."}, {"count": 66, "question": "What Is A Function Call Or A Callable Object In Python?", "answer": "A function in Python gets treated as a callable object. It can allow some arguments and also return a value or multiple values in the form of a tuple. Apart from the function, Python has other constructs, such as classes or the class instances which fits in the same category."}, {"count": 67, "question": "What Is The Return Keyword Used For In Python?", "answer": "The purpose of a function is to receive the inputs and return some output.\nThe return is a Python statement which we can use in a function for sending a value back to its caller."}, {"count": 68, "question": "What Is \u201cCall By Value\u201d In Python?", "answer": "In call-by-value, the argument whether an expression or a value gets bound to the respective variable in the function.\nPython will treat that variable as local in the function-level scope. Any changes made to that variable will remain local and will not reflect outside the function."}, {"count": 69, "question": "What Is \u201cCall By Reference\u201d In Python?", "answer": "We use both \u201ccall-by-reference\u201d and \u201cpass-by-reference\u201d interchangeably. When we pass an argument by reference, then it is available as an implicit reference to the function, rather than a simple copy. In such a case, any modification to the argument will also be visible to the caller.\nThis scheme also has the advantage of bringing more time and space efficiency because it leaves the need for creating local copies.\nOn the contrary, the disadvantage could be that a variable can get changed accidentally during a function call. Hence, the programmers need to handle in the code to avoid such uncertainty."}, {"count": 70, "question": "What Is The Return Value Of The Trunc() Function?", "answer": "The Python trunc() function performs a mathematical operation to remove the decimal values from a particular expression and provides an integer value as its output."}, {"count": 71, "question": "Is It Mandatory For A Python Function To Return A Value?", "answer": "It is not at all necessary for a function to return any value. However, if needed, we can use None as a return value."}, {"count": 72, "question": "What Does The Continue Do In Python?", "answer": "The continue is a jump statement in Python which moves the control to execute the next iteration in a loop leaving all the remaining instructions in the block unexecuted.\nThe continue statement is applicable for both the \u201cwhile\u201d and \u201cfor\u201d loops."}, {"count": 73, "question": "What Is The Purpose Of Id() Function In Python?", "answer": "The id() is one of the built-in functions in Python.\nSignature: id(object)\nIt accepts one parameter and returns a unique identifier associated with the input object."}, {"count": 74, "question": "What Does The __ Name __ Do In Python?", "answer": "The __name__ is a unique variable. Since Python doesn\u2019t expose the main() function, so when its interpreter gets to run the script, it first executes the code which is at level 0 indentation.\nTo see whether the main() gets called, we can use the __name__ variable in an if clause compares with the value \u201c__main__.\u201d"}, {"count": 75, "question": "What Is The Purpose Of \u201cEnd\u201d In Python?", "answer": "Python\u2019s print() function always prints a newline in the end. The print() function accepts an optional parameter known as the \u2018end.\u2019 Its value is \u2018\\n\u2019 by default. We can change the end character in a print statement with the value of our choice using this parameter."}, {"count": 76, "question": "When Should You Use The \u201cBreak\u201d In Python?", "answer": "Python provides a break statement to exit from a loop. Whenever the break hits in the code, the control of the program immediately exits from the body of the loop.\nThe break statement in a nested loop causes the control to exit from the inner iterative block."}, {"count": 77, "question": "What Is The Difference Between Pass And Continue In Python?", "answer": "The continue statement makes the loop to resume from the next iteration.\nOn the contrary, the pass statement instructs to do nothing, and the remainder of the code executes as usual."}, {"count": 78, "question": "What Does The Len() Function Do In Python?", "answer": "In Python, the len() is a primary string function. It determines the length of an input string."}, {"count": 79, "question": "What Does The Chr() Function Do In Python?", "answer": "The chr() function got re-added in Python 3.2. In version 3.0, it got removed.\nIt returns the string denoting a character whose Unicode code point is an integer.\nFor example, the chr(122) returns the string \u2018z\u2019 whereas the chr(1212) returns the string \u2018\u04bc\u2019."}, {"count": 80, "question": "What Does The Ord() Function Do In Python?", "answer": "The ord(char) in Python takes a string of size one and returns an integer denoting the Unicode code format of the character in case of a Unicode type object, or the value of the byte if the argument is of 8-bit string type.\n>>> ord(\"z\")\n122"}, {"count": 81, "question": "What Is Rstrip() In Python?", "answer": "Python provides the rstrip() method which duplicates the string but leaves out the whitespace characters from the\u00a0end.\nThe rstrip() escapes the characters from the right end based on the argument value, i.e., a string mentioning the group of characters to get excluded.\nThe signature of the rstrip() is:\nstr.rstrip([char sequence/pre>\n#Example\ntest_str = 'Programming    '\n# The trailing whitespaces are excluded\nprint(test_str.rstrip())"}, {"count": 82, "question": "What Is Whitespace In Python?", "answer": "Whitespace represents the characters that we use for spacing and separation.\nThey possess an \u201cempty\u201d representation. In Python, it could be a tab or space."}, {"count": 83, "question": "What Is Isalpha() In Python?", "answer": "Python provides this built-in isalpha() function for the string handling purpose.\nIt returns True if all characters in the string are of alphabet type, else it returns False."}, {"count": 84, "question": "How Do You Use The Split() Function In Python?", "answer": "Python\u2019s split() function works on strings to cut a large piece into smaller chunks, or sub-strings. We can specify a separator to start splitting, or it uses the space as one by default.\n#Example\nstr = 'pdf csv json'\nprint(str.split(\" \"))\nprint(str.split())\nThe output:\n['pdf', 'csv', 'json']\n['pdf', 'csv', 'json']"}, {"count": 85, "question": "What Does The Join Method Do In Python?", "answer": "Python provides the join() method which works on strings, lists, and tuples. It combines them and returns a united value."}, {"count": 86, "question": "What Does The Title() Method Do In Python?", "answer": "Python provides the title() method to convert the first letter in each word to capital format while the rest turns to Lowercase.\n#Example\nstr = 'lEaRn pYtHoN'\nprint(str.title())\nThe output:\nLearn Python\nNow, check out some general purpose Python interview questions."}, {"count": 87, "question": "What Makes The CPython Different From Python?", "answer": "CPython has its core developed in C. The prefix \u2018C\u2019 represents this fact. It runs an interpreter loop used for translating the Python-ish code to C language."}, {"count": 88, "question": "Which Package Is The Fastest Form Of Python?", "answer": "PyPy provides maximum compatibility while utilizing CPython implementation for improving its performance.\nThe tests confirmed that PyPy is nearly five times faster than the CPython. It currently supports Python 2.7."}, {"count": 89, "question": "What Is GIL In Python Language?", "answer": "Python supports GIL (the global interpreter lock) which is a mutex used to secure access to Python objects, synchronizing multiple threads from running the Python bytecodes at the same time.\nHow Is Python Thread Safe?\nPython ensures safe access to threads. It uses the GIL mutex to set synchronization. If a thread loses the GIL lock at any time, then you have to make the code thread-safe.\nFor example, many of the Python operations execute as atomic such as calling the sort() method on a list."}, {"count": 90, "question": "How Does Python Manage The Memory?", "answer": "Python implements a heap manager internally which holds all of its objects and data structures.\nThis heap manager does the allocation/de-allocation of heap space for objects."}, {"count": 91, "question": "What Is A Tuple In Python?", "answer": "A tuple is a collection type data structure in Python which is immutable.\nThey are similar to sequences, just like the lists. However, There are some differences between a tuple and list; the former doesn\u2019t allow modifications whereas the list does.\nAlso, the tuples use parentheses for enclosing, but the lists have square brackets in their syntax."}, {"count": 92, "question": "What Is A Dictionary In Python Programming?", "answer": "A dictionary is a data structure known as an associative array in Python which stores a collection of objects.\nThe collection is a set of keys having a single associated value. We can call it a hash, a map, or a hashmap as it gets called in other programming languages."}, {"count": 93, "question": "What Is The Set Object In Python?", "answer": "Sets are unordered collection objects in Python. They store unique and immutable objects. Python has its implementation derived from mathematics."}, {"count": 94, "question": "What Is The Use Of The Dictionary In Python?", "answer": "A dictionary has a group of objects (the keys) map to another group of objects (the values). A Python dictionary represents a mapping of unique Keys to Values.\nThey are mutable and hence will not change. The values associated with the keys can be of any Python types."}, {"count": 95, "question": "Is Python List A Linked List?", "answer": "A Python list is a variable-length array which is different from C-style linked lists.\nInternally, it has a contiguous array for referencing to other objects and stores a pointer to the array variable and its length in the list head structure."}, {"count": 96, "question": "What Is Class In Python?", "answer": "Python supports object-oriented programming and provides almost all OOP features to use in programs.\nA Python class is a blueprint for creating the objects. It defines member variables and gets their behavior associated with them.\nWe can make it by using the keyword \u201cclass.\u201d An object gets created from the constructor. This object represents the instance of the class.\nIn Python, we generate classes and instances in the following way.\n>>>class Human:  # Create the class\n...     pass\n>>>man = Human()  # Create the instance\n>>>print(man)\n<__main__.Human object at 0x0000000003559E10>"}, {"count": 97, "question": "How To Assign Values For The Class Attributes At Runtime?", "answer": "We can specify the values for the attributes at runtime. We need to add an init method and pass input to object constructor. See the following example demonstrating this.\n>>> class Human:\n    def __init__(self, profession):\n        self.profession = profession\n    def set_profession(self, new_profession):\n        self.profession = new_profession\n\n>>> man = Human(\"Manager\")\n>>> print(man.profession)\nManager"}, {"count": 98, "question": "What Is Inheritance In Python Programming?", "answer": "Inheritance is an OOP mechanism which allows an object to access its parent class features. It carries forward the base class functionality to the child."}, {"count": 99, "question": " What Are Errors And Exceptions In Python Programs?", "answer": "Errors are coding issues in a program which may cause it to exit abnormally."}, {"count": 100, "question": " What Are Python Iterators?", "answer": "Iterators in Python are array-like objects which allow moving on the next element. We use them in traversing a loop, for example, in a \u201cfor\u201d loop.\nPython library has a no. of iterators. For example, a list is also an iterator and we can start a for loop over it."}, {"count": 101, "question": "What Is The Difference Between An Iterator And Iterable?", "answer": "The collection type like a list, tuple, dictionary, and set are all iterable objects whereas they are also iterable containers which return an iterator while traversing."}, {"count": 102, "question": "What Are Python Generators?", "answer": "A Generator is a kind of function which lets us specify a function that acts like an iterator and hence can get used in a \u201cfor\u201d loop.\nIn a generator function, the yield keyword substitutes the return statement.\n# Simple Python function\ndef fn():\n    return \"Simple Python function.\"\n\n# Python Generator function\ndef generate():\n    yield \"Python Generator function.\"\n\nprint(next(generate()))\nThe output is:\nPython Generator function."}, {"count": 103, "question": " What Are Closures In Python?", "answer": "Python closures are function objects returned by another function. We use them to eliminate code redundancy."}, {"count": 104, "question": " What Are Decorators In Python?", "answer": "Python decorator gives us the ability to add new behavior to the given objects dynamically. In the example below, we\u2019ve written a simple example to display a message pre and post the execution of a function.\ndef decorator_sample(func):\n    def decorator_hook(*args, **kwargs):\n        print(\"Before the function call\")\n        result = func(*args, **kwargs)\n        print(\"After the function call\")\n        return result\n    return decorator_hook\n\n@decorator_sample\ndef product(x, y):\n    \"Function to multiply two numbers.\"\n    return x * y\n\nprint(product(3, 3))\nThe output is:\nBefore the function call\nAfter the function call\n9"}, {"count": 105, "question": "What Is The Syntax For List Comprehension In Python?", "answer": "The signature for the list comprehension is as follows:\n[ expression(var) for var in iterable ]\nFor example, the below code will return all the numbers from 10 to 20 and store them in a list.\n>>> alist = [var for var in range(10, 20)]\n>>> print(alist)"}, {"count": 106, "question": "What Is The Syntax For Dictionary Comprehension In Python?", "answer": "A dictionary has the same syntax as was for the list comprehension but the difference is that it uses curly braces:\n{ aKey, itsValue for aKey in iterable }\nFor example, the below code will return all the numbers 10 to 20 as the keys and will store the respective squares of those numbers as the values.\n>>> adict = {var:var**2 for var in range(10, 20)}\n>>> print(adict)"}, {"count": 107, "question": "What Is The Syntax For Generator Expression In Python?", "answer": "The syntax for generator expression matches with the list comprehension, but the difference is that it uses parenthesis:\n( expression(var) for var in iterable )\nFor example, the below code will create a generator object that generates the values from 10 to 20 upon using it.\n>>> (var for var in range(10, 20))\n at 0x0000000003668728>\n>>> list((var for var in range(10, 20)))\nNow, see more Python interview questions for practice."}, {"count": 108, "question": "How Do You Write A Conditional Expression In Python?", "answer": "We can utilize the following single statement as a conditional expression. default_statment if Condition else another_statement\n>>> no_of_days = 366\n>>> is_leap_year = \"Yes\" if no_of_days == 366 else \"No\"\n>>> print(is_leap_year)\nYes"}, {"count": 109, "question": "What Is The Use Of Globals() Function In Python?", "answer": "The globals() function in Python returns the current global symbol table as a dictionary object.\nPython maintains a symbol table to keep all necessary information about a program. This info includes the names of variables, methods, and classes used by the program.\nAll the information in this table remains in the global scope of the program and Python allows us to retrieve it using the globals() method.\nSignature: globals()\n\nArguments: None\n# Example: globals() function \nx = 9\ndef fn(): \n    y = 3\n    z = y + x\n    # Calling the globals() method\n    z = globals()['x'] = z\n    return z\n       \n# Test Code     \nret = fn() \nprint(ret)\nThe output is:\n12"}, {"count": 110, "question": " How Does The Ternary Operator Work In Python?", "answer": "The ternary operator is an alternative for the conditional statements. It combines true or false values with a statement that you need to test.\nThe syntax would look like the one given below.\n[onTrue] if [Condition] else [onFalse]\nx, y = 35, 75\nsmaller = x if x < y else y\nprint(smaller)"}, {"count": 111, "question": "What Does The \u201cSelf\u201d Keyword Do?", "answer": "The\u00a0self\u00a0is a Python keyword which represents a variable that holds the instance of an object.\nIn almost, all the object-oriented languages, it is passed to the methods as a\u00a0hidden parameter.\nWhat Are The Different Methods To Copy An Object In Python?\nThere are two ways to copy objects in Python.\ncopy.copy() function\nIt makes a copy of the file from source to destination.\nIt\u2019ll return\u00a0a shallow copy of the parameter.\ncopy.deepcopy() function\nIt also produces the copy of an object from the source to destination.\nIt\u2019ll return a deep copy of the parameter that you can pass to the function."}, {"count": 112, "question": "What Is The Purpose Of Docstrings In Python?", "answer": "In Python, the docstring is what we call as the docstrings. It sets a process of recording Python functions, modules, and classes."}, {"count": 113, "question": "Which Python Function Will You Use To Convert A Number To A String?", "answer": "For\u00a0converting a number into a string, you can use the built-in function\u00a0str().\u00a0 If you want an octal or hexadecimal representation, use the inbuilt function\u00a0oct()\u00a0or\u00a0hex()."}, {"count": 114, "question": "How Do You Debug A Program In Python? Is It Possible To Step Through The Python Code?", "answer": "Yes, we can\u00a0use the Python debugger (pdb) to debug any Python program. And if we start a program using\u00a0pdb, then it let us even step through the code."}, {"count": 115, "question": "List Down Some Of The PDB Commands For Debugging Python Programs?", "answer": "Here are a few PDB commands to start debugging Python code.\nAdd breakpoint\u00a0(b)\nResume execution\u00a0(c)\nStep by step debugging\u00a0(s)\nMove to the next line\u00a0(n)\nList source code\u00a0(l)\nPrint an expression\u00a0(p)"}, {"count": 116, "question": "What Is The Command To Debug A Python Program?", "answer": "The following command helps run a Python program in debug\u00a0mode.\n$ python -m pdb python-script.py"}, {"count": 117, "question": "Why And When Do You Use Generators In Python?", "answer": "A generator in Python is a function which returns an iterable object. We can iterate on the generator object using the\u00a0yield\u00a0keyword. But we can only do that once because their values don\u2019t persist in memory, they get the values on the fly.\nGenerators give us the ability to hold the execution of a function or a step as long as we want to keep it. However, here are a few examples where it is beneficial to use generators.\nWe can replace loops with generators for efficiently calculating results involving large data sets.\nGenerators are\u00a0useful when we don\u2019t want all the results and wish to hold back for some time.\nInstead of\u00a0using a callback function, we can replace it with a generator. We can write a loop inside the function doing the same thing as the callback and turns it into a generator."}, {"count": 118, "question": "What Does The Yield Keyword Do In Python?", "answer": "The\u00a0yield\u00a0keyword can turn any function into a generator. It works like a standard return keyword. But it\u2019ll always return a generator object. Also, a method can have multiple calls to the\u00a0yield\u00a0keyword.\nSee the example below.\ndef testgen(index):\n  weekdays = ['sun','mon','tue','wed','thu','fri','sat']\n  yield weekdays[index]\n  yield weekdays[index+1]\n\nday = testgen(0)\nprint next(day), next(day)\n\n#output: sun mon"}, {"count": 119, "question": "How Do You Count The Occurrences Of Each Item Present In The List Without Explicitly Mentioning Them?", "answer": "Unlike sets, lists can have items with the same values.\nIn Python, the list has a\u00a0count()\u00a0function which returns the occurrences of a particular item.\nCount The Occurrences Of An Individual Item.\nweekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']\nprint(weekdays.count('mon'))\n\n#output: 3\nCount The Occurrences Of Each Item In The List.\nWe\u2019ll use the list\u00a0comprehension\u00a0along with the\u00a0count()\u00a0method. It\u2019ll print the\u00a0frequency of each of the items.\nweekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']\nprint([[x,weekdays.count(x)] for x in set(weekdays)])\n\n#output: [['wed', 1], ['sun', 2], ['thu', 1], ['tue', 1], ['mon', 3], ['fri', 1]]"}, {"count": 120, "question": "What Is NumPy And How Is It Better Than A List In Python?", "answer": "NumPy is a Python package for scientific computing which can deal with large data sizes. It includes a powerful N-dimensional array object and a set of advanced functions.\nAlso, the NumPy arrays are superior to\u00a0the built-in lists. There are a no. of reasons for this.\nNumPy arrays are more compact than lists.\nReading and writing items is faster with NumPy.\nUsing NumPy is more convenient\u00a0than to the standard list.\nNumPy arrays are more efficient as they augment the functionality of lists in Python."}, {"count": 121, "question": "What Are Different Ways To Create An Empty NumPy Array In Python?", "answer": "There are two methods which we can apply to create empty\u00a0NumPy arrays.\nThe First Method To Create An Empty Array.\nimport numpy\nnumpy.array([])\nThe Second Method To Create An Empty Array.\n# Make an empty NumPy array\nnumpy.empty(shape=(0,0))"}]}
