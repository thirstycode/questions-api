{"programs": [{"count": 1, "program": "#The program computes simple interest given the principle amount, rate and time.\n\nprinciple=float(input(\"Enter the principle amount:\"))\ntime=int(input(\"Enter the time(years):\"))\nrate=float(input(\"Enter the rate:\"))\nsimple_interest=(principle*time*rate)/100\nprint(\"The simple interest is:\",simple_interest)", "output": "Enter the principle amount:1000\nEnter the time(years):2\nEnter the rate:8\nThe simple interest is: 160.0"}, {"count": 2, "program": "# The program takes in the the number of terms and finds the sum of series: 1 + 1/2 + 1/3 + \u2026.. + 1/N.\n\nn=int(input(\"Enter the number of terms: \"))\nsum1=0\nfor i in range(1,n+1):\n    sum1=sum1+(1/i)\nprint(\"The sum of series is\",round(sum1,2))", "output": "Enter the number of terms: 4\nThe sum of series is 2.08"}, {"count": 3, "program": "# Python program using NumPy for some basic mathematical operations\n\nimport numpy as np\n\n# Creating two arrays of rank 2\nx = np.array([[1, 2], [3, 4]])\ny = np.array([[5, 6], [7, 8]])\n\n# Creating two arrays of rank 1\nv = np.array([9, 10])\nw = np.array([11, 12])\n\n# Inner product of vectors\nprint(np.dot(v, w), \"\\n\")\n\n# Matrix and Vector product\nprint(np.dot(x, v), \"\\n\")\n\n# Matrix and matrix product\nprint(np.dot(x, y))\n", "output": "219 \n\n[29 67] \n\n[[19 22]\n [43 50]]"}, {"count": 4, "program": "# This is a Python program to test Collatz conjecture for a given number.\n\ndef collatz(n):\n    while n > 1:\n        print(n, end=' ')\n        if (n % 2):\n            # n is odd\n            n = 3*n + 1\n        else:\n            # n is even\n            n = n//2\n    print(1, end='')\n \n \nn = int(input('Enter n: '))\nprint('Sequence: ', end='')\ncollatz(n)", "output": "Enter n: 9\nSequence: 9 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1"}, {"count": 5, "program": "# The program finds the number of ones in the binary representation of a number.\n\ndef count_set_bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n \n \nn = int(input('Enter n: '))\nprint('Number of set bits:', count_set_bits(n))", "output": "Enter n: 15\nNumber of set bits: 4"}, {"count": 6, "program": "# We are given a binary number. We have to find the associated Gray codeword.\n\ndef binary_to_gray(n):\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\n    n = int(n, 2) # convert to int\n    n ^= (n >> 1)\n \n    # bin(n) returns n's binary representation with a '0b' prefixed\n    # the slice operation is to remove the prefix\n    return bin(n)[2:]\n \n \ng = input('Enter binary number: ')\nb = binary_to_gray(g)\nprint('Gray codeword:', b)", "output": "Enter binary number: 111\nGray codeword: 100"}, {"count": 7, "program": "# The program takes a list and prints the largest number in the list.\n\n\na = list(map(int,input(\"Enter list by comma seperated: \").split(\",\")))\na.sort()\nprint(\"Largest element is:\",a[-1])", "output": "Enter list by comma seperated: 1,2,100,3,4\nLargest element is: 100"}, {"count": 8, "program": "# The program takes a string and removes the nth index character from the non-empty string.\n\ndef remove(string, n):  \n      first = string[:n]   \n      last = string[n+1:]  \n      return first + last\nstring=input(\"Enter the sring:\")\nn=int(input(\"Enter the index of the character to remove:\"))\nprint(\"Modified string:\")\nprint(remove(string, n))", "output": "Enter the sring:pratik\nEnter the index of the character to remove:3\nModified string:\npraik"}, {"count": 9, "program": "# The program takes two strings and checks if the two strings are anagrams.\n\ns1=input(\"Enter first string:\")\ns2=input(\"Enter second string:\")\nif(sorted(s1)==sorted(s2)):\n      print(\"The strings are anagrams.\")\nelse:\n      print(\"The strings aren't anagrams.\")", "output": "Enter first string:developer\nEnter second string:loperdeve\nThe strings are anagrams."}, {"count": 10, "program": "# The program takes a string and counts the number of vowels in a string.\n\nstring=input(\"Enter string:\")\nvowels=0\nfor i in string:\n      if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u' or i=='A' or i=='E' or i=='I' or i=='O' or i=='U'):\n            vowels=vowels+1\nprint(\"Number of vowels are:\")\nprint(vowels)", "output": "Enter string:avner\nNumber of vowels are:\n2"}, {"count": 11, "program": "# The program takes a string and checks if a string is a palindrome or not.\n\nstring=input(\"Enter string:\")\nif(string==string[::-1]):\n      print(\"The string is a palindrome\")\nelse:\n      print(\"The string isn't a palindrome\")", "output": "Enter string:avbbva\nThe string is a palindrome"}, {"count": 12, "program": "# The program takes a string and checks if it is a pangram or not.\n\nfrom string import ascii_lowercase as asc_lower\ndef check(s):\n    return set(asc_lower) - set(s.lower()) == set([])\nstrng=input(\"Enter string:\")\nif(check(strng)==True):\n      print(\"The string is a pangram\")\nelse:\n      print(\"The string isn't a pangram\")", "output": "Enter string:The quick brown fox jumps over the lazy dog\nThe string is a pangram"}, {"count": 13, "program": "# The program takes in a year and checks whether it is a leap year or not.\n\nyear=int(input(\"Enter year to be checked:\"))\nif(year%4==0 and year%100!=0 or year%400==0):\n    print(\"The year is a leap year!\")\nelse:\n    print(\"The year isn't a leap year!\")", "output": "Enter year to be checked:2004\nThe year is a leap year!"}, {"count": 14, "program": "# The program takes a string and checks if a substring is present in the given string.\n\nstring=input(\"Enter string:\")\nsub_str=input(\"Enter word:\")\nif(string.find(sub_str)==-1):\n      print(\"Substring not found in string!\")\nelse:\n      print(\"Substring in string!\")", "output": "Enter string:i am lazy\nEnter word:lazy\nSubstring in string!"}, {"count": 15, "program": "# The program takes a string and counts the frequency of words appearing in that string using a dictionary.\n\ntest_string=input(\"Enter string:\")\nl=[]\nl=test_string.split()\nwordfreq=[l.count(p) for p in l]\nprint(dict(zip(l,wordfreq)))", "output": "Enter string:avner is avner\n{'avner': 2, 'is': 1}"}, {"count": 16, "program": "# The program takes two strings and checks common letters in both the strings.\n\ns1=input(\"Enter first string:\")\ns2=input(\"Enter second string:\")\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nfor i in a:\n    print(i)", "output": "Enter first string:hello you\nEnter second string:escape\nThe common letters are:\ne"}, {"count": 17, "program": "# This is a Python Program to find the fibonacci series using recursion.\n\ndef fibonacci(n):\n    if(n <= 1):\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\nn = int(input(\"Nth term: \"))\nprint(\"Fibonacci : \",fibonacci(n))\n", "output": "Nth term: 9\nFibonacci :  34"}, {"count": 18, "program": "# This is a Python Program to find the binary equivalent of a number recursively.\n\nl=[]\ndef convert(b):\n    if(b==0):\n        return l\n    dig=b%2\n    l.append(dig)\n    convert(b//2)\na=int(input(\"Enter a number: \"))\nconvert(a)\nl.reverse()\nprint(\"Binary equivalent:\")\nfor i in l:\n    print(i,end='')", "output": "Enter a number: 16\nBinary equivalent:\n10000"}, {"count": 19, "program": "# This is a Python Program to count the occurrences of a word in a text file.\n\nfname = input(\"Enter file name: \")\nword=input(\"Enter word to be searched:\")\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==word):\n                k=k+1\nprint(\"Occurrences of the word:\")\nprint(k)", "output": "Enter file name: inp.txt\nEnter word to be searched:hello\nOccurrences of the word:\n1"}, {"count": 20, "program": "# This is a Python Program to count the number of words in a text file.\n\nfname = input(\"Enter file name: \")\n \nnum_words = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)", "output": "Enter file name: inp.txt\nNumber of words:\n15"}, {"count": 21, "program": "# This is a Python program to implement Tower of Hanoi.\n\ndef hanoi(disks, source, auxiliary, target):\n    if disks == 1:\n        print('Move disk 1 from peg {} to peg {}.'.format(source, target))\n        return\n \n    hanoi(disks - 1, source, target, auxiliary)\n    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))\n    hanoi(disks - 1, auxiliary, source, target)\n \n \ndisks = int(input('Enter number of disks: '))\nhanoi(disks, 'A', 'B', 'C')", "output": "Enter number of disks: 3\nMove disk 1 from peg A to peg C.\nMove disk 2 from peg A to peg B.\nMove disk 1 from peg C to peg B.\nMove disk 3 from peg A to peg C.\nMove disk 1 from peg B to peg A.\nMove disk 2 from peg B to peg C.\nMove disk 1 from peg A to peg C."}, {"count": 22, "program": "# random guessing game\n\nimport random\n\ndef guess():\n    randomNumber = random.randint(0, 21)\n    count = 0\n\n    while True:\n        count += 1\n        number = int(input('Enter the number between 0 to 20: '))\n        if number < randomNumber:\n            print('Too small')\n        elif number > randomNumber:\n            print('Too large')\n        else:\n            print('You have got it in', count, 'tries')\n            break\n\nguess()", "output": "Enter the number between 0 to 20: 5\nToo small\nEnter the number between 0 to 20: 15\nToo large\nEnter the number between 0 to 20: 13\nToo small\nEnter the number between 0 to 20: 14\nYou have got it in 4 tries"}, {"count": 23, "program": "#In this program we will see how to define a class\n\nclass MyFirstClass():\n    #Class Attributes\n    var = 10\n\nfirstObject = MyFirstClass()\nprint(firstObject)      #Printing object's memory hex\nprint(firstObject.var)  #Accessing Class Attributes\n\nsecondObject = MyFirstClass()\nprint(secondObject)\nprint(secondObject.var)", "output": "<__main__.MyFirstClass object at 0x000001DF359A1EF0>\n10\n<__main__.MyFirstClass object at 0x000001DF35AEC048>\n10"}, {"count": 24, "program": "# The program reads the height in centimeters and then converts the height to feet and inches.\n\ncm=int(input(\"Enter the height in centimeters:\"))\ninches=0.394*cm\nfeet=0.0328*cm\nprint(\"The length in inches\",round(inches,2))\nprint(\"The length in feet\",round(feet,2))", "output": "Enter the height in centimeters:171\nThe length in inches 67.37\nThe length in feet 5.61"}, {"count": 25, "program": "#In this example we will be seeing how instance methods are used\n#Instance methods are accessed by: instance.method()\n\nclass Vehicle():\n    #Class Methods/ Attributes\n\n    #Here self is passed as an argument because instance is passed as first argument\n    def type(self):     #Without self it throws an error\n        print(self)\n        print('I have a type')\n\ncar = Vehicle()\nprint(car)\ncar.type()", "output": "<__main__.Vehicle object at 0x0000026C357A1EF0>\n<__main__.Vehicle object at 0x0000026C357A1EF0>\nI have a type"}, {"count": 26, "program": "#This program illustrates the concept of inheritance\n#Python looks up for method in following order: Instance attributes, class attributes and the\n#from the base class\n\nclass Data(object):\n    def getData(self):\n        print('In data!')\n\nclass Time(Data):           #Inheriting from Data class\n    def getTime(self):\n        print('In Time!')\n\nif __name__ == '__main__':\n    data = Data()\n    time = Time()\n\n    data.getData()\n    time.getTime()\n    time.getData()          #Inherited Data method", "output": "In data!\nIn Time!\nIn data!"}, {"count": 27, "program": "#In this example we will be seeing how instance Attributes are used\n#Instance attributes are accessed by: object.attribute\n#Attributes are looked First in the instance and THEN in the class\n\nimport random\nclass Vehicle():\n    #Class Methods/ Attributes\n    def type(self):\n        #NOTE: This is not a class attribute as the variable is binded to self. Hence it becomes\n        #instance attribute\n        self.randomValue = random.randint(1,10) #Setting the instance attribute\n\ncar = Vehicle()\ncar.type()              #Calling the class Method\nprint(car.randomValue)  #Calling the instance attribute", "output": "9"}, {"count": 28, "program": "# In this example we will see what are Python Magic Methods (or Special Methods) and how to overload them\n# Now why these methods are called Magic or Special methods anyway? The reason is that these\n# methods are invoked directly after creation of a class instance. For example:\n# __init__ is a Magic method. Also __str__, __repr__, __add__ are all magic methods.\n\nclass Employee(object):\n    def __init__(self, firstname, salary = 0):\n        self.firstname = firstname\n        self.salary = salary\n\n    def __str__(self):\n        return 'Name: ' + self.firstname\n\n    # For overloading the (+)\n    def __add__(self, other):\n        return self.salary + other.salary\n\nif __name__ == '__main__':\n    Anver = Employee('Anver', 1000)\n    Pratik = Employee('Pratik', 2000)\n    print(Anver)                # Name: Anver (This output because of __str__ method overloading)\n    print(Pratik)              # Name : Pratik\n    print(Anver + Pratik)      # 3000 (This output because of __add__ method overloading)", "output": "Name: Anver\nName: Pratik\n3000"}, {"count": 29, "program": "# This script illustrates how to count number of files and directories in a directory recursively\n\nimport os\n\n# Path IN which we have to count files and directories\nPATH = 'directory/'   # Give your path here\n\nfileCount = 0\ndirCount = 0\n\nfor root, dirs, files in os.walk(PATH):\n    print('Looking in:',root)\n    for directories in dirs:\n        dirCount += 1\n    for Files in files:\n        fileCount += 1\n\nprint('Number of files',fileCount)\nprint('Number of Directories',dirCount)\nprint('Total:',(dirCount + fileCount))", "output": "Looking in: directory/\nNumber of files 2\nNumber of Directories 0\nTotal: 2"}, {"count": 30, "program": "# Send email using python\n\nimport smtplib\n\nfadd = ''                                       # sender's email address\ntadd = ''                                       # receiver's email address\nmsg = 'Mail sent through Python!'               # Message to be sent!\nusername = ''                                   # Your username(email ID)\npassword = ''                                   # Your password for above email ID\nserver = smtplib.SMTP('smtp.gmail.com',587)\nserver.ehlo()\nserver.starttls()\nserver.login(username,password)\nserver.sendmail(fadd,tadd,msg)", "output": ""}, {"count": 31, "program": "# This script helps to find the devices (mobiles and computers) connected to my wifi\n\n# This script needs python-nmap as a pre-requisite. To install: sudo pip3 install python-nmap\n\nimport nmap\nimport subprocess\n\n# function to scan network and display IPs of conected devices\ndef scan_network():\n    scanner = nmap.PortScanner()\n    myIP = subprocess.check_output(['hostname -I'], shell=True)\n    myIP = str(myIP, 'utf-8').split('.')\n    print(myIP[:3])\n    scannedData = scanner.scan(hosts = '.'.join(myIP[:3]) + '.1/24', arguments = '-sP')\n\n    # printing all the IP addresses of connected devices\n    for hostnames in scannedData['scan']:\n        print(hostnames)\n\nscan_network()", "output": ""}, {"count": 32, "program": "#This programs shows the rules for variable scope\n\n# LEGB Rule: Local, Enclosing, Global, Built-in\n\nx = 'Global x'\n\ndef test():\n    #global x\n    y = 'Local y'\n    x = 'Local x'\n    print(x +', '+ y) #prints 'Local x' and  'Local y'\n\nif __name__ == '__main__':\n    test()\n    print(x) #prints 'Global x'", "output": "Local x, Local y\nGlobal x"}, {"count": 33, "program": "# A Python generator is a function which returns a generator iterator (just an object we can iterate over)\n# by calling yield\n\ndef simpleGenerator(numbers):\n    i = 0\n    while True:\n        check = input('Wanna generate a number? (If yes, press y else n): ')\n        if check in ('Y', 'y') and len(numbers) > i:\n            yield numbers[i]\n            i += 1\n        else:\n            print('Bye!')\n            break\n\nfor number in simpleGenerator([10, 11, 12, 14]):\n    print(number)", "output": "Wanna generate a number? (If yes, press y else n): y\n10\nWanna generate a number? (If yes, press y else n): n\nBye!"}, {"count": 34, "program": "# A closure is a record storing a function[a] together with an environment:\n# a mapping associating each free variable of the function (variables that are used locally, but\n# defined in an enclosing scope) with the value or reference to which the name was bound when\n# the closure was created.A closure\u2014unlike a plain function\u2014allows the function to access those\n# captured variables through the closure's copies of their values or references, even when the function\n# is invoked outside their scope.\n\ndef outerFunction(text):\n    text = text\n\n    def innerFunction():\n        print(text)\n\n    return innerFunction\n\nif __name__ == '__main__':\n    myFunction = outerFunction('Hey!')\n    myFunction()", "output": "Hey!"}, {"count": 35, "program": "# The program takes the temperature in Celsius and converts it to Fahrenheit.\n\ncelsius=int(input(\"Enter the temperature in celcius:\"))\nf=(celsius*1.8)+32\nprint(\"Temperature in farenheit is:\",f)", "output": "Enter the temperature in celcius:38\nTemperature in farenheit is: 100.4"}, {"count": 36, "program": "#This program illustrates a logging example\nimport logging\n\ndef log(number):\n    ''' This function creates a log file if any error is reported '''\n    logging.basicConfig(filename = 'P18-logfile.txt', level = logging.INFO)\n    try:\n        if int(number) % 2 == 0:\n            print('Successful')\n        else:\n            print('Unsuccessful, this instance will be reported, check the log file')\n            logging.info('Invalid Entry')\n    except:\n        print('Please enter a valid integer')\n\nif __name__ == '__main__':\n    try:\n        userInput = int(input('Enter a number: '))\n        log(userInput)\n    except:\n        print('Please enter a valid integer')", "output": ""}, {"count": 37, "program": "#In this example w will see the example for Python argument parser\n\nimport argparse\n\ndef argumentParser():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-s', '--show', help = 'Show something', action = 'store_true')\n    arg = parser.parse_args()\n    if(arg.show):\n        show()\n    else:\n        print('Dude give some arguments! Type ArgumentParser -h for more details')\n\n\ndef show():\n    print('Showing this thing!')\n\n\nif __name__ == '__main__':\n    argumentParser()", "output": "python .\\code.py -s\nShowing this thing!"}, {"count": 38, "program": "# using csv module\n\nimport csv\n\ndef csvWrite(filePath, data):\n    with open(filePath, 'a') as fd:\n        writer = csv.writer(fd, delimiter=',', quoting=csv.QUOTE_NONNUMERIC)\n        writer.writerow(data)\n\nif __name__ == '__main__':\n    userInput = input('What is your Fullname? ')\n    userInput = userInput.split(' ')\n    csvWrite('example.csv', userInput)", "output": "example.csv created with\n\"Angelina\",\"Jolie\""}, {"count": 39, "program": "# This example illustrates an example to calculate a hash of a file\n\nimport hashlib\nBLOCKSIZE = 65536           # Block read size if file is big enough\nfileToOpen = 'code.py'\nhasher = hashlib.md5()\nwith open(fileToOpen, 'rb') as afile:\n    buf = afile.read(BLOCKSIZE)\n    while len(buf) > 0:\n        hasher.update(buf)\n        buf = afile.read(BLOCKSIZE)\nprint(hasher.hexdigest())", "output": "d6ad61e2f45d92951ea12ea1eac11e31"}, {"count": 40, "program": "# Sieve of Eratosthenes is one of the efficient algorithms to find all the prime numbers upto n, where n can be\n# upto 10 million. This algorithm is very efficient and fast and hence is preferred by many competitive programmers.\n\ndef SieveOfEratosthenes(n):\n    primes = [True] * (n + 1)\n    p = 2                \n\n    while(p * p <= n):\n        if(primes[p]) == True:\n            for i in range(p * 2, n + 1, p):\n                primes[i] = False\n\n        p += 1\n        \n    # printing all primes\n    for i in range(2, n):\n        if primes[i]:\n            print(i)\n\nif __name__ == '__main__':\n    SieveOfEratosthenes(10)", "output": "2\n3\n5\n7"}, {"count": 41, "program": "# In this program we will learn what Python lambda is.\n\nmyFunc = lambda x, y: x * y\n# returns 6\nprint(myFunc(2, 3))\n\n# example to find squares of all numbers from a list\nmyList = [i for i in range(10)]\n# returns square of each number\nmyFunc = lambda x: x * x\n\nsquares = list(map(myFunc, myList))\nprint(squares)              # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]", "output": "6\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"}, {"count": 42, "program": "# This is the program for creating a simple progress bar. You may need this in many of your projects.\n# You can install a module for progress bar by 'pip3 install progressbar2'\n\nimport sys, time\n\ndef progressBar(count, total, suffix=''):\n    barLength = 60\n    filledLength = int(round(barLength * count / float(total)))\n    percent = round(100.0 * count / float(total), 1)\n    bar = '=' * filledLength + '-' * (barLength - filledLength)\n    sys.stdout.write('[%s] %s%s ...%s\\r' % (bar, percent, '%', suffix))\n    sys.stdout.flush()\n\nfor i in range(10):\n\ttime.sleep(1)\n\tprogressBar(i, 10)", "output": "[==============================------------------------------] 50.0% ..."}, {"count": 43, "program": "# This program illustrates a simple Python encryption example using the RSA Algotrithm\n# RSA is an algorithm used by modern computers to encrypt and decrypt messages. It is an asymmetric\n# cryptographic algorithm. Asymmetric means that there are two different keys (public and private).\n\n# For installation: sudo pip3 install pycrypto\n\nfrom Crypto.PublicKey import RSA\nfrom Crypto import Random\n\nrandomGenerator = Random.new().read\n# Generating a private key and a public key\nkey = RSA.generate(1024, randomGenerator) # 1024 is the size of the key in bits\nprint(key)                                # Prints private key\nprint(key.publickey())                    # Prints public key\n# Encryption using Public Key\npublicKey = key.publickey()\nencryptedData = publicKey.encrypt('My name is Anver'.encode('utf-8'), 32)\nprint(encryptedData)\n# Decryption using Private Key\ndecryptedData = key.decrypt(encryptedData)\nprint(decryptedData)", "output": "3048 0241 00C9 18FA CF8D EB2D EFD5 FD37 89B9 E069 EA97 FC20 5E35 F577 EE31 C4FB C6E4 4811 7D86 BC8F BAFA 362F 922B F01B 2F40 C744 2654 C0DD 2881 D673 CA2B 4003 C266 E2CD CB02 0301 0001\nMy name is Anver"}, {"count": 44, "program": "#This program shows an example of bubble sort using Python\n\n#   Best O(n^2); Average O(n^2); Worst O(n^2)\n\ndef bubbleSort(List):\n    for i in range(len(List)):\n        for j in range(len(List) - 1, i, -1):\n            if List[j] < List[j - 1]:\n                List[j], List[j - 1] = List[j - 1], List[j]\n    return List\n\nif __name__ == '__main__':\n    List = [3, 4, 2, 6, 5, 7, 1, 9]\n    print('Sorted List:',bubbleSort(List))", "output": "Sorted List: [1, 2, 3, 4, 5, 6, 7, 9]"}, {"count": 45, "program": "# For transfering files to your another/local computer, you will have to install a FTP\n\nimport ftplib\n\ndef ftp_upload(ftpObj, pathToSend, pathToRecv, fileType='TXT'):\n    with open(pathToSend, 'rb') as fobj:\n        ftpObj.storlines('STOR ' + pathToRecv, fobj)\n\nif __name__ == '__main__':\n    ftp = ftplib.FTP('127.0.0.1')\n    ftp.login('anver', 'strongpass')\n    print('Logged in..')\n\n    pathToSend = '/Desktop/output.txt'\n    pathToRecv = 'Documents/output.txt'\n    ftp_upload(ftp, pathToSend, pathToRecv)\n\n    ftp.quit()", "output": ""}, {"count": 46, "program": "# The program takes a number and computes the prime factors of the integer.\n\nn=int(input(\"Enter an integer:\"))\nprint(\"Factors are:\")\ni=1\nwhile(i<=n):\n    k=0\n    if(n%i==0):\n        j=1\n        while(j<=i):\n            if(i%j==0):\n                k=k+1\n            j=j+1\n        if(k==2):\n            print(i)\n    i=i+1", "output": "Enter an integer:91\nFactors are:\n7\n13"}, {"count": 47, "program": "#This program shows an example of insertion sort using Python.\n\n#  Best O(n); Average O(n^2); Worst O(n^2)\n\ndef insertionSort(List):\n    for i in range(1, len(List)):\n        currentNumber = List[i]\n        for j in range(i - 1, -1, -1):\n            if List[j] > currentNumber :\n                List[j], List[j + 1] = List[j + 1], List[j]\n            else:\n                List[j + 1] = currentNumber\n                break\n\n    return List\n\nif __name__ == '__main__':\n    List = [3, 4, 2, 6, 5, 7, 1, 9]\n    print('Sorted List:',insertionSort(List))", "output": "Sorted List: [1, 2, 3, 4, 5, 6, 7, 9]"}, {"count": 48, "program": "# Python Program to calculate the square root\n\n# Note: change this value for a different result\nnum = 8\n\n# uncomment to take the input from the user\n#num = float(input('Enter a number: '))\nnum_sqrt = num ** 0.5\nprint('The square root of %0.3f is %0.3f' % (num, num_sqrt))\n", "output": "The square root of 8.000 is 2.828"}, {"count": 49, "program": "# Python Program to find the area of triangle\n\na = float(input('Enter first side: '))\nb = float(input('Enter second side: '))\nc = float(input('Enter third side: '))\n\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' % area)\n", "output": "The area of the triangle is 14.70"}, {"count": 50, "program": "# Solve the quadratic equation ax**2 + bx + c = 0\n\n# import complex math module\nimport cmath\n\na = float(input('Enter a: '))\nb = float(input('Enter b: '))\nc = float(input('Enter c: '))\n\n# calculate the discriminant\nd = (b**2) - (4*a*c)\n\n# find two solutions\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\n\nprint('The solution are {0} and {1}'.format(sol1, sol2))\n", "output": "Enter a: 1\nEnter b: 5\nEnter c: 6\nThe solutions are (-3+0j) and (-2+0j)"}, {"count": 51, "program": "# Python program to swap two variables\n\n# To take input from the user\nx = input('Enter value of x: ')\ny = input('Enter value of y: ')\n\n# create a temporary variable and swap the values\ntemp = x\nx = y\ny = temp\n\nprint('The value of x after swapping: {}'.format(x))\nprint('The value of y after swapping: {}'.format(y))\n", "output": "The value of x after swapping: 10\nThe value of y after swapping: 5"}, {"count": 52, "program": "# Program to generate a random number between 0 and 9\n\n# import the random module\nimport random\n\nprint(random.randint(0, 9))\n", "output": "5"}, {"count": 53, "program": "#Python Program to Convert Kilometers to Miles\n\nkilometers = 5.5\n\n# To take kilometers from the user, uncomment the code below\n# kilometers = float(input(\"Enter value in kilometers\"))\n\n# conversion factor\nconv_fac = 0.621371\n\n# calculate miles\nmiles = kilometers * conv_fac\nprint('%0.3f kilometers is equal to %0.3f miles' %(kilometers,miles))", "output": "5.500 kilometers is equal to 3.418 miles"}, {"count": 54, "program": "# Python Program to convert temperature in celsius to fahrenheit\n\n# change this value for a different result\ncelsius = 37.5\n\n# calculate fahrenheit\nfahrenheit = (celsius * 1.8) + 32\nprint('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %\n      (celsius, fahrenheit))\n", "output": "37.5 degree Celsius is equal to 99.5 degree Fahrenheit"}, {"count": 55, "program": "#Python Program to Check if a Number is Positive, Negative or 0\n\nnum = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")", "output": "Enter a number: 2\nPositive number"}, {"count": 56, "program": "# Python program to check if the input number is odd or even.\n# A number is even if division by 2 give a remainder of 0.\n# If remainder is 1, it is odd number.\nnum = int(input(\"Enter a number: \"))\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n", "output": "Enter a number: 43\n43 is Odd"}, {"count": 57, "program": "# The program takes a number and generates all the divisors of the number.\n\nn=int(input(\"Enter an integer:\"))\nprint(\"The divisors of the number are:\")\nfor i in range(1,n+1):\n    if(n%i==0):\n        print(i)", "output": "Enter an integer:25\nThe divisors of the number are:\n1\n5\n25"}, {"count": 58, "program": "# Python program to check if the input year is a leap year or not\n\nyear = 2000\n\n# To get year (integer input) from the user\n# year = int(input(\"Enter a year: \"))\n\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n", "output": "2000 is a leap year"}, {"count": 59, "program": "# Python program to find the largest number among the three input numbers\n\n# change the values of num1, num2 and num3\n# for a different result\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number between\", num1,\n      \",\", num2, \"and\", num3, \"is\", largest)\n", "output": "The largest number between 10, 14 and 12 is 14.0"}, {"count": 60, "program": "# Python program to check if the input number is prime or not\n\nnum = 407\n\n# take input from the user\n# num = int(input(\"Enter a number: \"))\n\n# prime numbers are greater than 1\nif num > 1:\n   # check for factors\n   for i in range(2, num):\n       if (num % i) == 0:\n           print(num, \"is not a prime number\")\n           print(i, \"times\", num//i, \"is\", num)\n           break\n   else:\n       print(num, \"is a prime number\")\n\n# if input number is less than\n# or equal to 1, it is not prime\nelse:\n   print(num, \"is not a prime number\")\n", "output": "407 is not a prime number\n11 times 37 is 407"}, {"count": 61, "program": "# Python program to display all the prime numbers within an interval\n\n# change the values of lower and upper for a different result\nlower = 900\nupper = 1000\n\n# uncomment the following lines to take input from the user\n#lower = int(input(\"Enter lower range: \"))\n#upper = int(input(\"Enter upper range: \"))\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in range(lower, upper + 1):\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n", "output": "Prime numbers between 900 and 1000 are:\n907\n911\n919\n929\n937\n941\n947\n953\n967\n971\n977\n983\n991\n997"}, {"count": 62, "program": "# Python program to find the factorial of a number provided by the user.\n\n# change the value for a different result\nnum = 7\n\n# uncomment to take input from the user\n#num = int(input(\"Enter a number: \"))\n\nfactorial = 1\n\n# check if the number is negative, positive or zero\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1, num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\", num, \"is\", factorial)\n", "output": "The factorial of 7 is 5040"}, {"count": 63, "program": "''' Python program to find the\nmultiplication table (from 1 to 10)'''\n\nnum = 12\n\n# To take input from the user\n# num = int(input(\"Display multiplication table of? \"))\n\n# use for loop to iterate 10 times\nfor i in range(1, 11):\n   print(num, 'x', i, '=', num*i)\n", "output": "12 x 1 = 12\n12 x 2 = 24\n12 x 3 = 36\n12 x 4 = 48\n12 x 5 = 60\n12 x 6 = 72\n12 x 7 = 84\n12 x 8 = 96\n12 x 9 = 108\n12 x 10 = 120"}, {"count": 64, "program": "# Program to display the Fibonacci sequence up to n-th term where n is provided by the user\n\n# change this value for a different result\nnterms = 10\n\n# uncomment to take input from the user\n#nterms = int(input(\"How many terms? \"))\n\n# first two terms\nn1 = 0\nn2 = 1\ncount = 0\n\n# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\", nterms, \":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence upto\", nterms, \":\")\n   while count < nterms:\n       print(n1, end=' , ')\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n", "output": "Fibonacci sequence upto 10 :\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34,"}, {"count": 65, "program": "# Python program to check if the number provided by the user is an Armstrong number or not\n# take input from the user\nnum = int(input(\"Enter a number: \"))\n# initialize sum\nsum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n# display the result\nif num == sum:\n   print(num, \"is an Armstrong number\")\nelse:\n   print(num, \"is not an Armstrong number\")\n", "output": "Enter a number: 663\n663 is not an Armstrong number"}, {"count": 66, "program": "# Python program to shuffle a deck of card using the module random and draw 5 cards\n\n# import modules\nimport itertools\nimport random\n\n# make a deck of cards\ndeck = list(itertools.product(range(1, 14), [\n            'Spade', 'Heart', 'Diamond', 'Club']))\n\n# shuffle the cards\nrandom.shuffle(deck)\n\n# draw five cards\nprint(\"You got:\")\nfor i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])\n", "output": "You got:\n5 of Heart\n1 of Heart\n8 of Spade\n12 of Spade\n4 of Spade"}, {"count": 67, "program": "# Python program to display calendar of given month of the year\n\n# import module\nimport calendar\n\nyy = 2014\nmm = 11\n\n# To ask month and year from the user\n# yy = int(input(\"Enter year: \"))\n# mm = int(input(\"Enter month: \"))\n\n# display the calendar\nprint(calendar.month(yy, mm))\n", "output": "  November 2014\nMo Tu We Th Fr Sa Su\n               1  2\n3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30"}, {"count": 68, "program": "# The program takes a number and checks if it is an Armstrong number.\n\nn=int(input(\"Enter any number: \"))\na=list(map(int,str(n)))\nb=list(map(lambda x:x**3,a))\nif(sum(b)==n):\n    print(\"The number is an armstrong number. \")\nelse:\n    print(\"The number isn't an arsmtrong number. \")", "output": "Enter any number: 371\nThe number is an armstrong number."}, {"count": 69, "program": "# Program to add two matrices using nested loop\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[0,0,0],\n         [0,0,0],\n         [0,0,0]]\n\n# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   print(r)", "output": "[17, 15, 4]\n[10, 12, 9]\n[11, 13, 18]"}, {"count": 70, "program": "# Program to transpose a matrix using nested loop\n\nX = [[12, 7],\n     [4, 5],\n     [3, 8]]\n\nresult = [[0, 0, 0],\n          [0, 0, 0]]\n\n# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n", "output": "[12, 4, 3]\n[7, 5, 8]"}, {"count": 71, "program": "# Program to multiply two matrices using nested loops\n\n# 3x3 matrix\nX = [[12, 7, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n# 3x4 matrix\nY = [[5, 8, 1, 2],\n     [6, 7, 3, 0],\n     [4, 5, 9, 1]]\n# result is 3x4\nresult = [[0, 0, 0, 0],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0]]\n\n# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n", "output": "[114, 160, 60, 27]\n[74, 97, 73, 14]\n[119, 157, 112, 23]"}, {"count": 72, "program": "# Program to check if a string is palindrome or not\n\n# change this value for a different output\nmy_str = 'aIbohPhoBiA'\n\n# make it suitable for caseless comparison\nmy_str = my_str.casefold()\n\n# reverse the string\nrev_str = reversed(my_str)\n\n# check if the string is equal to its reverse\nif list(my_str) == list(rev_str):\n   print(\"It is palindrome\")\nelse:\n   print(\"It is not palindrome\")", "output": "It is palindrome"}, {"count": 73, "program": "#Python Program to Remove Punctuations From a String\n# define punctuation\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\n# To take input from the user\n# my_str = input(\"Enter a string: \")\n\n# remove punctuation from the string\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n# display the unpunctuated string\nprint(no_punct)\n", "output": "Hello he said and went"}, {"count": 74, "program": "# Program to sort alphabetically the words form a string provided by the user\n\n# change this value for a different result\nmy_str = \"Hello this Is an Example With cased letters\"\n\n# uncomment to take input from the user\n#my_str = input(\"Enter a string: \")\n\n# breakdown the string into a list of words\nwords = my_str.split()\n\n# sort the list\nwords.sort()\n\n# display the sorted words\n\nprint(\"The sorted words are:\")\nfor word in words:\n   print(word)\n", "output": "The sorted words are:\nExample\nHello\nIs\nWith\nan\ncased\nletters\nthis"}, {"count": 75, "program": "# Program to perform different set operations like in mathematics\n\n# define three sets\nE = {0, 2, 4, 6, 8};\nN = {1, 2, 3, 4, 5};\n\n# set union\nprint(\"Union of E and N is\",E | N)\n\n# set intersection\nprint(\"Intersection of E and N is\",E & N)\n\n# set difference\nprint(\"Difference of E and N is\",E - N)\n\n# set symmetric difference\nprint(\"Symmetric difference of E and N is\",E ^ N)", "output": "Union of E and N is {0, 1, 2, 3, 4, 5, 6, 8}\nIntersection of E and N is {2, 4}\nDifference of E and N is {8, 0, 6}\nSymmetric difference of E and N is {0, 1, 3, 5, 6, 8}"}, {"count": 76, "program": "# Program to count the number of each vowel in a string\n\n# string of vowels\nvowels = 'aeiou'\n\n# change this value for a different result\nip_str = 'Hello, have you tried our turorial section yet?'\n\n# uncomment to take input from the user\n#ip_str = input(\"Enter a string: \")\n\n# make it suitable for caseless comparisions\nip_str = ip_str.casefold()\n\n# make a dictionary with each vowel a key and value 0\ncount = {}.fromkeys(vowels, 0)\n\n# count the vowels\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n", "output": "{'o': 5, 'i': 3, 'a': 2, 'e': 5, 'u': 3}"}, {"count": 77, "program": "# Python rogram to find the SHA-1 message digest of a file\n# import hashlib module\nimport hashlib\ndef hash_file(filename):\n   h = hashlib.sha1()\n   # open file for reading in binary mode\n   with open(filename,'rb') as file:\n       # loop till the end of the file\n       chunk = 0\n       while chunk != b'':\n           # read only 1024 bytes at a time\n           chunk = file.read(1024)\n           h.update(chunk)\n   # return the hex representation of digest\n   return h.hexdigest()\nmessage = hash_file(\"track1.mp3\")\nprint(message)", "output": "633d7356947eec543c50b76a1852f92427f4dca9"}, {"count": 78, "program": "#This program converts the given binary number to its decimal equivalent\n\ndef binaryToDecimal(binary):\n    '''This function calculates the decimal equivalent to given binary number'''\n    binary1 = binary\n    decimal, i, n = 0, 0, 0\n    while(binary != 0):\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary//10\n        i += 1\n    print('Decimal equivalent of {} is {}'.format(binary1, decimal))\n\nif __name__ == '__main__':\n    userInput = int(input('Enter the binary number to check its decimal equivalent: '))\n    binaryToDecimal(userInput)", "output": "Enter the binary number to check its decimal equivalent: 10010\nDecimal equivalent of 10010 is 18"}, {"count": 79, "program": "# The program takes a number n and prints the pascal\u2019s triangle having n number of rows.\n\nn=int(input(\"Enter number of rows: \"))\na=[]\nfor i in range(n):\n    a.append([])\n    a[i].append(1)\n    for j in range(1,i):\n        a[i].append(a[i-1][j-1]+a[i-1][j])\n    if(n!=0):\n        a[i].append(1)\nfor i in range(n):\n    print(\"   \"*(n-i),end=\" \",sep=\" \")\n    for j in range(0,i+1):\n        print('{0:6}'.format(a[i][j]),end=\" \",sep=\" \")\n    print()", "output": "Enter number of rows: 3\n               1\n            1      1\n         1      2      1"}, {"count": 80, "program": "#Program to convert decimal to its equivalent binary\n\n\ndef decimalToBinary(n):\n   '''Function to print binary number for the input decimal using recursion'''\n   if n > 1:\n       decimalToBinary(n//2)\n   print(n % 2, end='')\n\n\nif __name__ == '__main__':\n    userInput = int(\n        input('Enter the decimal number to find its binary equivalent: '))\n    decimalToBinary(userInput)\n    print()\n", "output": "Enter the decimal number to find its binary equivalent: 80\n1010000"}, {"count": 81, "program": "#This program guesses the randomnly generated number\n\n\nimport random\n\n\ndef guess():\n    ''' This function guesses the randomnly generated number '''\n    randomNumber = random.randint(0, 21)\n    count = 0\n\n    while True:\n        count += 1\n        number = int(input('Enter the number between 0 to 20: '))\n        if number < randomNumber:\n            print('Too small')\n        elif number > randomNumber:\n            print('Too large')\n        else:\n            print('You have got it in', count, 'tries')\n            break\n\n\nif __name__ == '__main__':\n    guess()\n", "output": "Enter the number between 0 to 20: 9\nToo small\nEnter the number between 0 to 20: 15\nToo large\nEnter the number between 0 to 20: 12\nToo large\nEnter the number between 0 to 20: 11\nToo large\nEnter the number between 0 to 20: 10\nYou have got it in 5 tries"}, {"count": 82, "program": "# Python program to reverse the words\n\nuserInput = input()\nuserInput = userInput.split()\n\nprint(' '.join(userInput[::-1]))\n\n", "output": "Computer Science\nScience Computer\n"}, {"count": 83, "program": "#This program shows an example of bubble sort using Python\ndef bubbleSort(List):\n    for i in range(len(List)):\n        for j in range(len(List) - 1, i, -1):\n            if List[j] < List[j - 1]:\n                List[j], List[j - 1] = List[j - 1], List[j]\n    return List\n\n\nif __name__ == '__main__':\n    List = [3, 4, 2, 6, 5, 7, 1, 9]\n    print('Sorted List:', bubbleSort(List))\n", "output": "Sorted List: [1, 2, 3, 4, 5, 6, 7, 9]"}, {"count": 84, "program": "#This program illustrates the example for os module in short\n\nimport os\nimport time\n\nprint(os.getcwd())  # Prints the current working directory\n\nos.mkdir('newDir1')\nfor i in range(1, 10):\n    print('Here i is', i)\n    os.rename('newDir' + str(i), 'newDir' + str(i + 1))\n    time.sleep(2)\n", "output": "Here i is 1\nHere i is 2\nHere i is 3\nHere i is 4\nHere i is 5\nHere i is 6\nHere i is 7\nHere i is 8"}, {"count": 85, "program": "#In this program we will see how to define a class\n\n\nclass MyFirstClass():\n    #Class Attributes\n    var = 10\n\n\nfirstObject = MyFirstClass()\nprint(firstObject)  # Printing object's memory hex\nprint(firstObject.var)  # Accessing Class Attributes\n\nsecondObject = MyFirstClass()\nprint(secondObject)\nprint(secondObject.var)\n", "output": "<__main__.MyFirstClass object at 0x00000238CF432278>\n10\n<__main__.MyFirstClass object at 0x00000238CF4327F0>\n10\n"}, {"count": 86, "program": "#In this example we will be seeing how instance methods are used\n#Instance methods are accessed by: instance.method()\n\n\nclass Vehicle():\n    #Class Methods/ Attributes\n\n    #Here self is passed as an argument because instance is passed as first argument\n    def type(self):  # Without self it throws an error\n        print(self)\n        print('I have a type')\n\n\ncar = Vehicle()\nprint(car)\ncar.type()\n", "output": "<__main__.Vehicle object at 0x000002C02BD41278>\n<__main__.Vehicle object at 0x000002C02BD41278>\nI have a type\n"}, {"count": 87, "program": "#In this example we will be seeing how instance Attributes are used\n#Instance attributes are accessed by: object.attribute\n#Attributes are looked First in the instance and THEN in the class\n\nimport random\n\n\nclass Vehicle():\n    #Class Methods/ Attributes\n    def type(self):\n        #NOTE: This is not a class attribute as the variable is binded to self. Hence it becomes\n        #instance attribute\n        # Setting the instance attribute\n        self.randomValue = random.randint(1, 10)\n\n\ncar = Vehicle()\ncar.type()  # Calling the class Method\nprint(car.randomValue)  # Calling the instance attribute\n", "output": "3\n"}, {"count": 88, "program": "# Python program to copy or clone a list\n# Using the Slice Operator\n\n\ndef Cloning(li1):\n\tli_copy = li1[:]\n\treturn li_copy\n\n\n# Driver Code\nli1 = [4, 8, 2, 10, 15, 18]\nli2 = Cloning(li1)\nprint(\"Original List:\", li1)\nprint(\"After Cloning:\", li2)\n", "output": "Original List: [4, 8, 2, 10, 15, 18]\nAfter Cloning: [4, 8, 2, 10, 15, 18]"}, {"count": 89, "program": "# Python code to count the number of occurrences\ndef countX(lst, x):\n\tcount = 0\n\tfor ele in lst:\n\t\tif (ele == x):\n\t\t\tcount = count + 1\n\treturn count\n\n\n# Driver Code\nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8]\nx = 8\nprint('{} has occured {} times'.format(x, countX(lst, x)))\n", "output": "8 has occured 5 times"}, {"count": 90, "program": "# The program takes a number and checks if it is a Perfect number.\n\nn = int(input(\"Enter any number: \"))\nsum1 = 0\nfor i in range(1, n):\n    if(n % i == 0):\n        sum1 = sum1 + i\nif (sum1 == n):\n    print(\"The number is a Perfect number!\")\nelse:\n    print(\"The number is not a Perfect number!\")", "output": "Enter any number: 6\nThe number is a Perfect number!"}, {"count": 91, "program": "# Python program to find sum of elements in list\ntotal = 0\n\n# creating a list\nlist1 = [11, 5, 17, 18, 23]\n\n# Iterate each element in list\n# and add them in variale total\nfor ele in range(0, len(list1)):\n\ttotal = total + list1[ele]\n\n# printing total value\nprint(\"Sum of all elements in given list: \", total)\n", "output": "Sum of all elements in given list:  74"}, {"count": 92, "program": "# Python3 program to find list of uncommon words\n\n# Function to return all uncommon words\n\n\ndef UncommonWords(A, B):\n\n\t# count will contain all the word counts\n\tcount = {}\n\n\t# insert words of string A to hash\n\tfor word in A.split():\n\t\tcount[word] = count.get(word, 0) + 1\n\n\t# insert words of string B to hash\n\tfor word in B.split():\n\t\tcount[word] = count.get(word, 0) + 1\n\n\t# return required list of words\n\treturn [word for word in count if count[word] == 1]\n\n\n# Driver Code\nA = \"Geeks for Geeks\"\nB = \"Learning from Geeks for Geeks\"\n\n# Print required answer\nprint(UncommonWords(A, B))\n", "output": "['Learning', 'from']"}, {"count": 93, "program": "# Python program to print pattern G\ndef Pattern(line):\n    pat = \"\"\n    for i in range(0, line):\n        for j in range(0, line):\n            if ((j == 1 and i != 0 and i != line-1) or ((i == 0 or\n            i == line-1) and j > 1 and j < line-2) or (i == ((line-1)/2)\n             and j > line-5 and j < line-1) or (j == line-2 and\n                                                                                                                                       i != 0 and i != line-1 and i >= ((line-1)/2))):\n                pat = pat+\"*\"\n            else:\n                pat = pat+\" \"\n        pat = pat+\"\\n\"\n    return pat\n\n\n# Driver Code\nline = 7\nprint(Pattern(line))\n", "output": "  ***\n *\n *\n * ***\n *   *\n *   *\n  ***\n"}, {"count": 94, "program": "# python 3 code to print inverted star\n# pattern\n\n# n is the number of rows in which\n# star is going to be printed.\nn = 11\n\n# i is going to be enabled to\n# range between n-i t 0 with a\n# decrement of 1 with each iteration.\n# and in print function, for each iteration,\n# \u201d \u201d is multiplied with n-i and \u2018*\u2019 is\n# multiplied with i to create correct\n# space before of the stars.\nfor i in range(n, 0, -1):\n\tprint((n-i) * ' ' + i * '*')\n", "output": "***********\n **********\n  *********\n   ********\n    *******\n     ******\n      *****\n       ****\n        ***\n         **\n          *"}, {"count": 95, "program": "# Python program to convert time from 12 hour to 24 hour format\n\ndef convert24(str1):\n\n\t# Checking if last two elements of time\n\t# is AM and first two elements are 12\n\tif str1[-2:] == \"AM\" and str1[:2] == \"12\":\n\t\treturn \"00\" + str1[2:-2]\n\n\telif str1[-2:] == \"AM\":\n\t\treturn str1[:-2]\n\n\telif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n\t\treturn str1[:-2]\n\n\telse:\n\n\t\t# add 12 to hours and remove PM\n\t\treturn str(int(str1[:2]) + 12) + str1[2:8]\n\nprint(convert24(\"08:05:45 PM\"))\n", "output": "20:05:45"}, {"count": 96, "program": "# Python program to create a list of tuples\n# from given list having number and\n# its cube in each tuple\n\n# creating a list\nlist1 = [1, 2, 5, 6]\n\n# using list comprehension to iterate each\n# values in list and create a tuple as specified\nres = [(val, pow(val, 3)) for val in list1]\n\n# print the result\nprint(res)\n", "output": "[(1, 1), (2, 8), (5, 125), (6, 216)]"}, {"count": 97, "program": "# Python code to merge dict using update() method\ndef Merge(dict1, dict2):\n\treturn(dict2.update(dict1))\n\n\n# Driver code\ndict1 = {'a': 10, 'b': 8}\ndict2 = {'d': 6, 'c': 4}\n\n# This return None\nprint(Merge(dict1, dict2))\n\n# changes made in dict2\nprint(dict2)\n", "output": "None\n{'c': 4, 'a': 10, 'b': 8, 'd': 6}"}, {"count": 98, "program": "# Python program to print\n# ASCII Value of Character\n\n# In c we can assign different\n# characters of which we want ASCII value\n\nc = 'g'\n# print the ASCII value of assigned character in c\nprint(\"The ASCII value of '\" + c + \"' is\", ord(c))\n", "output": "The ASCII value of g is 103"}, {"count": 99, "program": "# Python code to demonstrate length of list\n# using naive method\n\n# Initializing list\ntest_list = [1, 4, 5, 7, 8]\n\n# Printing test_list\nprint(\"The list is : \" + str(test_list))\n\n# Finding length of list\n# using loop\n# Initializing counter\ncounter = 0\nfor i in test_list:\n\n\t# incrementing counter\n\tcounter = counter + 1\n\n# Printing length of list\nprint(\"Length of list using naive method is : \" + str(counter))\n", "output": "The list is : [1, 4, 5, 7, 8]\nLength of list using naive method is : 5"}, {"count": 100, "program": "# Python3 program to swap elements at given positions\n\n# Swap function\n\n\ndef swapPositions(list, pos1, pos2):\n\n\tlist[pos1], list[pos2] = list[pos2], list[pos1]\n\treturn list\n\n\n# Driver function\nList = [23, 65, 19, 90]\npos1, pos2 = 1, 3\n\nprint(swapPositions(List, pos1-1, pos2-1))\n", "output": "[19, 65, 23, 90]"}]}