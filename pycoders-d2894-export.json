{
  "Interview" : [ {
    "Answer" : "Python is a high-level, interpreted, interactive and object-oriented scripting language. Python is designed to be highly readable. It uses English keywords frequently where as other languages use punctuation, and it has fewer syntactical constructions than other languages.",
    "ID" : 1,
    "Question" : "What is Python?"
  }, {
    "Answer" : "PYTHONPATH - It has a role similar to PATH. This variable tells the Python interpreter where to locate the module files imported into a program. It should include the Python source library directory and the directories containing Python source code. PYTHONPATH is sometimes preset by the Python installer.",
    "ID" : 2,
    "Question" : "What is the purpose of PYTHONPATH environment variable?"
  }, {
    "Answer" : "Yes! Python is a case sensitive programming language.",
    "ID" : 3,
    "Question" : "Is python a case sensitive language?"
  }, {
    "Answer" : "It will print complete string. Output would be Hello World",
    "ID" : 4,
    "Question" : "What is the output of print str if str = 'Hello World!'?"
  }, {
    "Answer" : "It will print first character of the string. Output would be H.",
    "ID" : 5,
    "Question" : "What is the output of print str[0] if str = 'Hello World!'?"
  }, {
    "Answer" : "A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.",
    "ID" : 6,
    "Question" : "What are tuples in Python?"
  }, {
    "Answer" : "The main differences between lists and tuples are − Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as read-only lists.",
    "ID" : 7,
    "Question" : "What is the difference between tuples and lists in Python?"
  }, {
    "Answer" : "Python's dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.",
    "ID" : 8,
    "Question" : "What are Python's dictionaries?"
  }, {
    "Answer" : "Using dictionary.values() function, we can get all the values from the dictionary object.",
    "ID" : 9,
    "Question" : "How will you get all the values from the dictionary?"
  }, {
    "Answer" : "int(x [,base]) - Converts x to an integer. base specifies the base if x is a string.",
    "ID" : 10,
    "Question" : "How will you convert a string to an int in python?"
  }, {
    "Answer" : "long(x [,base] ) - Converts x to a long integer. base specifies the base if x is a string.",
    "ID" : 11,
    "Question" : "How will you convert a string to a long in python?"
  }, {
    "Answer" : "float(x) − Converts x to a floating-point number.",
    "ID" : 12,
    "Question" : "How will you convert a string to a float in python?"
  }, {
    "Answer" : "str(x) − Converts object x to a string representation.",
    "ID" : 13,
    "Question" : "How will you convert a object to a string in python?"
  }, {
    "Answer" : "repr(x) − Converts object x to an expression string.",
    "ID" : 14,
    "Question" : "How will you convert a object to a regular expression in python?"
  }, {
    "Answer" : "eval(str) − Evaluates a string and returns an object.",
    "ID" : 15,
    "Question" : "How will you convert a String to an object in python?"
  }, {
    "Answer" : "tuple(s) − Converts s to a tuple.",
    "ID" : 16,
    "Question" : "How will you convert a string to a tuple in python?"
  }, {
    "Answer" : "list(s) − Converts s to a list.",
    "ID" : 17,
    "Question" : "How will you convert a string to a list in python?"
  }, {
    "Answer" : "set(s) − Converts s to a set.",
    "ID" : 18,
    "Question" : "How will you convert a string to a set in python?"
  }, {
    "Answer" : "dict(d) − Creates a dictionary. d must be a sequence of (key,value) tuples.",
    "ID" : 19,
    "Question" : "How will you create a dictionary using tuples in python?"
  }, {
    "Answer" : "frozenset(s) − Converts s to a frozen set.",
    "ID" : 20,
    "Question" : "How will you convert a string to a frozen set in python?"
  }, {
    "Answer" : "chr(x) − Converts an integer to a character.",
    "ID" : 21,
    "Question" : "How will you convert an integer to a character in python?"
  }, {
    "Answer" : "unichr(x) − Converts an integer to a Unicode character.",
    "ID" : 22,
    "Question" : "How will you convert an integer to an unicode character in python?"
  }, {
    "Answer" : "ord(x) − Converts a single character to its integer value.",
    "ID" : 23,
    "Question" : "How will you convert a single character to its integer value in python?"
  }, {
    "Answer" : "hex(x) − Converts an integer to a hexadecimal string.",
    "ID" : 24,
    "Question" : "How will you convert an integer to hexadecimal string in python?"
  }, {
    "Answer" : "oct(x) − Converts an integer to an octal string.",
    "ID" : 25,
    "Question" : "How will you convert an integer to octal string in python?"
  }, {
    "Answer" : " Exponent − Performs exponential (power) calculation on operators. a**b = 10 to the power 20 if a = 10 and b = 20.",
    "ID" : 26,
    "Question" : "What is the purpose of  operator?"
  }, {
    "Answer" : "// Floor Division − The division of operands where the result is the quotient in which the digits after the decimal point are removed.",
    "ID" : 27,
    "Question" : "What is the purpose of // operator?"
  }, {
    "Answer" : "is − Evaluates to true if the variables on either side of the operator point to the same object and false otherwise. x is y, here is results in 1 if id(x) equals id(y).",
    "ID" : 28,
    "Question" : "What is the purpose of is operator?"
  }, {
    "Answer" : "not in − Evaluates to true if it does not finds a variable in the specified sequence and false otherwise. x not in y, here not in results in a 1 if x is not a member of sequence y.",
    "ID" : 29,
    "Question" : "What is the purpose of not in operator?"
  }, {
    "Answer" : "break statement − Terminates the loop statement and transfers execution to the statement immediately following the loop.",
    "ID" : 30,
    "Question" : "What is the purpose break statement in python?"
  }, {
    "Answer" : "continue statement − Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.",
    "ID" : 31,
    "Question" : "What is the purpose continue statement in python?"
  }, {
    "Answer" : "pass statement − The pass statement in Python is used when a statement is required syntactically but you do not want any command or code to execute.",
    "ID" : 32,
    "Question" : "What is the purpose pass statement in python?"
  }, {
    "Answer" : "choice(seq) − Returns a random item from a list, tuple, or string.",
    "ID" : 33,
    "Question" : "How can you pick a random item from a list or tuple?"
  }, {
    "Answer" : "randrange ([start,] stop [,step]) − returns a randomly selected element from range(start, stop, step).",
    "ID" : 34,
    "Question" : "How can you pick a random item from a range?"
  }, {
    "Answer" : "random() − returns a random float r, such that 0 is less than or equal to r and r is less than 1.",
    "ID" : 35,
    "Question" : "How can you get a random number in python?"
  }, {
    "Answer" : "seed([x]) − Sets the integer starting value used in generating random numbers. Call this function before calling any other random module function. Returns None.",
    "ID" : 36,
    "Question" : "How will you set the starting value in generating random numbers?"
  }, {
    "Answer" : "shuffle(lst) − Randomizes the items of a list in place. Returns None.",
    "ID" : 37,
    "Question" : "How will you randomizes the items of a list in place?"
  }, {
    "Answer" : "capitalize() − Capitalizes first letter of string.",
    "ID" : 38,
    "Question" : "How will you capitalizes first letter of string?"
  }, {
    "Answer" : "isalnum() − Returns true if string has at least 1 character and all characters are alphanumeric and false otherwise.",
    "ID" : 39,
    "Question" : "How will you check in a string that all characters are alphanumeric?"
  }, {
    "Answer" : "isdigit() − Returns true if string contains only digits and false otherwise.",
    "ID" : 40,
    "Question" : "How will you check in a string that all characters are digits?"
  }, {
    "Answer" : "‘lambda’ is a keyword in python which creates an anonymous function. Lambda does not contain block of statements. It does not contain return statements.\n‘lambda’ is a keyword in python which creates an anonymous function. Lambda does not contain block of statements. It does not contain return statements.",
    "ID" : 41,
    "Question" : "What is lambda function in python?"
  }, {
    "Answer" : "No.\nThere are some modules and functions in python that can only run on certain platforms.",
    "ID" : 42,
    "Question" : "Is Python platform independent?"
  }, {
    "Answer" : "Yes.\nYes it has a complier which works automatically so we don’t notice the compiler of python.",
    "ID" : 43,
    "Question" : "Do you think Python has a complier?"
  }, {
    "Answer" : "1.Django (Web framework of Python).\n2. Micro Frame work such as Flask and Bottle.\n3. Plone and Django CMS for advanced content Management.",
    "ID" : 44,
    "Question" : "What are the applications of Python?"
  }, {
    "Answer" : "No.",
    "ID" : 45,
    "Question" : "Is there any double data type in Python?"
  }, {
    "Answer" : "Pass indicates that nothing is to be done i.e. it signifies a no operation.",
    "ID" : 46,
    "Question" : "What does pass operation do?"
  }, {
    "Answer" : "A block begins when the line is intended by 4 spaces.",
    "ID" : 47,
    "Question" : "When does a new block begin in python?"
  }, {
    "Answer" : "Scikit-learn python Library used for Machine learning",
    "ID" : 48,
    "Question" : "Name the python Library used for Machine learning."
  }, {
    "Answer" : "You can use PyChecker, which is a static analyzer. It identifies the bugs in Python project and also reveals the style and complexity related bugs.\nAnother tool is Pylint, which checks whether the Python module satisfies the coding standard.",
    "ID" : 49,
    "Question" : "How To Find Bugs Or Perform Static Analysis In A Python Application?"
  }, {
    "Answer" : "Python decorator is a relative change that you do in Python syntax to adjust the functions quickly.",
    "ID" : 50,
    "Question" : "When Is The Python Decorator Used?"
  }, {
    "Answer" : "List Vs. Tuple.\nThe principal difference between a list and the tuple is that the former is mutable while the tuple is not.\nA tuple is allowed to be hashed, for example, using it as a key for dictionaries.",
    "ID" : 51,
    "Question" : "What Is The Principal Difference Between A List And The Tuple?"
  }, {
    "Answer" : "Python uses private heaps to maintain its memory. So the heap holds all the Python objects and the data structures. This area is only accessible to the Python interpreter; programmers can’t use it.\nAnd it’s the Python memory manager that handles the Private heap. It does the required allocation of the memory for Python objects.\nPython employs a built-in garbage collector, which salvages all the unused memory and offloads it to the heap space.",
    "ID" : 52,
    "Question" : "How Does Python Handle Memory Management?"
  }, {
    "Answer" : "Lambda Vs. Def.\nDef can hold multiple expressions while lambda is a uni-expression function.\nDef generates a function and designates a name to call it later. Lambda forms a function object and returns it.\nDef can have a return statement. Lambda can’t have return statements.\nLambda supports to get used inside a list and dictionary.",
    "ID" : 53,
    "Question" : "What Are The Principal Differences Between The Lambda And Def?"
  }, {
    "Answer" : "No, Python does not have a Switch statement, but you can write a Switch function and then use it.",
    "ID" : 54,
    "Question" : "Is There A Switch Or Case Statement In Python? If Not Then What Is The Reason For The Same?"
  }, {
    "Answer" : "Range() generates a list of numbers, which is used to iterate over for loops.\nfor i in range(5):\n    print(i)\nThe range() function accompanies two sets of parameters.\nrange(stop)\nstop: It is the no. of integers to generate and starts from zero. eg. range(3) == [0, 1, 2].\nrange([start], stop[, step])\nStart: It is the starting no. of the sequence.\nStop: It specifies the upper limit of the sequence.\nStep: It is the incrementing factor for generating the sequence.\nPoints to note:\nOnly integer arguments are allowed.\nParameters can be positive or negative.\nThe range() function in Python starts from the zeroth index.",
    "ID" : 55,
    "Question" : "What Is A Built-In Function That Python Uses To Iterate Over A Number Sequence?"
  }, {
    "Answer" : "There are two optional clauses you can use in the try-except block.\nThe “else” clause\nIt is useful if you want to run a piece of code when the try block doesn’t create an exception.\nThe “finally” clause\nIt is useful when you want to execute some steps which run, irrespective of whether there occurs an exception or not.",
    "ID" : 56,
    "Question" : "What Are The Optional Statements Possible Inside A Try-Except Block In Python?"
  }, {
    "Answer" : "A string in Python is a sequence of alpha-numeric characters. They are immutable objects. It means that they don’t allow modification once they get assigned a value. Python provides several methods, such as join(), replace(), or split() to alter strings. But none of these change the original object.",
    "ID" : 57,
    "Question" : "What Is A String In Python?"
  }, {
    "Answer" : "Slicing is a string operation for extracting a part of the string, or some part of a list. In Python, a string (say text) begins at index 0, and the nth character stores at position text[n-1]. Python can also perform reverse indexing, i.e., in the backward direction, with the help of negative numbers. In Python, the slice() is also a constructor function which generates a slice object. The result is a set of indices mentioned by range(start, stop, step). The slice() method allows three parameters. 1. start – starting number for the slicing to begin. 2. stop – the number which indicates the end of slicing. 3. step – the value to increment after each index (default = 1).",
    "ID" : 58,
    "Question" : "What Is Slicing In Python?"
  }, {
    "Answer" : "Python has support for formatting any value into a string. It may contain quite complex expressions.One of the common usages is to push values into a string with the %s format specifier. The formatting operation in Python has the comparable syntax as the C function printf() has.",
    "ID" : 59,
    "Question" : "What Is %S In Python?"
  }, {
    "Answer" : "Python strings are indeed immutable.\nLet’s take an example. We have an “str” variable holding a string value. We can’t mutate the container, i.e., the string, but can modify what it contains that means the value of the variable.",
    "ID" : 60,
    "Question" : "Is A String Immutable Or Mutable In Python?"
  }, {
    "Answer" : "An index is an integer data type which denotes a position within an ordered list or a string.\nIn Python, strings are also lists of characters. We can access them using the index which begins from zero and goes to the length minus one.\nFor example, in the string “Program,” the indexing happens like this:\nProgram 0 1 2 3 4 5",
    "ID" : 61,
    "Question" : "What Is The Index In Python?"
  }, {
    "Answer" : "A docstring is a unique text that happens to be the first statement in the following Python constructs:\nModule, Function, Class, or Method definition.\nA docstring gets added to the __doc__ attribute of the string object.\nNow, read some of the Python interview Questions on functions.",
    "ID" : 62,
    "Question" : "What Is Docstring In Python?"
  }, {
    "Answer" : "A function is an object which represents a block of code and is a reusable entity. It brings modularity to a program and a higher degree of code reusability.\nPython has given us many built-in functions such as print() and provides the ability to create user-defined functions.",
    "ID" : 63,
    "Question" : "What Is A Function In Python Programming?"
  }, {
    "Answer" : "Python gives us two basic types of functions.\n1. Built-in, and\n2. User-defined.\nThe built-in functions happen to be part of the Python language. Some of these are print(), dir(), len(), and abs() etc.",
    "ID" : 64,
    "Question" : "How Many Basic Types Of Functions Are Available In Python?"
  }, {
    "Answer" : "We can create a Python function in the following manner.\nStep-1: to begin the function, start writing with the keyword def and then mention the function name.\nStep-2: We can now pass the arguments and enclose them using the parentheses. A colon, in the end, marks the end of the function header.\nStep-3: After pressing an enter, we can add the desired Python statements for execution.",
    "ID" : 65,
    "Question" : "How Do We Write A Function In Python?"
  }, {
    "Answer" : "A function in Python gets treated as a callable object. It can allow some arguments and also return a value or multiple values in the form of a tuple. Apart from the function, Python has other constructs, such as classes or the class instances which fits in the same category.",
    "ID" : 66,
    "Question" : "What Is A Function Call Or A Callable Object In Python?"
  }, {
    "Answer" : "The purpose of a function is to receive the inputs and return some output.\nThe return is a Python statement which we can use in a function for sending a value back to its caller.",
    "ID" : 67,
    "Question" : "What Is The Return Keyword Used For In Python?"
  }, {
    "Answer" : "In call-by-value, the argument whether an expression or a value gets bound to the respective variable in the function.\nPython will treat that variable as local in the function-level scope. Any changes made to that variable will remain local and will not reflect outside the function.",
    "ID" : 68,
    "Question" : "What Is “Call By Value” In Python?"
  }, {
    "Answer" : "We use both “call-by-reference” and “pass-by-reference” interchangeably. When we pass an argument by reference, then it is available as an implicit reference to the function, rather than a simple copy. In such a case, any modification to the argument will also be visible to the caller.\nThis scheme also has the advantage of bringing more time and space efficiency because it leaves the need for creating local copies.\nOn the contrary, the disadvantage could be that a variable can get changed accidentally during a function call. Hence, the programmers need to handle in the code to avoid such uncertainty.",
    "ID" : 69,
    "Question" : "What Is “Call By Reference” In Python?"
  }, {
    "Answer" : "The Python trunc() function performs a mathematical operation to remove the decimal values from a particular expression and provides an integer value as its output.",
    "ID" : 70,
    "Question" : "What Is The Return Value Of The Trunc() Function?"
  }, {
    "Answer" : "It is not at all necessary for a function to return any value. However, if needed, we can use None as a return value.",
    "ID" : 71,
    "Question" : "Is It Mandatory For A Python Function To Return A Value?"
  }, {
    "Answer" : "The continue is a jump statement in Python which moves the control to execute the next iteration in a loop leaving all the remaining instructions in the block unexecuted.\nThe continue statement is applicable for both the “while” and “for” loops.",
    "ID" : 72,
    "Question" : "What Does The Continue Do In Python?"
  }, {
    "Answer" : "The id() is one of the built-in functions in Python.\nSignature: id(object)\nIt accepts one parameter and returns a unique identifier associated with the input object.",
    "ID" : 73,
    "Question" : "What Is The Purpose Of Id() Function In Python?"
  }, {
    "Answer" : "The __name__ is a unique variable. Since Python doesn’t expose the main() function, so when its interpreter gets to run the script, it first executes the code which is at level 0 indentation.\nTo see whether the main() gets called, we can use the __name__ variable in an if clause compares with the value “__main__.”",
    "ID" : 74,
    "Question" : "What Does The __ Name __ Do In Python?"
  }, {
    "Answer" : "Python’s print() function always prints a newline in the end. The print() function accepts an optional parameter known as the ‘end.’ Its value is ‘\\n’ by default. We can change the end character in a print statement with the value of our choice using this parameter.",
    "ID" : 75,
    "Question" : "What Is The Purpose Of “End” In Python?"
  }, {
    "Answer" : "Python provides a break statement to exit from a loop. Whenever the break hits in the code, the control of the program immediately exits from the body of the loop.\nThe break statement in a nested loop causes the control to exit from the inner iterative block.",
    "ID" : 76,
    "Question" : "When Should You Use The “Break” In Python?"
  }, {
    "Answer" : "The continue statement makes the loop to resume from the next iteration.\nOn the contrary, the pass statement instructs to do nothing, and the remainder of the code executes as usual.",
    "ID" : 77,
    "Question" : "What Is The Difference Between Pass And Continue In Python?"
  }, {
    "Answer" : "In Python, the len() is a primary string function. It determines the length of an input string.",
    "ID" : 78,
    "Question" : "What Does The Len() Function Do In Python?"
  }, {
    "Answer" : "The chr() function got re-added in Python 3.2. In version 3.0, it got removed.\nIt returns the string denoting a character whose Unicode code point is an integer.\nFor example, the chr(122) returns the string ‘z’ whereas the chr(1212) returns the string ‘Ҽ’.",
    "ID" : 79,
    "Question" : "What Does The Chr() Function Do In Python?"
  }, {
    "Answer" : "The ord(char) in Python takes a string of size one and returns an integer denoting the Unicode code format of the character in case of a Unicode type object, or the value of the byte if the argument is of 8-bit string type.\n>>> ord(\"z\")\n122",
    "ID" : 80,
    "Question" : "What Does The Ord() Function Do In Python?"
  }, {
    "Answer" : "Python provides the rstrip() method which duplicates the string but leaves out the whitespace characters from the end.\nThe rstrip() escapes the characters from the right end based on the argument value, i.e., a string mentioning the group of characters to get excluded.\nThe signature of the rstrip() is:\nstr.rstrip([char sequence/pre>\n#Example\ntest_str = 'Programming    '\n# The trailing whitespaces are excluded\nprint(test_str.rstrip())",
    "ID" : 81,
    "Question" : "What Is Rstrip() In Python?"
  }, {
    "Answer" : "Whitespace represents the characters that we use for spacing and separation.\nThey possess an “empty” representation. In Python, it could be a tab or space.",
    "ID" : 82,
    "Question" : "What Is Whitespace In Python?"
  }, {
    "Answer" : "Python provides this built-in isalpha() function for the string handling purpose.\nIt returns True if all characters in the string are of alphabet type, else it returns False.",
    "ID" : 83,
    "Question" : "What Is Isalpha() In Python?"
  }, {
    "Answer" : "Python’s split() function works on strings to cut a large piece into smaller chunks, or sub-strings. We can specify a separator to start splitting, or it uses the space as one by default.\n#Example\nstr = 'pdf csv json'\nprint(str.split(\" \"))\nprint(str.split())\nThe output:\n['pdf', 'csv', 'json']\n['pdf', 'csv', 'json']",
    "ID" : 84,
    "Question" : "How Do You Use The Split() Function In Python?"
  }, {
    "Answer" : "Python provides the join() method which works on strings, lists, and tuples. It combines them and returns a united value.",
    "ID" : 85,
    "Question" : "What Does The Join Method Do In Python?"
  }, {
    "Answer" : "Python provides the title() method to convert the first letter in each word to capital format while the rest turns to Lowercase.\n#Example\nstr = 'lEaRn pYtHoN'\nprint(str.title())\nThe output:\nLearn Python\nNow, check out some general purpose Python interview Questions.",
    "ID" : 86,
    "Question" : "What Does The Title() Method Do In Python?"
  }, {
    "Answer" : "CPython has its core developed in C. The prefix ‘C’ represents this fact. It runs an interpreter loop used for translating the Python-ish code to C language.",
    "ID" : 87,
    "Question" : "What Makes The CPython Different From Python?"
  }, {
    "Answer" : "PyPy provides maximum compatibility while utilizing CPython implementation for improving its performance.\nThe tests confirmed that PyPy is nearly five times faster than the CPython. It currently supports Python 2.7.",
    "ID" : 88,
    "Question" : "Which Package Is The Fastest Form Of Python?"
  }, {
    "Answer" : "Python supports GIL (the global interpreter lock) which is a mutex used to secure access to Python objects, synchronizing multiple threads from running the Python bytecodes at the same time.\nHow Is Python Thread Safe?\nPython ensures safe access to threads. It uses the GIL mutex to set synchronization. If a thread loses the GIL lock at any time, then you have to make the code thread-safe.\nFor example, many of the Python operations execute as atomic such as calling the sort() method on a list.",
    "ID" : 89,
    "Question" : "What Is GIL In Python Language?"
  }, {
    "Answer" : "Python implements a heap manager internally which holds all of its objects and data structures.\nThis heap manager does the allocation/de-allocation of heap space for objects.",
    "ID" : 90,
    "Question" : "How Does Python Manage The Memory?"
  }, {
    "Answer" : "A tuple is a collection type data structure in Python which is immutable.\nThey are similar to sequences, just like the lists. However, There are some differences between a tuple and list; the former doesn’t allow modifications whereas the list does.\nAlso, the tuples use parentheses for enclosing, but the lists have square brackets in their syntax.",
    "ID" : 91,
    "Question" : "What Is A Tuple In Python?"
  }, {
    "Answer" : "A dictionary is a data structure known as an associative array in Python which stores a collection of objects.\nThe collection is a set of keys having a single associated value. We can call it a hash, a map, or a hashmap as it gets called in other programming languages.",
    "ID" : 92,
    "Question" : "What Is A Dictionary In Python Programming?"
  }, {
    "Answer" : "Sets are unordered collection objects in Python. They store unique and immutable objects. Python has its implementation derived from mathematics.",
    "ID" : 93,
    "Question" : "What Is The Set Object In Python?"
  }, {
    "Answer" : "A dictionary has a group of objects (the keys) map to another group of objects (the values). A Python dictionary represents a mapping of unique Keys to Values.\nThey are mutable and hence will not change. The values associated with the keys can be of any Python types.",
    "ID" : 94,
    "Question" : "What Is The Use Of The Dictionary In Python?"
  }, {
    "Answer" : "A Python list is a variable-length array which is different from C-style linked lists.\nInternally, it has a contiguous array for referencing to other objects and stores a pointer to the array variable and its length in the list head structure.",
    "ID" : 95,
    "Question" : "Is Python List A Linked List?"
  }, {
    "Answer" : "Python supports object-oriented programming and provides almost all OOP features to use in programs.\nA Python class is a blueprint for creating the objects. It defines member variables and gets their behavior associated with them.\nWe can make it by using the keyword “class.” An object gets created from the constructor. This object represents the instance of the class.\nIn Python, we generate classes and instances in the following way.\n>>>class Human:  # Create the class\n...     pass\n>>>man = Human()  # Create the instance\n>>>print(man)\n<__main__.Human object at 0x0000000003559E10>",
    "ID" : 96,
    "Question" : "What Is Class In Python?"
  }, {
    "Answer" : "We can specify the values for the attributes at runtime. We need to add an init method and pass input to object constructor. See the following example demonstrating this.\n>>> class Human:\n    def __init__(self, profession):\n        self.profession = profession\n    def set_profession(self, new_profession):\n        self.profession = new_profession\n\n>>> man = Human(\"Manager\")\n>>> print(man.profession)\nManager",
    "ID" : 97,
    "Question" : "How To Assign Values For The Class Attributes At Runtime?"
  }, {
    "Answer" : "Inheritance is an OOP mechanism which allows an object to access its parent class features. It carries forward the base class functionality to the child.",
    "ID" : 98,
    "Question" : "What Is Inheritance In Python Programming?"
  }, {
    "Answer" : "Errors are coding issues in a program which may cause it to exit abnormally.",
    "ID" : 99,
    "Question" : " What Are Errors And Exceptions In Python Programs?"
  }, {
    "Answer" : "Iterators in Python are array-like objects which allow moving on the next element. We use them in traversing a loop, for example, in a “for” loop.\nPython library has a no. of iterators. For example, a list is also an iterator and we can start a for loop over it.",
    "ID" : 100,
    "Question" : " What Are Python Iterators?"
  }, {
    "Answer" : "The collection type like a list, tuple, dictionary, and set are all iterable objects whereas they are also iterable containers which return an iterator while traversing.",
    "ID" : 101,
    "Question" : "What Is The Difference Between An Iterator And Iterable?"
  }, {
    "Answer" : "A Generator is a kind of function which lets us specify a function that acts like an iterator and hence can get used in a “for” loop.\nIn a generator function, the yield keyword substitutes the return statement.\n# Simple Python function\ndef fn():\n    return \"Simple Python function.\"\n\n# Python Generator function\ndef generate():\n    yield \"Python Generator function.\"\n\nprint(next(generate()))\nThe output is:\nPython Generator function.",
    "ID" : 102,
    "Question" : "What Are Python Generators?"
  }, {
    "Answer" : "Python closures are function objects returned by another function. We use them to eliminate code redundancy.",
    "ID" : 103,
    "Question" : " What Are Closures In Python?"
  }, {
    "Answer" : "Python decorator gives us the ability to add new behavior to the given objects dynamically. In the example below, we’ve written a simple example to display a message pre and post the execution of a function.\ndef decorator_sample(func):\n    def decorator_hook(*args, **kwargs):\n        print(\"Before the function call\")\n        result = func(*args, **kwargs)\n        print(\"After the function call\")\n        return result\n    return decorator_hook\n\n@decorator_sample\ndef product(x, y):\n    \"Function to multiply two numbers.\"\n    return x * y\n\nprint(product(3, 3))\nThe output is:\nBefore the function call\nAfter the function call\n9",
    "ID" : 104,
    "Question" : " What Are Decorators In Python?"
  }, {
    "Answer" : "The signature for the list comprehension is as follows:\n[ expression(var) for var in iterable ]\nFor example, the below code will return all the numbers from 10 to 20 and store them in a list.\n>>> alist = [var for var in range(10, 20)]\n>>> print(alist)",
    "ID" : 105,
    "Question" : "What Is The Syntax For List Comprehension In Python?"
  }, {
    "Answer" : "A dictionary has the same syntax as was for the list comprehension but the difference is that it uses curly braces:\n{ aKey, itsValue for aKey in iterable }\nFor example, the below code will return all the numbers 10 to 20 as the keys and will store the respective squares of those numbers as the values.\n>>> adict = {var:var**2 for var in range(10, 20)}\n>>> print(adict)",
    "ID" : 106,
    "Question" : "What Is The Syntax For Dictionary Comprehension In Python?"
  }, {
    "Answer" : "The syntax for generator expression matches with the list comprehension, but the difference is that it uses parenthesis:\n( expression(var) for var in iterable )\nFor example, the below code will create a generator object that generates the values from 10 to 20 upon using it.\n>>> (var for var in range(10, 20))\n at 0x0000000003668728>\n>>> list((var for var in range(10, 20)))\nNow, see more Python interview Questions for practice.",
    "ID" : 107,
    "Question" : "What Is The Syntax For Generator Expression In Python?"
  }, {
    "Answer" : "We can utilize the following single statement as a conditional expression. default_statment if Condition else another_statement\n>>> no_of_days = 366\n>>> is_leap_year = \"Yes\" if no_of_days == 366 else \"No\"\n>>> print(is_leap_year)\nYes",
    "ID" : 108,
    "Question" : "How Do You Write A Conditional Expression In Python?"
  }, {
    "Answer" : "The globals() function in Python returns the current global symbol table as a dictionary object.\nPython maintains a symbol table to keep all necessary information about a program. This info includes the names of variables, methods, and classes used by the program.\nAll the information in this table remains in the global scope of the program and Python allows us to retrieve it using the globals() method.\nSignature: globals()\n\nArguments: None\n# Example: globals() function \nx = 9\ndef fn(): \n    y = 3\n    z = y + x\n    # Calling the globals() method\n    z = globals()['x'] = z\n    return z\n       \n# Test Code     \nret = fn() \nprint(ret)\nThe output is:\n12",
    "ID" : 109,
    "Question" : "What Is The Use Of Globals() Function In Python?"
  }, {
    "Answer" : "The ternary operator is an alternative for the conditional statements. It combines true or false values with a statement that you need to test.\nThe syntax would look like the one given below.\n[onTrue] if [Condition] else [onFalse]\nx, y = 35, 75\nsmaller = x if x < y else y\nprint(smaller)",
    "ID" : 110,
    "Question" : " How Does The Ternary Operator Work In Python?"
  }, {
    "Answer" : "The self is a Python keyword which represents a variable that holds the instance of an object.\nIn almost, all the object-oriented languages, it is passed to the methods as a hidden parameter.\nWhat Are The Different Methods To Copy An Object In Python?\nThere are two ways to copy objects in Python.\ncopy.copy() function\nIt makes a copy of the file from source to destination.\nIt’ll return a shallow copy of the parameter.\ncopy.deepcopy() function\nIt also produces the copy of an object from the source to destination.\nIt’ll return a deep copy of the parameter that you can pass to the function.",
    "ID" : 111,
    "Question" : "What Does The “Self” Keyword Do?"
  }, {
    "Answer" : "In Python, the docstring is what we call as the docstrings. It sets a process of recording Python functions, modules, and classes.",
    "ID" : 112,
    "Question" : "What Is The Purpose Of Docstrings In Python?"
  }, {
    "Answer" : "For converting a number into a string, you can use the built-in function str().  If you want an octal or hexadecimal representation, use the inbuilt function oct() or hex().",
    "ID" : 113,
    "Question" : "Which Python Function Will You Use To Convert A Number To A String?"
  }, {
    "Answer" : "Yes, we can use the Python debugger (pdb) to debug any Python program. And if we start a program using pdb, then it let us even step through the code.",
    "ID" : 114,
    "Question" : "How Do You Debug A Program In Python? Is It Possible To Step Through The Python Code?"
  }, {
    "Answer" : "Here are a few PDB commands to start debugging Python code.\nAdd breakpoint (b)\nResume execution (c)\nStep by step debugging (s)\nMove to the next line (n)\nList source code (l)\nPrint an expression (p)",
    "ID" : 115,
    "Question" : "List Down Some Of The PDB Commands For Debugging Python Programs?"
  }, {
    "Answer" : "The following command helps run a Python program in debug mode.\n$ python -m pdb python-script.py",
    "ID" : 116,
    "Question" : "What Is The Command To Debug A Python Program?"
  }, {
    "Answer" : "A generator in Python is a function which returns an iterable object. We can iterate on the generator object using the yield keyword. But we can only do that once because their values don’t persist in memory, they get the values on the fly.\nGenerators give us the ability to hold the execution of a function or a step as long as we want to keep it. However, here are a few examples where it is beneficial to use generators.\nWe can replace loops with generators for efficiently calculating results involving large data sets.\nGenerators are useful when we don’t want all the results and wish to hold back for some time.\nInstead of using a callback function, we can replace it with a generator. We can write a loop inside the function doing the same thing as the callback and turns it into a generator.",
    "ID" : 117,
    "Question" : "Why And When Do You Use Generators In Python?"
  }, {
    "Answer" : "The yield keyword can turn any function into a generator. It works like a standard return keyword. But it’ll always return a generator object. Also, a method can have multiple calls to the yield keyword.\nSee the example below.\ndef testgen(index):\n  weekdays = ['sun','mon','tue','wed','thu','fri','sat']\n  yield weekdays[index]\n  yield weekdays[index+1]\n\nday = testgen(0)\nprint next(day), next(day)\n\n#output: sun mon",
    "ID" : 118,
    "Question" : "What Does The Yield Keyword Do In Python?"
  }, {
    "Answer" : "Unlike sets, lists can have items with the same values.\nIn Python, the list has a ID() function which returns the occurrences of a particular item.\nID The Occurrences Of An Individual Item.\nweekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']\nprint(weekdays.ID('mon'))\n\n#output: 3\nID The Occurrences Of Each Item In The List.\nWe’ll use the list comprehension along with the ID() method. It’ll print the frequency of each of the items.\nweekdays = ['sun','mon','tue','wed','thu','fri','sun','mon','mon']\nprint([[x,weekdays.ID(x)] for x in set(weekdays)])\n\n#output: [['wed', 1], ['sun', 2], ['thu', 1], ['tue', 1], ['mon', 3], ['fri', 1]]",
    "ID" : 119,
    "Question" : "How Do You ID The Occurrences Of Each Item Present In The List Without Explicitly Mentioning Them?"
  }, {
    "Answer" : "NumPy is a Python package for scientific computing which can deal with large data sizes. It includes a powerful N-dimensional array object and a set of advanced functions.\nAlso, the NumPy arrays are superior to the built-in lists. There are a no. of reasons for this.\nNumPy arrays are more compact than lists.\nReading and writing items is faster with NumPy.\nUsing NumPy is more convenient than to the standard list.\nNumPy arrays are more efficient as they augment the functionality of lists in Python.",
    "ID" : 120,
    "Question" : "What Is NumPy And How Is It Better Than A List In Python?"
  }, {
    "Answer" : "There are two methods which we can apply to create empty NumPy arrays.\nThe First Method To Create An Empty Array.\nimport numpy\nnumpy.array([])\nThe Second Method To Create An Empty Array.\n# Make an empty NumPy array\nnumpy.empty(shape=(0,0))",
    "ID" : 121,
    "Question" : "What Are Different Ways To Create An Empty NumPy Array In Python?"
  } ],
  "Programs" : [ {
    "ID" : 1,
    "Output" : "Enter the principle amount:1000\nEnter the time(years):2\nEnter the rate:8\nThe simple interest is: 160.0",
    "Program" : "#The Program computes simple interest given the principle amount, rate and time.\n\nprinciple=float(input(\"Enter the principle amount:\"))\ntime=int(input(\"Enter the time(years):\"))\nrate=float(input(\"Enter the rate:\"))\nsimple_interest=(principle*time*rate)/100\nprint(\"The simple interest is:\",simple_interest)",
    "Title" : "The Program computes simple interest given the principle amount, rate and time."
  }, {
    "ID" : 2,
    "Output" : "Enter the number of terms: 4\nThe sum of series is 2.08",
    "Program" : "# The Program takes in the the number of terms and finds the sum of series: 1 + 1/2 + 1/3 + ….. + 1/N.\n\nn=int(input(\"Enter the number of terms: \"))\nsum1=0\nfor i in range(1,n+1):\n    sum1=sum1+(1/i)\nprint(\"The sum of series is\",round(sum1,2))",
    "Title" : "The Program takes in the the number of terms and finds the sum of series: 1 + 1/2 + 1/3 + ….. + 1/N."
  }, {
    "ID" : 3,
    "Output" : "219 \n\n[29 67] \n\n[[19 22]\n [43 50]]",
    "Program" : "# Python Program using NumPy for some basic mathematical operations\n\nimport numpy as np\n\n# Creating two arrays of rank 2\nx = np.array([[1, 2], [3, 4]])\ny = np.array([[5, 6], [7, 8]])\n\n# Creating two arrays of rank 1\nv = np.array([9, 10])\nw = np.array([11, 12])\n\n# Inner product of vectors\nprint(np.dot(v, w), \"\\n\")\n\n# Matrix and Vector product\nprint(np.dot(x, v), \"\\n\")\n\n# Matrix and matrix product\nprint(np.dot(x, y))\n",
    "Title" : "Python Program using NumPy for some basic mathematical operations"
  }, {
    "ID" : 4,
    "Output" : "Enter n: 9\nSequence: 9 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1",
    "Program" : "# This is a Python Program to test Collatz conjecture for a given number.\n\ndef collatz(n):\n    while n > 1:\n        print(n, end=' ')\n        if (n % 2):\n            # n is odd\n            n = 3*n + 1\n        else:\n            # n is even\n            n = n//2\n    print(1, end='')\n \n \nn = int(input('Enter n: '))\nprint('Sequence: ', end='')\ncollatz(n)",
    "Title" : "This is a Python Program to test Collatz conjecture for a given number."
  }, {
    "ID" : 5,
    "Output" : "Enter n: 15\nNumber of set bits: 4",
    "Program" : "# The Program finds the number of ones in the binary representation of a number.\n\ndef ID_set_bits(n):\n    ID = 0\n    while n:\n        n &= n - 1\n        ID += 1\n    return ID\n \n \nn = int(input('Enter n: '))\nprint('Number of set bits:', ID_set_bits(n))",
    "Title" : "The Program finds the number of ones in the binary representation of a number."
  }, {
    "ID" : 6,
    "Output" : "Enter binary number: 111\nGray codeword: 100",
    "Program" : "# We are given a binary number. We have to find the associated Gray codeword.\n\ndef binary_to_gray(n):\n    \"\"\"Convert Binary to Gray codeword and return it.\"\"\"\n    n = int(n, 2) # convert to int\n    n ^= (n >> 1)\n \n    # bin(n) returns n's binary representation with a '0b' prefixed\n    # the slice operation is to remove the prefix\n    return bin(n)[2:]\n \n \ng = input('Enter binary number: ')\nb = binary_to_gray(g)\nprint('Gray codeword:', b)",
    "Title" : "We are given a binary number. We have to find the associated Gray codeword."
  }, {
    "ID" : 7,
    "Output" : "Enter list by comma seperated: 1,2,100,3,4\nLargest element is: 100",
    "Program" : "# The Program takes a list and prints the largest number in the list.\n\n\na = list(map(int,input(\"Enter list by comma seperated: \").split(\",\")))\na.sort()\nprint(\"Largest element is:\",a[-1])",
    "Title" : "The Program takes a list and prints the largest number in the list."
  }, {
    "ID" : 8,
    "Output" : "Enter the sring:pratik\nEnter the index of the character to remove:3\nModified string:\npraik",
    "Program" : "# The Program takes a string and removes the nth index character from the non-empty string.\n\ndef remove(string, n):  \n      first = string[:n]   \n      last = string[n+1:]  \n      return first + last\nstring=input(\"Enter the sring:\")\nn=int(input(\"Enter the index of the character to remove:\"))\nprint(\"Modified string:\")\nprint(remove(string, n))",
    "Title" : "The Program takes a string and removes the nth index character from the non-empty string."
  }, {
    "ID" : 9,
    "Output" : "Enter first string:developer\nEnter second string:loperdeve\nThe strings are anagrams.",
    "Program" : "# The Program takes two strings and checks if the two strings are anagrams.\n\ns1=input(\"Enter first string:\")\ns2=input(\"Enter second string:\")\nif(sorted(s1)==sorted(s2)):\n      print(\"The strings are anagrams.\")\nelse:\n      print(\"The strings aren't anagrams.\")",
    "Title" : "The Program takes two strings and checks if the two strings are anagrams."
  }, {
    "ID" : 10,
    "Output" : "Enter string:avner\nNumber of vowels are:\n2",
    "Program" : "# The Program takes a string and IDs the number of vowels in a string.\n\nstring=input(\"Enter string:\")\nvowels=0\nfor i in string:\n      if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u' or i=='A' or i=='E' or i=='I' or i=='O' or i=='U'):\n            vowels=vowels+1\nprint(\"Number of vowels are:\")\nprint(vowels)",
    "Title" : "The Program takes a string and IDs the number of vowels in a string."
  }, {
    "ID" : 11,
    "Output" : "Enter string:avbbva\nThe string is a palindrome",
    "Program" : "# The Program takes a string and checks if a string is a palindrome or not.\n\nstring=input(\"Enter string:\")\nif(string==string[::-1]):\n      print(\"The string is a palindrome\")\nelse:\n      print(\"The string isn't a palindrome\")",
    "Title" : "The Program takes a string and checks if a string is a palindrome or not."
  }, {
    "ID" : 12,
    "Output" : "Enter string:The quick brown fox jumps over the lazy dog\nThe string is a pangram",
    "Program" : "# The Program takes a string and checks if it is a pangram or not.\n\nfrom string import ascii_lowercase as asc_lower\ndef check(s):\n    return set(asc_lower) - set(s.lower()) == set([])\nstrng=input(\"Enter string:\")\nif(check(strng)==True):\n      print(\"The string is a pangram\")\nelse:\n      print(\"The string isn't a pangram\")",
    "Title" : "The Program takes a string and checks if it is a pangram or not."
  }, {
    "ID" : 13,
    "Output" : "Enter year to be checked:2004\nThe year is a leap year!",
    "Program" : "# The Program takes in a year and checks whether it is a leap year or not.\n\nyear=int(input(\"Enter year to be checked:\"))\nif(year%4==0 and year%100!=0 or year%400==0):\n    print(\"The year is a leap year!\")\nelse:\n    print(\"The year isn't a leap year!\")",
    "Title" : "The Program takes in a year and checks whether it is a leap year or not."
  }, {
    "ID" : 14,
    "Output" : "Enter string:i am lazy\nEnter word:lazy\nSubstring in string!",
    "Program" : "# The Program takes a string and checks if a substring is present in the given string.\n\nstring=input(\"Enter string:\")\nsub_str=input(\"Enter word:\")\nif(string.find(sub_str)==-1):\n      print(\"Substring not found in string!\")\nelse:\n      print(\"Substring in string!\")",
    "Title" : "The Program takes a string and checks if a substring is present in the given string."
  }, {
    "ID" : 15,
    "Output" : "Enter string:avner is avner\n{'avner': 2, 'is': 1}",
    "Program" : "# The Program takes a string and IDs the frequency of words appearing in that string using a dictionary.\n\ntest_string=input(\"Enter string:\")\nl=[]\nl=test_string.split()\nwordfreq=[l.ID(p) for p in l]\nprint(dict(zip(l,wordfreq)))",
    "Title" : "The Program takes a string and IDs the frequency of words appearing in that string using a dictionary."
  }, {
    "ID" : 16,
    "Output" : "Enter first string:hello you\nEnter second string:escape\nThe common letters are:\ne",
    "Program" : "# The Program takes two strings and checks common letters in both the strings.\n\ns1=input(\"Enter first string:\")\ns2=input(\"Enter second string:\")\na=list(set(s1)&set(s2))\nprint(\"The common letters are:\")\nfor i in a:\n    print(i)",
    "Title" : "The Program takes two strings and checks common letters in both the strings."
  }, {
    "ID" : 17,
    "Output" : "Nth term: 9\nFibonacci :  34",
    "Program" : "# This is a Python Program to find the fibonacci series using recursion.\n\ndef fibonacci(n):\n    if(n <= 1):\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\nn = int(input(\"Nth term: \"))\nprint(\"Fibonacci : \",fibonacci(n))\n",
    "Title" : "This is a Python Program to find the fibonacci series using recursion."
  }, {
    "ID" : 18,
    "Output" : "Enter a number: 16\nBinary equivalent:\n10000",
    "Program" : "# This is a Python Program to find the binary equivalent of a number recursively.\n\nl=[]\ndef convert(b):\n    if(b==0):\n        return l\n    dig=b%2\n    l.append(dig)\n    convert(b//2)\na=int(input(\"Enter a number: \"))\nconvert(a)\nl.reverse()\nprint(\"Binary equivalent:\")\nfor i in l:\n    print(i,end='')",
    "Title" : "This is a Python Program to find the binary equivalent of a number recursively."
  }, {
    "ID" : 19,
    "Output" : "Enter file name: inp.txt\nEnter word to be searched:hello\nOccurrences of the word:\n1",
    "Program" : "# This is a Python Program to ID the occurrences of a word in a text file.\n\nfname = input(\"Enter file name: \")\nword=input(\"Enter word to be searched:\")\nk = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        for i in words:\n            if(i==word):\n                k=k+1\nprint(\"Occurrences of the word:\")\nprint(k)",
    "Title" : "This is a Python Program to ID the occurrences of a word in a text file."
  }, {
    "ID" : 20,
    "Output" : "Enter file name: inp.txt\nNumber of words:\n15",
    "Program" : "# This is a Python Program to ID the number of words in a text file.\n\nfname = input(\"Enter file name: \")\n \nnum_words = 0\n \nwith open(fname, 'r') as f:\n    for line in f:\n        words = line.split()\n        num_words += len(words)\nprint(\"Number of words:\")\nprint(num_words)",
    "Title" : "This is a Python Program to ID the number of words in a text file."
  }, {
    "ID" : 21,
    "Output" : "Enter number of disks: 3\nMove disk 1 from peg A to peg C.\nMove disk 2 from peg A to peg B.\nMove disk 1 from peg C to peg B.\nMove disk 3 from peg A to peg C.\nMove disk 1 from peg B to peg A.\nMove disk 2 from peg B to peg C.\nMove disk 1 from peg A to peg C.",
    "Program" : "# This is a Python Program to implement Tower of Hanoi.\n\ndef hanoi(disks, source, auxiliary, target):\n    if disks == 1:\n        print('Move disk 1 from peg {} to peg {}.'.format(source, target))\n        return\n \n    hanoi(disks - 1, source, target, auxiliary)\n    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))\n    hanoi(disks - 1, auxiliary, source, target)\n \n \ndisks = int(input('Enter number of disks: '))\nhanoi(disks, 'A', 'B', 'C')",
    "Title" : "This is a Python Program to implement Tower of Hanoi."
  }, {
    "ID" : 22,
    "Output" : "Enter the number between 0 to 20: 5\nToo small\nEnter the number between 0 to 20: 15\nToo large\nEnter the number between 0 to 20: 13\nToo small\nEnter the number between 0 to 20: 14\nYou have got it in 4 tries",
    "Program" : "# random guessing game\n\nimport random\n\ndef guess():\n    randomNumber = random.randint(0, 21)\n    ID = 0\n\n    while True:\n        ID += 1\n        number = int(input('Enter the number between 0 to 20: '))\n        if number < randomNumber:\n            print('Too small')\n        elif number > randomNumber:\n            print('Too large')\n        else:\n            print('You have got it in', ID, 'tries')\n            break\n\nguess()",
    "Title" : "random guessing game"
  }, {
    "ID" : 23,
    "Output" : "<__main__.MyFirstClass object at 0x000001DF359A1EF0>\n10\n<__main__.MyFirstClass object at 0x000001DF35AEC048>\n10",
    "Program" : "#In this Program we will see how to define a class\n\nclass MyFirstClass():\n    #Class Attributes\n    var = 10\n\nfirstObject = MyFirstClass()\nprint(firstObject)      #Printing object's memory hex\nprint(firstObject.var)  #Accessing Class Attributes\n\nsecondObject = MyFirstClass()\nprint(secondObject)\nprint(secondObject.var)",
    "Title" : "In this Program we will see how to define a class"
  }, {
    "ID" : 24,
    "Output" : "Enter the height in centimeters:171\nThe length in inches 67.37\nThe length in feet 5.61",
    "Program" : "# The Program reads the height in centimeters and then converts the height to feet and inches.\n\ncm=int(input(\"Enter the height in centimeters:\"))\ninches=0.394*cm\nfeet=0.0328*cm\nprint(\"The length in inches\",round(inches,2))\nprint(\"The length in feet\",round(feet,2))",
    "Title" : "The Program reads the height in centimeters and then converts the height to feet and inches."
  }, {
    "ID" : 25,
    "Output" : "<__main__.Vehicle object at 0x0000026C357A1EF0>\n<__main__.Vehicle object at 0x0000026C357A1EF0>\nI have a type",
    "Program" : "#In this example we will be seeing how instance methods are used\n#Instance methods are accessed by: instance.method()\n\nclass Vehicle():\n    #Class Methods/ Attributes\n\n    #Here self is passed as an argument because instance is passed as first argument\n    def type(self):     #Without self it throws an error\n        print(self)\n        print('I have a type')\n\ncar = Vehicle()\nprint(car)\ncar.type()",
    "Title" : "In this example we will be seeing how instance methods are used"
  }, {
    "ID" : 26,
    "Output" : "In data!\nIn Time!\nIn data!",
    "Program" : "#This Program illustrates the concept of inheritance\n#Python looks up for method in following order: Instance attributes, class attributes and the\n#from the base class\n\nclass Data(object):\n    def getData(self):\n        print('In data!')\n\nclass Time(Data):           #Inheriting from Data class\n    def getTime(self):\n        print('In Time!')\n\nif __name__ == '__main__':\n    data = Data()\n    time = Time()\n\n    data.getData()\n    time.getTime()\n    time.getData()          #Inherited Data method",
    "Title" : "This Program illustrates the concept of inheritance"
  }, {
    "ID" : 27,
    "Output" : "9",
    "Program" : "#In this example we will be seeing how instance Attributes are used\n#Instance attributes are accessed by: object.attribute\n#Attributes are looked First in the instance and THEN in the class\n\nimport random\nclass Vehicle():\n    #Class Methods/ Attributes\n    def type(self):\n        #NOTE: This is not a class attribute as the variable is binded to self. Hence it becomes\n        #instance attribute\n        self.randomValue = random.randint(1,10) #Setting the instance attribute\n\ncar = Vehicle()\ncar.type()              #Calling the class Method\nprint(car.randomValue)  #Calling the instance attribute",
    "Title" : "In this example we will be seeing how instance Attributes are used"
  }, {
    "ID" : 28,
    "Output" : "Name: Anver\nName: Pratik\n3000",
    "Program" : "# In this example we will see what are Python Magic Methods (or Special Methods) and how to overload them\n# Now why these methods are called Magic or Special methods anyway? The reason is that these\n# methods are invoked directly after creation of a class instance. For example:\n# __init__ is a Magic method. Also __str__, __repr__, __add__ are all magic methods.\n\nclass Employee(object):\n    def __init__(self, firstname, salary = 0):\n        self.firstname = firstname\n        self.salary = salary\n\n    def __str__(self):\n        return 'Name: ' + self.firstname\n\n    # For overloading the (+)\n    def __add__(self, other):\n        return self.salary + other.salary\n\nif __name__ == '__main__':\n    Anver = Employee('Anver', 1000)\n    Pratik = Employee('Pratik', 2000)\n    print(Anver)                # Name: Anver (This Output because of __str__ method overloading)\n    print(Pratik)              # Name : Pratik\n    print(Anver + Pratik)      # 3000 (This Output because of __add__ method overloading)",
    "Title" : "In this example we will see what are Python Magic Methods (or Special Methods) and how to overload them"
  }, {
    "ID" : 29,
    "Output" : "Looking in: directory/\nNumber of files 2\nNumber of Directories 0\nTotal: 2",
    "Program" : "# This script illustrates how to ID number of files and directories in a directory recursively\n\nimport os\n\n# Path IN which we have to ID files and directories\nPATH = 'directory/'   # Give your path here\n\nfileID = 0\ndirID = 0\n\nfor root, dirs, files in os.walk(PATH):\n    print('Looking in:',root)\n    for directories in dirs:\n        dirID += 1\n    for Files in files:\n        fileID += 1\n\nprint('Number of files',fileID)\nprint('Number of Directories',dirID)\nprint('Total:',(dirID + fileID))",
    "Title" : "This script illustrates how to ID number of files and directories in a directory recursively"
  }, {
    "ID" : 30,
    "Output" : "",
    "Program" : "# Send email using python\n\nimport smtplib\n\nfadd = ''                                       # sender's email address\ntadd = ''                                       # receiver's email address\nmsg = 'Mail sent through Python!'               # Message to be sent!\nusername = ''                                   # Your username(email ID)\npassword = ''                                   # Your password for above email ID\nserver = smtplib.SMTP('smtp.gmail.com',587)\nserver.ehlo()\nserver.starttls()\nserver.login(username,password)\nserver.sendmail(fadd,tadd,msg)",
    "Title" : "Send email using python"
  }, {
    "ID" : 31,
    "Output" : "",
    "Program" : "# This script helps to find the devices (mobiles and computers) connected to my wifi\n\n# This script needs python-nmap as a pre-requisite. To install: sudo pip3 install python-nmap\n\nimport nmap\nimport subprocess\n\n# function to scan network and display IPs of conected devices\ndef scan_network():\n    scanner = nmap.PortScanner()\n    myIP = subprocess.check_Output(['hostname -I'], shell=True)\n    myIP = str(myIP, 'utf-8').split('.')\n    print(myIP[:3])\n    scannedData = scanner.scan(hosts = '.'.join(myIP[:3]) + '.1/24', arguments = '-sP')\n\n    # printing all the IP addresses of connected devices\n    for hostnames in scannedData['scan']:\n        print(hostnames)\n\nscan_network()",
    "Title" : "This script helps to find the devices (mobiles and computers) connected to my wifi"
  }, {
    "ID" : 32,
    "Output" : "Local x, Local y\nGlobal x",
    "Program" : "#This Programs shows the rules for variable scope\n\n# LEGB Rule: Local, Enclosing, Global, Built-in\n\nx = 'Global x'\n\ndef test():\n    #global x\n    y = 'Local y'\n    x = 'Local x'\n    print(x +', '+ y) #prints 'Local x' and  'Local y'\n\nif __name__ == '__main__':\n    test()\n    print(x) #prints 'Global x'",
    "Title" : "This Programs shows the rules for variable scope"
  }, {
    "ID" : 33,
    "Output" : "Wanna generate a number? (If yes, press y else n): y\n10\nWanna generate a number? (If yes, press y else n): n\nBye!",
    "Program" : "# A Python generator is a function which returns a generator iterator (just an object we can iterate over)\n# by calling yield\n\ndef simpleGenerator(numbers):\n    i = 0\n    while True:\n        check = input('Wanna generate a number? (If yes, press y else n): ')\n        if check in ('Y', 'y') and len(numbers) > i:\n            yield numbers[i]\n            i += 1\n        else:\n            print('Bye!')\n            break\n\nfor number in simpleGenerator([10, 11, 12, 14]):\n    print(number)",
    "Title" : "A Python generator is a function which returns a generator iterator (just an object we can iterate over)"
  }, {
    "ID" : 34,
    "Output" : "Hey!",
    "Program" : "# A closure is a record storing a function[a] together with an environment:\n# a mapping associating each free variable of the function (variables that are used locally, but\n# defined in an enclosing scope) with the value or reference to which the name was bound when\n# the closure was created.A closure—unlike a plain function—allows the function to access those\n# captured variables through the closure's copies of their values or references, even when the function\n# is invoked outside their scope.\n\ndef outerFunction(text):\n    text = text\n\n    def innerFunction():\n        print(text)\n\n    return innerFunction\n\nif __name__ == '__main__':\n    myFunction = outerFunction('Hey!')\n    myFunction()",
    "Title" : "A closure is a record storing a function[a] together with an environment:"
  }, {
    "ID" : 35,
    "Output" : "Enter the temperature in celcius:38\nTemperature in farenheit is: 100.4",
    "Program" : "# The Program takes the temperature in Celsius and converts it to Fahrenheit.\n\ncelsius=int(input(\"Enter the temperature in celcius:\"))\nf=(celsius*1.8)+32\nprint(\"Temperature in farenheit is:\",f)",
    "Title" : "The Program takes the temperature in Celsius and converts it to Fahrenheit."
  }, {
    "ID" : 36,
    "Output" : "",
    "Program" : "#This Program illustrates a logging example\nimport logging\n\ndef log(number):\n    ''' This function creates a log file if any error is reported '''\n    logging.basicConfig(filename = 'P18-logfile.txt', level = logging.INFO)\n    try:\n        if int(number) % 2 == 0:\n            print('Successful')\n        else:\n            print('Unsuccessful, this instance will be reported, check the log file')\n            logging.info('Invalid Entry')\n    except:\n        print('Please enter a valid integer')\n\nif __name__ == '__main__':\n    try:\n        userInput = int(input('Enter a number: '))\n        log(userInput)\n    except:\n        print('Please enter a valid integer')",
    "Title" : "This Program illustrates a logging example"
  }, {
    "ID" : 37,
    "Output" : "python .\\code.py -s\nShowing this thing!",
    "Program" : "#In this example w will see the example for Python argument parser\n\nimport argparse\n\ndef argumentParser():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-s', '--show', help = 'Show something', action = 'store_true')\n    arg = parser.parse_args()\n    if(arg.show):\n        show()\n    else:\n        print('Dude give some arguments! Type ArgumentParser -h for more details')\n\n\ndef show():\n    print('Showing this thing!')\n\n\nif __name__ == '__main__':\n    argumentParser()",
    "Title" : "In this example w will see the example for Python argument parser"
  }, {
    "ID" : 38,
    "Output" : "example.csv created with\n\"Angelina\",\"Jolie\"",
    "Program" : "# using csv module\n\nimport csv\n\ndef csvWrite(filePath, data):\n    with open(filePath, 'a') as fd:\n        writer = csv.writer(fd, delimiter=',', quoting=csv.QUOTE_NONNUMERIC)\n        writer.writerow(data)\n\nif __name__ == '__main__':\n    userInput = input('What is your Fullname? ')\n    userInput = userInput.split(' ')\n    csvWrite('example.csv', userInput)",
    "Title" : "using csv module"
  }, {
    "ID" : 39,
    "Output" : "d6ad61e2f45d92951ea12ea1eac11e31",
    "Program" : "# This example illustrates an example to calculate a hash of a file\n\nimport hashlib\nBLOCKSIZE = 65536           # Block read size if file is big enough\nfileToOpen = 'code.py'\nhasher = hashlib.md5()\nwith open(fileToOpen, 'rb') as afile:\n    buf = afile.read(BLOCKSIZE)\n    while len(buf) > 0:\n        hasher.update(buf)\n        buf = afile.read(BLOCKSIZE)\nprint(hasher.hexdigest())",
    "Title" : "This example illustrates an example to calculate a hash of a file"
  }, {
    "ID" : 40,
    "Output" : "2\n3\n5\n7",
    "Program" : "# Sieve of Eratosthenes is one of the efficient algorithms to find all the prime numbers upto n, where n can be\n# upto 10 million. This algorithm is very efficient and fast and hence is preferred by many competitive Programmers.\n\ndef SieveOfEratosthenes(n):\n    primes = [True] * (n + 1)\n    p = 2                \n\n    while(p * p <= n):\n        if(primes[p]) == True:\n            for i in range(p * 2, n + 1, p):\n                primes[i] = False\n\n        p += 1\n        \n    # printing all primes\n    for i in range(2, n):\n        if primes[i]:\n            print(i)\n\nif __name__ == '__main__':\n    SieveOfEratosthenes(10)",
    "Title" : "Sieve of Eratosthenes is one of the efficient algorithms to find all the prime numbers upto n, where n can be"
  }, {
    "ID" : 41,
    "Output" : "6\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]",
    "Program" : "# In this Program we will learn what Python lambda is.\n\nmyFunc = lambda x, y: x * y\n# returns 6\nprint(myFunc(2, 3))\n\n# example to find squares of all numbers from a list\nmyList = [i for i in range(10)]\n# returns square of each number\nmyFunc = lambda x: x * x\n\nsquares = list(map(myFunc, myList))\nprint(squares)              # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]",
    "Title" : "In this Program we will learn what Python lambda is."
  }, {
    "ID" : 42,
    "Output" : "[==============================------------------------------] 50.0% ...",
    "Program" : "# This is the Program for creating a simple progress bar. You may need this in many of your projects.\n# You can install a module for progress bar by 'pip3 install progressbar2'\n\nimport sys, time\n\ndef progressBar(ID, total, suffix=''):\n    barLength = 60\n    filledLength = int(round(barLength * ID / float(total)))\n    percent = round(100.0 * ID / float(total), 1)\n    bar = '=' * filledLength + '-' * (barLength - filledLength)\n    sys.stdout.write('[%s] %s%s ...%s\\r' % (bar, percent, '%', suffix))\n    sys.stdout.flush()\n\nfor i in range(10):\n\ttime.sleep(1)\n\tprogressBar(i, 10)",
    "Title" : "This is the Program for creating a simple progress bar. You may need this in many of your projects."
  }, {
    "ID" : 43,
    "Output" : "3048 0241 00C9 18FA CF8D EB2D EFD5 FD37 89B9 E069 EA97 FC20 5E35 F577 EE31 C4FB C6E4 4811 7D86 BC8F BAFA 362F 922B F01B 2F40 C744 2654 C0DD 2881 D673 CA2B 4003 C266 E2CD CB02 0301 0001\nMy name is Anver",
    "Program" : "# This Program illustrates a simple Python encryption example using the RSA Algotrithm\n# RSA is an algorithm used by modern computers to encrypt and decrypt messages. It is an asymmetric\n# cryptographic algorithm. Asymmetric means that there are two different keys (public and private).\n\n# For installation: sudo pip3 install pycrypto\n\nfrom Crypto.PublicKey import RSA\nfrom Crypto import Random\n\nrandomGenerator = Random.new().read\n# Generating a private key and a public key\nkey = RSA.generate(1024, randomGenerator) # 1024 is the size of the key in bits\nprint(key)                                # Prints private key\nprint(key.publickey())                    # Prints public key\n# Encryption using Public Key\npublicKey = key.publickey()\nencryptedData = publicKey.encrypt('My name is Anver'.encode('utf-8'), 32)\nprint(encryptedData)\n# Decryption using Private Key\ndecryptedData = key.decrypt(encryptedData)\nprint(decryptedData)",
    "Title" : "This Program illustrates a simple Python encryption example using the RSA Algotrithm"
  }, {
    "ID" : 44,
    "Output" : "Sorted List: [1, 2, 3, 4, 5, 6, 7, 9]",
    "Program" : "#This Program shows an example of bubble sort using Python\n\n#   Best O(n^2); Average O(n^2); Worst O(n^2)\n\ndef bubbleSort(List):\n    for i in range(len(List)):\n        for j in range(len(List) - 1, i, -1):\n            if List[j] < List[j - 1]:\n                List[j], List[j - 1] = List[j - 1], List[j]\n    return List\n\nif __name__ == '__main__':\n    List = [3, 4, 2, 6, 5, 7, 1, 9]\n    print('Sorted List:',bubbleSort(List))",
    "Title" : "This Program shows an example of bubble sort using Python"
  }, {
    "ID" : 45,
    "Output" : "",
    "Program" : "# For transfering files to your another/local computer, you will have to install a FTP\n\nimport ftplib\n\ndef ftp_upload(ftpObj, pathToSend, pathToRecv, fileType='TXT'):\n    with open(pathToSend, 'rb') as fobj:\n        ftpObj.storlines('STOR ' + pathToRecv, fobj)\n\nif __name__ == '__main__':\n    ftp = ftplib.FTP('127.0.0.1')\n    ftp.login('anver', 'strongpass')\n    print('Logged in..')\n\n    pathToSend = '/Desktop/Output.txt'\n    pathToRecv = 'Documents/Output.txt'\n    ftp_upload(ftp, pathToSend, pathToRecv)\n\n    ftp.quit()",
    "Title" : "For transfering files to your another/local computer, you will have to install a FTP"
  }, {
    "ID" : 46,
    "Output" : "Enter an integer:91\nFactors are:\n7\n13",
    "Program" : "# The Program takes a number and computes the prime factors of the integer.\n\nn=int(input(\"Enter an integer:\"))\nprint(\"Factors are:\")\ni=1\nwhile(i<=n):\n    k=0\n    if(n%i==0):\n        j=1\n        while(j<=i):\n            if(i%j==0):\n                k=k+1\n            j=j+1\n        if(k==2):\n            print(i)\n    i=i+1",
    "Title" : "The Program takes a number and computes the prime factors of the integer."
  }, {
    "ID" : 47,
    "Output" : "Sorted List: [1, 2, 3, 4, 5, 6, 7, 9]",
    "Program" : "#This Program shows an example of insertion sort using Python.\n\n#  Best O(n); Average O(n^2); Worst O(n^2)\n\ndef insertionSort(List):\n    for i in range(1, len(List)):\n        currentNumber = List[i]\n        for j in range(i - 1, -1, -1):\n            if List[j] > currentNumber :\n                List[j], List[j + 1] = List[j + 1], List[j]\n            else:\n                List[j + 1] = currentNumber\n                break\n\n    return List\n\nif __name__ == '__main__':\n    List = [3, 4, 2, 6, 5, 7, 1, 9]\n    print('Sorted List:',insertionSort(List))",
    "Title" : "This Program shows an example of insertion sort using Python."
  }, {
    "ID" : 48,
    "Output" : "The square root of 8.000 is 2.828",
    "Program" : "# Python Program to calculate the square root\n\n# Note: change this value for a different result\nnum = 8\n\n# uncomment to take the input from the user\n#num = float(input('Enter a number: '))\nnum_sqrt = num ** 0.5\nprint('The square root of %0.3f is %0.3f' % (num, num_sqrt))\n",
    "Title" : "Python Program to calculate the square root"
  }, {
    "ID" : 49,
    "Output" : "The area of the triangle is 14.70",
    "Program" : "# Python Program to find the area of triangle\n\na = float(input('Enter first side: '))\nb = float(input('Enter second side: '))\nc = float(input('Enter third side: '))\n\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint('The area of the triangle is %0.2f' % area)\n",
    "Title" : "Python Program to find the area of triangle"
  }, {
    "ID" : 50,
    "Output" : "Enter a: 1\nEnter b: 5\nEnter c: 6\nThe solutions are (-3+0j) and (-2+0j)",
    "Program" : "# Solve the quadratic equation ax**2 + bx + c = 0\n\n# import complex math module\nimport cmath\n\na = float(input('Enter a: '))\nb = float(input('Enter b: '))\nc = float(input('Enter c: '))\n\n# calculate the discriminant\nd = (b**2) - (4*a*c)\n\n# find two solutions\nsol1 = (-b-cmath.sqrt(d))/(2*a)\nsol2 = (-b+cmath.sqrt(d))/(2*a)\n\nprint('The solution are {0} and {1}'.format(sol1, sol2))\n",
    "Title" : "Solve the quadratic equation ax**2 + bx + c = 0"
  }, {
    "ID" : 51,
    "Output" : "The value of x after swapping: 10\nThe value of y after swapping: 5",
    "Program" : "# Python Program to swap two variables\n\n# To take input from the user\nx = input('Enter value of x: ')\ny = input('Enter value of y: ')\n\n# create a temporary variable and swap the values\ntemp = x\nx = y\ny = temp\n\nprint('The value of x after swapping: {}'.format(x))\nprint('The value of y after swapping: {}'.format(y))\n",
    "Title" : "Python Program to swap two variables"
  }, {
    "ID" : 52,
    "Output" : "5",
    "Program" : "# Program to generate a random number between 0 and 9\n\n# import the random module\nimport random\n\nprint(random.randint(0, 9))\n",
    "Title" : "Program to generate a random number between 0 and 9"
  }, {
    "ID" : 53,
    "Output" : "5.500 kilometers is equal to 3.418 miles",
    "Program" : "#Python Program to Convert Kilometers to Miles\n\nkilometers = 5.5\n\n# To take kilometers from the user, uncomment the code below\n# kilometers = float(input(\"Enter value in kilometers\"))\n\n# conversion factor\nconv_fac = 0.621371\n\n# calculate miles\nmiles = kilometers * conv_fac\nprint('%0.3f kilometers is equal to %0.3f miles' %(kilometers,miles))",
    "Title" : "Python Program to Convert Kilometers to Miles"
  }, {
    "ID" : 54,
    "Output" : "37.5 degree Celsius is equal to 99.5 degree Fahrenheit",
    "Program" : "# Python Program to convert temperature in celsius to fahrenheit\n\n# change this value for a different result\ncelsius = 37.5\n\n# calculate fahrenheit\nfahrenheit = (celsius * 1.8) + 32\nprint('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %\n      (celsius, fahrenheit))\n",
    "Title" : "Python Program to convert temperature in celsius to fahrenheit"
  }, {
    "ID" : 55,
    "Output" : "Enter a number: 2\nPositive number",
    "Program" : "#Python Program to Check if a Number is Positive, Negative or 0\n\nnum = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")",
    "Title" : "Python Program to Check if a Number is Positive, Negative or 0"
  }, {
    "ID" : 56,
    "Output" : "Enter a number: 43\n43 is Odd",
    "Program" : "# Python Program to check if the input number is odd or even.\n# A number is even if division by 2 give a remainder of 0.\n# If remainder is 1, it is odd number.\nnum = int(input(\"Enter a number: \"))\nif (num % 2) == 0:\n   print(\"{0} is Even\".format(num))\nelse:\n   print(\"{0} is Odd\".format(num))\n",
    "Title" : "Python Program to check if the input number is odd or even."
  }, {
    "ID" : 57,
    "Output" : "Enter an integer:25\nThe divisors of the number are:\n1\n5\n25",
    "Program" : "# The Program takes a number and generates all the divisors of the number.\n\nn=int(input(\"Enter an integer:\"))\nprint(\"The divisors of the number are:\")\nfor i in range(1,n+1):\n    if(n%i==0):\n        print(i)",
    "Title" : "The Program takes a number and generates all the divisors of the number."
  }, {
    "ID" : 58,
    "Output" : "2000 is a leap year",
    "Program" : "# Python Program to check if the input year is a leap year or not\n\nyear = 2000\n\n# To get year (integer input) from the user\n# year = int(input(\"Enter a year: \"))\n\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n",
    "Title" : "Python Program to check if the input year is a leap year or not"
  }, {
    "ID" : 59,
    "Output" : "The largest number between 10, 14 and 12 is 14.0",
    "Program" : "# Python Program to find the largest number among the three input numbers\n\n# change the values of num1, num2 and num3\n# for a different result\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number between\", num1,\n      \",\", num2, \"and\", num3, \"is\", largest)\n",
    "Title" : "Python Program to find the largest number among the three input numbers"
  }, {
    "ID" : 60,
    "Output" : "407 is not a prime number\n11 times 37 is 407",
    "Program" : "# Python Program to check if the input number is prime or not\n\nnum = 407\n\n# take input from the user\n# num = int(input(\"Enter a number: \"))\n\n# prime numbers are greater than 1\nif num > 1:\n   # check for factors\n   for i in range(2, num):\n       if (num % i) == 0:\n           print(num, \"is not a prime number\")\n           print(i, \"times\", num//i, \"is\", num)\n           break\n   else:\n       print(num, \"is a prime number\")\n\n# if input number is less than\n# or equal to 1, it is not prime\nelse:\n   print(num, \"is not a prime number\")\n",
    "Title" : "Python Program to check if the input number is prime or not"
  }, {
    "ID" : 61,
    "Output" : "Prime numbers between 900 and 1000 are:\n907\n911\n919\n929\n937\n941\n947\n953\n967\n971\n977\n983\n991\n997",
    "Program" : "# Python Program to display all the prime numbers within an interval\n\n# change the values of lower and upper for a different result\nlower = 900\nupper = 1000\n\n# uncomment the following lines to take input from the user\n#lower = int(input(\"Enter lower range: \"))\n#upper = int(input(\"Enter upper range: \"))\n\nprint(\"Prime numbers between\", lower, \"and\", upper, \"are:\")\n\nfor num in range(lower, upper + 1):\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n",
    "Title" : "Python Program to display all the prime numbers within an interval"
  }, {
    "ID" : 62,
    "Output" : "The factorial of 7 is 5040",
    "Program" : "# Python Program to find the factorial of a number provided by the user.\n\n# change the value for a different result\nnum = 7\n\n# uncomment to take input from the user\n#num = int(input(\"Enter a number: \"))\n\nfactorial = 1\n\n# check if the number is negative, positive or zero\nif num < 0:\n   print(\"Sorry, factorial does not exist for negative numbers\")\nelif num == 0:\n   print(\"The factorial of 0 is 1\")\nelse:\n   for i in range(1, num + 1):\n       factorial = factorial*i\n   print(\"The factorial of\", num, \"is\", factorial)\n",
    "Title" : "Python Program to find the factorial of a number provided by the user."
  }, {
    "ID" : 63,
    "Output" : "12 x 1 = 12\n12 x 2 = 24\n12 x 3 = 36\n12 x 4 = 48\n12 x 5 = 60\n12 x 6 = 72\n12 x 7 = 84\n12 x 8 = 96\n12 x 9 = 108\n12 x 10 = 120",
    "Program" : "# Python Program to find the multiplication table (from 1 to 10)\n\nnum = 12\n\n# To take input from the user\n# num = int(input(\"Display multiplication table of? \"))\n\n# use for loop to iterate 10 times\nfor i in range(1, 11):\n   print(num, 'x', i, '=', num*i)\n",
    "Title" : "Python Program to find the multiplication table (from 1 to 10)"
  }, {
    "ID" : 64,
    "Output" : "Fibonacci sequence upto 10 :\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34,",
    "Program" : "# Program to display the Fibonacci sequence up to n-th term where n is provided by the user\n\n# change this value for a different result\nnterms = 10\n\n# uncomment to take input from the user\n#nterms = int(input(\"How many terms? \"))\n\n# first two terms\nn1 = 0\nn2 = 1\nID = 0\n\n# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\", nterms, \":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence upto\", nterms, \":\")\n   while ID < nterms:\n       print(n1, end=' , ')\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       ID += 1\n",
    "Title" : "Program to display the Fibonacci sequence up to n-th term where n is provided by the user"
  }, {
    "ID" : 65,
    "Output" : "Enter a number: 663\n663 is not an Armstrong number",
    "Program" : "# Python Program to check if the number provided by the user is an Armstrong number or not\n# take input from the user\nnum = int(input(\"Enter a number: \"))\n# initialize sum\nsum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n# display the result\nif num == sum:\n   print(num, \"is an Armstrong number\")\nelse:\n   print(num, \"is not an Armstrong number\")\n",
    "Title" : "Python Program to check if the number provided by the user is an Armstrong number or not"
  }, {
    "ID" : 66,
    "Output" : "You got:\n5 of Heart\n1 of Heart\n8 of Spade\n12 of Spade\n4 of Spade",
    "Program" : "# Python Program to shuffle a deck of card using the module random and draw 5 cards\n\n# import modules\nimport itertools\nimport random\n\n# make a deck of cards\ndeck = list(itertools.product(range(1, 14), [\n            'Spade', 'Heart', 'Diamond', 'Club']))\n\n# shuffle the cards\nrandom.shuffle(deck)\n\n# draw five cards\nprint(\"You got:\")\nfor i in range(5):\n   print(deck[i][0], \"of\", deck[i][1])\n",
    "Title" : "Python Program to shuffle a deck of card using the module random and draw 5 cards"
  }, {
    "ID" : 67,
    "Output" : "  November 2014\nMo Tu We Th Fr Sa Su\n               1  2\n3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 29 30",
    "Program" : "# Python Program to display calendar of given month of the year\n\n# import module\nimport calendar\n\nyy = 2014\nmm = 11\n\n# To ask month and year from the user\n# yy = int(input(\"Enter year: \"))\n# mm = int(input(\"Enter month: \"))\n\n# display the calendar\nprint(calendar.month(yy, mm))\n",
    "Title" : "Python Program to display calendar of given month of the year"
  }, {
    "ID" : 68,
    "Output" : "Enter any number: 371\nThe number is an armstrong number.",
    "Program" : "# The Program takes a number and checks if it is an Armstrong number.\n\nn=int(input(\"Enter any number: \"))\na=list(map(int,str(n)))\nb=list(map(lambda x:x**3,a))\nif(sum(b)==n):\n    print(\"The number is an armstrong number. \")\nelse:\n    print(\"The number isn't an arsmtrong number. \")",
    "Title" : "The Program takes a number and checks if it is an Armstrong number."
  }, {
    "ID" : 69,
    "Output" : "[17, 15, 4]\n[10, 12, 9]\n[11, 13, 18]",
    "Program" : "# Program to add two matrices using nested loop\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[0,0,0],\n         [0,0,0],\n         [0,0,0]]\n\n# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   print(r)",
    "Title" : "Program to add two matrices using nested loop"
  }, {
    "ID" : 70,
    "Output" : "[12, 4, 3]\n[7, 5, 8]",
    "Program" : "# Program to transpose a matrix using nested loop\n\nX = [[12, 7],\n     [4, 5],\n     [3, 8]]\n\nresult = [[0, 0, 0],\n          [0, 0, 0]]\n\n# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n",
    "Title" : "Program to transpose a matrix using nested loop"
  }, {
    "ID" : 71,
    "Output" : "[114, 160, 60, 27]\n[74, 97, 73, 14]\n[119, 157, 112, 23]",
    "Program" : "# Program to multiply two matrices using nested loops\n\n# 3x3 matrix\nX = [[12, 7, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n# 3x4 matrix\nY = [[5, 8, 1, 2],\n     [6, 7, 3, 0],\n     [4, 5, 9, 1]]\n# result is 3x4\nresult = [[0, 0, 0, 0],\n          [0, 0, 0, 0],\n          [0, 0, 0, 0]]\n\n# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n",
    "Title" : "Program to multiply two matrices using nested loops"
  }, {
    "ID" : 72,
    "Output" : "It is palindrome",
    "Program" : "# Program to check if a string is palindrome or not\n\n# change this value for a different Output\nmy_str = 'aIbohPhoBiA'\n\n# make it suitable for caseless comparison\nmy_str = my_str.casefold()\n\n# reverse the string\nrev_str = reversed(my_str)\n\n# check if the string is equal to its reverse\nif list(my_str) == list(rev_str):\n   print(\"It is palindrome\")\nelse:\n   print(\"It is not palindrome\")",
    "Title" : "Program to check if a string is palindrome or not"
  }, {
    "ID" : 73,
    "Output" : "Hello he said and went",
    "Program" : "#Python Program to Remove Punctuations From a String\n# define punctuation\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\n# To take input from the user\n# my_str = input(\"Enter a string: \")\n\n# remove punctuation from the string\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n# display the unpunctuated string\nprint(no_punct)\n",
    "Title" : "Python Program to Remove Punctuations From a String"
  }, {
    "ID" : 74,
    "Output" : "The sorted words are:\nExample\nHello\nIs\nWith\nan\ncased\nletters\nthis",
    "Program" : "# Program to sort alphabetically the words form a string provided by the user\n\n# change this value for a different result\nmy_str = \"Hello this Is an Example With cased letters\"\n\n# uncomment to take input from the user\n#my_str = input(\"Enter a string: \")\n\n# breakdown the string into a list of words\nwords = my_str.split()\n\n# sort the list\nwords.sort()\n\n# display the sorted words\n\nprint(\"The sorted words are:\")\nfor word in words:\n   print(word)\n",
    "Title" : "Program to sort alphabetically the words form a string provided by the user"
  }, {
    "ID" : 75,
    "Output" : "Union of E and N is {0, 1, 2, 3, 4, 5, 6, 8}\nIntersection of E and N is {2, 4}\nDifference of E and N is {8, 0, 6}\nSymmetric difference of E and N is {0, 1, 3, 5, 6, 8}",
    "Program" : "# Program to perform different set operations like in mathematics\n\n# define three sets\nE = {0, 2, 4, 6, 8};\nN = {1, 2, 3, 4, 5};\n\n# set union\nprint(\"Union of E and N is\",E | N)\n\n# set intersection\nprint(\"Intersection of E and N is\",E & N)\n\n# set difference\nprint(\"Difference of E and N is\",E - N)\n\n# set symmetric difference\nprint(\"Symmetric difference of E and N is\",E ^ N)",
    "Title" : "Program to perform different set operations like in mathematics"
  }, {
    "ID" : 76,
    "Output" : "{'o': 5, 'i': 3, 'a': 2, 'e': 5, 'u': 3}",
    "Program" : "# Program to ID the number of each vowel in a string\n\n# string of vowels\nvowels = 'aeiou'\n\n# change this value for a different result\nip_str = 'Hello, have you tried our turorial section yet?'\n\n# uncomment to take input from the user\n#ip_str = input(\"Enter a string: \")\n\n# make it suitable for caseless comparisions\nip_str = ip_str.casefold()\n\n# make a dictionary with each vowel a key and value 0\nID = {}.fromkeys(vowels, 0)\n\n# ID the vowels\nfor char in ip_str:\n   if char in ID:\n       ID[char] += 1\n\nprint(ID)\n",
    "Title" : "Program to ID the number of each vowel in a string"
  }, {
    "ID" : 77,
    "Output" : "633d7356947eec543c50b76a1852f92427f4dca9",
    "Program" : "# Python rogram to find the SHA-1 message digest of a file\n# import hashlib module\nimport hashlib\ndef hash_file(filename):\n   h = hashlib.sha1()\n   # open file for reading in binary mode\n   with open(filename,'rb') as file:\n       # loop till the end of the file\n       chunk = 0\n       while chunk != b'':\n           # read only 1024 bytes at a time\n           chunk = file.read(1024)\n           h.update(chunk)\n   # return the hex representation of digest\n   return h.hexdigest()\nmessage = hash_file(\"track1.mp3\")\nprint(message)",
    "Title" : "Python rogram to find the SHA-1 message digest of a file"
  }, {
    "ID" : 78,
    "Output" : "Enter the binary number to check its decimal equivalent: 10010\nDecimal equivalent of 10010 is 18",
    "Program" : "#This Program converts the given binary number to its decimal equivalent\n\ndef binaryToDecimal(binary):\n    '''This function calculates the decimal equivalent to given binary number'''\n    binary1 = binary\n    decimal, i, n = 0, 0, 0\n    while(binary != 0):\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary//10\n        i += 1\n    print('Decimal equivalent of {} is {}'.format(binary1, decimal))\n\nif __name__ == '__main__':\n    userInput = int(input('Enter the binary number to check its decimal equivalent: '))\n    binaryToDecimal(userInput)",
    "Title" : "This Program converts the given binary number to its decimal equivalent"
  }, {
    "ID" : 79,
    "Output" : "Enter number of rows: 3\n               1\n            1      1\n         1      2      1",
    "Program" : "# The Program takes a number n and prints the pascal’s triangle having n number of rows.\n\nn=int(input(\"Enter number of rows: \"))\na=[]\nfor i in range(n):\n    a.append([])\n    a[i].append(1)\n    for j in range(1,i):\n        a[i].append(a[i-1][j-1]+a[i-1][j])\n    if(n!=0):\n        a[i].append(1)\nfor i in range(n):\n    print(\"   \"*(n-i),end=\" \",sep=\" \")\n    for j in range(0,i+1):\n        print('{0:6}'.format(a[i][j]),end=\" \",sep=\" \")\n    print()",
    "Title" : "The Program takes a number n and prints the pascal’s triangle having n number of rows."
  }, {
    "ID" : 80,
    "Output" : "Enter the decimal number to find its binary equivalent: 80\n1010000",
    "Program" : "#Program to convert decimal to its equivalent binary\n\n\ndef decimalToBinary(n):\n   '''Function to print binary number for the input decimal using recursion'''\n   if n > 1:\n       decimalToBinary(n//2)\n   print(n % 2, end='')\n\n\nif __name__ == '__main__':\n    userInput = int(\n        input('Enter the decimal number to find its binary equivalent: '))\n    decimalToBinary(userInput)\n    print()\n",
    "Title" : "Program to convert decimal to its equivalent binary"
  }, {
    "ID" : 81,
    "Output" : "Enter the number between 0 to 20: 9\nToo small\nEnter the number between 0 to 20: 15\nToo large\nEnter the number between 0 to 20: 12\nToo large\nEnter the number between 0 to 20: 11\nToo large\nEnter the number between 0 to 20: 10\nYou have got it in 5 tries",
    "Program" : "#This Program guesses the randomnly generated number\n\n\nimport random\n\n\ndef guess():\n    ''' This function guesses the randomnly generated number '''\n    randomNumber = random.randint(0, 21)\n    ID = 0\n\n    while True:\n        ID += 1\n        number = int(input('Enter the number between 0 to 20: '))\n        if number < randomNumber:\n            print('Too small')\n        elif number > randomNumber:\n            print('Too large')\n        else:\n            print('You have got it in', ID, 'tries')\n            break\n\n\nif __name__ == '__main__':\n    guess()\n",
    "Title" : "This Program guesses the randomnly generated number"
  }, {
    "ID" : 82,
    "Output" : "Computer Science\nScience Computer\n",
    "Program" : "# Python Program to reverse the words\n\nuserInput = input()\nuserInput = userInput.split()\n\nprint(' '.join(userInput[::-1]))\n\n",
    "Title" : "Python Program to reverse the words"
  }, {
    "ID" : 83,
    "Output" : "Sorted List: [1, 2, 3, 4, 5, 6, 7, 9]",
    "Program" : "#This Program shows an example of bubble sort using Python\ndef bubbleSort(List):\n    for i in range(len(List)):\n        for j in range(len(List) - 1, i, -1):\n            if List[j] < List[j - 1]:\n                List[j], List[j - 1] = List[j - 1], List[j]\n    return List\n\n\nif __name__ == '__main__':\n    List = [3, 4, 2, 6, 5, 7, 1, 9]\n    print('Sorted List:', bubbleSort(List))\n",
    "Title" : "This Program shows an example of bubble sort using Python"
  }, {
    "ID" : 84,
    "Output" : "Here i is 1\nHere i is 2\nHere i is 3\nHere i is 4\nHere i is 5\nHere i is 6\nHere i is 7\nHere i is 8",
    "Program" : "#This Program illustrates the example for os module in short\n\nimport os\nimport time\n\nprint(os.getcwd())  # Prints the current working directory\n\nos.mkdir('newDir1')\nfor i in range(1, 10):\n    print('Here i is', i)\n    os.rename('newDir' + str(i), 'newDir' + str(i + 1))\n    time.sleep(2)\n",
    "Title" : "This Program illustrates the example for os module in short"
  }, {
    "ID" : 85,
    "Output" : "<__main__.MyFirstClass object at 0x00000238CF432278>\n10\n<__main__.MyFirstClass object at 0x00000238CF4327F0>\n10\n",
    "Program" : "#In this Program we will see how to define a class\n\n\nclass MyFirstClass():\n    #Class Attributes\n    var = 10\n\n\nfirstObject = MyFirstClass()\nprint(firstObject)  # Printing object's memory hex\nprint(firstObject.var)  # Accessing Class Attributes\n\nsecondObject = MyFirstClass()\nprint(secondObject)\nprint(secondObject.var)\n",
    "Title" : "In this Program we will see how to define a class"
  }, {
    "ID" : 86,
    "Output" : "<__main__.Vehicle object at 0x000002C02BD41278>\n<__main__.Vehicle object at 0x000002C02BD41278>\nI have a type\n",
    "Program" : "#In this example we will be seeing how instance methods are used\n#Instance methods are accessed by: instance.method()\n\n\nclass Vehicle():\n    #Class Methods/ Attributes\n\n    #Here self is passed as an argument because instance is passed as first argument\n    def type(self):  # Without self it throws an error\n        print(self)\n        print('I have a type')\n\n\ncar = Vehicle()\nprint(car)\ncar.type()\n",
    "Title" : "In this example we will be seeing how instance methods are used"
  }, {
    "ID" : 87,
    "Output" : "3\n",
    "Program" : "#In this example we will be seeing how instance Attributes are used\n#Instance attributes are accessed by: object.attribute\n#Attributes are looked First in the instance and THEN in the class\n\nimport random\n\n\nclass Vehicle():\n    #Class Methods/ Attributes\n    def type(self):\n        #NOTE: This is not a class attribute as the variable is binded to self. Hence it becomes\n        #instance attribute\n        # Setting the instance attribute\n        self.randomValue = random.randint(1, 10)\n\n\ncar = Vehicle()\ncar.type()  # Calling the class Method\nprint(car.randomValue)  # Calling the instance attribute\n",
    "Title" : "In this example we will be seeing how instance Attributes are used"
  }, {
    "ID" : 88,
    "Output" : "Original List: [4, 8, 2, 10, 15, 18]\nAfter Cloning: [4, 8, 2, 10, 15, 18]",
    "Program" : "# Python Program to copy or clone a list\n# Using the Slice Operator\n\n\ndef Cloning(li1):\n\tli_copy = li1[:]\n\treturn li_copy\n\n\n# Driver Code\nli1 = [4, 8, 2, 10, 15, 18]\nli2 = Cloning(li1)\nprint(\"Original List:\", li1)\nprint(\"After Cloning:\", li2)\n",
    "Title" : "Python Program to copy or clone a list"
  }, {
    "ID" : 89,
    "Output" : "8 has occured 5 times",
    "Program" : "# Python code to ID the number of occurrences\ndef IDX(lst, x):\n\tID = 0\n\tfor ele in lst:\n\t\tif (ele == x):\n\t\t\tID = ID + 1\n\treturn ID\n\n\n# Driver Code\nlst = [8, 6, 8, 10, 8, 20, 10, 8, 8]\nx = 8\nprint('{} has occured {} times'.format(x, IDX(lst, x)))\n",
    "Title" : "Python code to ID the number of occurrences"
  }, {
    "ID" : 90,
    "Output" : "Enter any number: 6\nThe number is a Perfect number!",
    "Program" : "# The Program takes a number and checks if it is a Perfect number.\n\nn = int(input(\"Enter any number: \"))\nsum1 = 0\nfor i in range(1, n):\n    if(n % i == 0):\n        sum1 = sum1 + i\nif (sum1 == n):\n    print(\"The number is a Perfect number!\")\nelse:\n    print(\"The number is not a Perfect number!\")",
    "Title" : "The Program takes a number and checks if it is a Perfect number."
  }, {
    "ID" : 91,
    "Output" : "Sum of all elements in given list:  74",
    "Program" : "# Python Program to find sum of elements in list\ntotal = 0\n\n# creating a list\nlist1 = [11, 5, 17, 18, 23]\n\n# Iterate each element in list\n# and add them in variale total\nfor ele in range(0, len(list1)):\n\ttotal = total + list1[ele]\n\n# printing total value\nprint(\"Sum of all elements in given list: \", total)\n",
    "Title" : "Python Program to find sum of elements in list"
  }, {
    "ID" : 92,
    "Output" : "['Learning', 'from']",
    "Program" : "# Python3 Program to find list of uncommon words\n\n# Function to return all uncommon words\n\n\ndef UncommonWords(A, B):\n\n\t# ID will contain all the word IDs\n\tID = {}\n\n\t# insert words of string A to hash\n\tfor word in A.split():\n\t\tID[word] = ID.get(word, 0) + 1\n\n\t# insert words of string B to hash\n\tfor word in B.split():\n\t\tID[word] = ID.get(word, 0) + 1\n\n\t# return required list of words\n\treturn [word for word in ID if ID[word] == 1]\n\n\n# Driver Code\nA = \"Geeks for Geeks\"\nB = \"Learning from Geeks for Geeks\"\n\n# Print required answer\nprint(UncommonWords(A, B))\n",
    "Title" : "Python3 Program to find list of uncommon words"
  }, {
    "ID" : 93,
    "Output" : "  ***\n *\n *\n * ***\n *   *\n *   *\n  ***\n",
    "Program" : "# Python Program to print pattern G\ndef Pattern(line):\n    pat = \"\"\n    for i in range(0, line):\n        for j in range(0, line):\n            if ((j == 1 and i != 0 and i != line-1) or ((i == 0 or\n            i == line-1) and j > 1 and j < line-2) or (i == ((line-1)/2)\n             and j > line-5 and j < line-1) or (j == line-2 and\n                                                                                                                                       i != 0 and i != line-1 and i >= ((line-1)/2))):\n                pat = pat+\"*\"\n            else:\n                pat = pat+\" \"\n        pat = pat+\"\\n\"\n    return pat\n\n\n# Driver Code\nline = 7\nprint(Pattern(line))\n",
    "Title" : "Python Program to print pattern G"
  }, {
    "ID" : 94,
    "Output" : "***********\n **********\n  *********\n   ********\n    *******\n     ******\n      *****\n       ****\n        ***\n         **\n          *",
    "Program" : "# python 3 code to print inverted star\n# pattern\n\n# n is the number of rows in which\n# star is going to be printed.\nn = 11\n\n# i is going to be enabled to\n# range between n-i t 0 with a\n# decrement of 1 with each iteration.\n# and in print function, for each iteration,\n# ” ” is multiplied with n-i and ‘*’ is\n# multiplied with i to create correct\n# space before of the stars.\nfor i in range(n, 0, -1):\n\tprint((n-i) * ' ' + i * '*')\n",
    "Title" : "python 3 code to print inverted star"
  }, {
    "ID" : 95,
    "Output" : "20:05:45",
    "Program" : "# Python Program to convert time from 12 hour to 24 hour format\n\ndef convert24(str1):\n\n\t# Checking if last two elements of time\n\t# is AM and first two elements are 12\n\tif str1[-2:] == \"AM\" and str1[:2] == \"12\":\n\t\treturn \"00\" + str1[2:-2]\n\n\telif str1[-2:] == \"AM\":\n\t\treturn str1[:-2]\n\n\telif str1[-2:] == \"PM\" and str1[:2] == \"12\":\n\t\treturn str1[:-2]\n\n\telse:\n\n\t\t# add 12 to hours and remove PM\n\t\treturn str(int(str1[:2]) + 12) + str1[2:8]\n\nprint(convert24(\"08:05:45 PM\"))\n",
    "Title" : "Python Program to convert time from 12 hour to 24 hour format"
  }, {
    "ID" : 96,
    "Output" : "[(1, 1), (2, 8), (5, 125), (6, 216)]",
    "Program" : "# Python Program to create a list of tuples\n# from given list having number and\n# its cube in each tuple\n\n# creating a list\nlist1 = [1, 2, 5, 6]\n\n# using list comprehension to iterate each\n# values in list and create a tuple as specified\nres = [(val, pow(val, 3)) for val in list1]\n\n# print the result\nprint(res)\n",
    "Title" : "Python Program to create a list of tuples"
  }, {
    "ID" : 97,
    "Output" : "None\n{'c': 4, 'a': 10, 'b': 8, 'd': 6}",
    "Program" : "# Python code to merge dict using update() method\ndef Merge(dict1, dict2):\n\treturn(dict2.update(dict1))\n\n\n# Driver code\ndict1 = {'a': 10, 'b': 8}\ndict2 = {'d': 6, 'c': 4}\n\n# This return None\nprint(Merge(dict1, dict2))\n\n# changes made in dict2\nprint(dict2)\n",
    "Title" : "Python code to merge dict using update() method"
  }, {
    "ID" : 98,
    "Output" : "The ASCII value of g is 103",
    "Program" : "# Python Program to print\n# ASCII Value of Character\n\n# In c we can assign different\n# characters of which we want ASCII value\n\nc = 'g'\n# print the ASCII value of assigned character in c\nprint(\"The ASCII value of '\" + c + \"' is\", ord(c))\n",
    "Title" : "Python Program to print"
  }, {
    "ID" : 99,
    "Output" : "The list is : [1, 4, 5, 7, 8]\nLength of list using naive method is : 5",
    "Program" : "# Python code to demonstrate length of list\n# using naive method\n\n# Initializing list\ntest_list = [1, 4, 5, 7, 8]\n\n# Printing test_list\nprint(\"The list is : \" + str(test_list))\n\n# Finding length of list\n# using loop\n# Initializing IDer\nIDer = 0\nfor i in test_list:\n\n\t# incrementing IDer\n\tIDer = IDer + 1\n\n# Printing length of list\nprint(\"Length of list using naive method is : \" + str(IDer))\n",
    "Title" : "Python code to demonstrate length of list"
  }, {
    "ID" : 100,
    "Output" : "[19, 65, 23, 90]",
    "Program" : "# Python3 Program to swap elements at given positions\n\n# Swap function\n\n\ndef swapPositions(list, pos1, pos2):\n\n\tlist[pos1], list[pos2] = list[pos2], list[pos1]\n\treturn list\n\n\n# Driver function\nList = [23, 65, 19, 90]\npos1, pos2 = 1, 3\n\nprint(swapPositions(List, pos1-1, pos2-1))\n",
    "Title" : "Python3 Program to swap elements at given positions"
  } ],
  "Quiz" : {
    "Advanced" : [ {
      "category" : "Advanced",
      "choices" : [ " True", " False", " Machine dependent", " Error" ],
      "correctAnswer" : 0,
      "question" : "What is the output of print 0.1 + 0.2 == 0.3?\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " Hello foo and foo", " Hello ‘foo’ and foo", " Hello foo and ‘bin’", " Error" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following?\nprint(\"Hello {0!r} and {0!s}\".format('foo', 'bin'))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " Hello foo and bin", " Hello (‘foo’, ‘bin’) and (‘foo’, ‘bin’)", " Error", " None of the mentioned" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following?\nprint(\"Hello {0} and {1}\".format(('foo', 'bin')))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " Hello foo and bin", " Hello (‘foo’, ‘bin’) and (‘foo’, ‘bin’)", " Error", " None of the mentioned" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following?\nprint(\"Hello {0[0]} and {0[1]}\".format(('foo', 'bin')))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " The sum of 2 and 10 is 12", " Error", " The sum of 0 and 1 is 2", " None of the mentioned" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following?\nprint('The sum of {0} and {1} is {2}'.format(2, 10, 12))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " 0 1 2 3 4 Here", " 0 1 2 3 4 5 Here", " 0 1 2 3 4", " 1 2 3 4 5" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following?\nfor i in range(5):\n    if i == 5:\n        break\n    else:\n        print(i)\nelse:\n    print(\"Here\")\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " 0 1 2", " error", " 0 1 2 0 1 2", " none of the mentioned" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following?\nx = (i for i in range(3))\nfor i in x:\n    print(i)\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " m, y, , n, a, m, e, , i, s, , x,", " m, y, , n, a, m, e, , i, s, , x", " my, name, is, x,", " error" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following?\nstring = \"my name is x\"\nfor i in string:\n    print (i, end=\", \")\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " [‘ab’, ‘cd’, ‘ef’].", " [‘ab\\n’, ‘cd\\n’, ‘ef\\n’].", " [‘ab\\n’, ‘cd\\n’, ‘ef’].", " [‘ab’, ‘cd’, ‘ef\\n’]." ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following?\nprint('ab\\ncd\\nef'.splitlines())\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " AB!@", " ab12", " aB!2", " aB1@" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following?\nprint('Ab!2'.swapcase())\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " Ab cd ef", " Ab cd eF", " Ab Cd Ef", " None of the mentioned" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following?\nprint('ab cd ef'.title())\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " Ab cd-ef", " Ab Cd-ef", " Ab Cd-Ef", " None of the mentioned" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following?\nprint('ab cd-ef'.title())\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " bcde", " abcd", " error", " bcdd" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following?\nprint('abcd'.translate('a'.maketrans('abc', 'bcd')))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " bcde", " abcd", " error", " none of the mentioned" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following?\nprint('abcd'.translate({97: 98, 98: 99, 99: 100}))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " 000ab", " 00ab0", " 0ab00", " ab000" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following?\nprint('ab'.zfill(5))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " 00+99", " 00099", " +0099", " +++99" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following?\nprint('+99'.zfill(5))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ "\t[13, 56, 17, [87], 45, 67].", "\t[13, 56, 17, 87, 45, 67].", "\t[13, 56, 17, 87,[ 45, 67]].", "\t[13, 56, 17, [87], [45, 67]]." ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following code?\na=[13,56,17]\na.append([87])\na.extend([45,67])\nprint(a)\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " 180\n[(45),(45),(45),(45)].", " (45,45,45,45).\n[45,45,45,45].", " 180\n[45,45,45,45].", " Syntax error" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following piece of code?\na=list((45,)*4)\nprint((45)*4)\nprint(a)\n"
    }, {
      "category" : "Advanced",
      "choices" : [ "\t[[3],[7]].", "\t[1,2,3,4].", "\tError", "\t[10]." ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code?\nlst=[[1,2],[3,4]]\nprint(sum(lst,[]))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ "\tTrue\nTrue", "\tFalse\nTrue", "\tFalse\nFalse", "\tTrue\nFalse" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code?\nword1=\"Apple\"\nword2=\"Apple\"\nlist1=[1,2,3]\nlist2=[1,2,3]\nprint(word1 is word2)\nprint(list1 is list2)\n"
    }, {
      "category" : "Advanced",
      "choices" : [ "\tError", "\t[1,4].", "\t[5].", "\t5" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code?\ndef unpack(a,b,c,d):\n    print(a+d)\nx = [1,2,3,4]\nunpack(*x)\n"
    }, {
      "category" : "Advanced",
      "choices" : [ "\t[1] [2].", "\t[49] [50].", "\tSyntax error", "\t[[1]] [[2]]." ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following piece of code?\nx=[[1],[2]]\nprint(\" \".join(list(map(str,x))))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ "\t5 5 1 2 3", "\t5 1 2 3 4", "\t2 3 4 5 1", "\t2 3 4 5 5" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code?\na= [1, 2, 3, 4, 5]\nfor i in range(1, 5):\n    a[i-1] = a[i]\nfor i in range(0, 5): \n    print(a[i],end = \" \")\n"
    }, {
      "category" : "Advanced",
      "choices" : [ "\t3\n[44, 2, 3].", "\t1\n[1,2,3].", "\t3\n[1,2,3].", "\t1\n[44,2,3]." ],
      "correctAnswer" : 0,
      "question" : " What is the output of the following code?\ndef change(var, lst):\n    var = 1\n    lst[0] = 44\nk = 3\na = [1, 2, 3]\nchange(k, a)\nprint(k)\nprint(a)\n"
    }, {
      "category" : "Advanced",
      "choices" : [ "\t[‘Apple’, ‘Ball’, ‘Cobra’].", "\t[‘Ball’, ‘Apple’, ‘Cobra’].", "\t[‘Cobra’, ‘Apple’, ‘Ball’].", "\tInvalid syntax for sort()." ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code?\na=[\"Apple\",\"Ball\",\"Cobra\"]\n<br class=\"blank\" />a.sort(key=len)\nprint(a)\n"
    }, {
      "category" : "Advanced",
      "choices" : [ "\t1: 2: 3:", "\tException is thrown", "\tOne Two Three", "\t0: One 1: Two 2: Three" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code?\nnum = ['One', 'Two', 'Three']\nfor i, x in enumerate(num):\n    print('{}: {}'.format(i, x),end=\" \")\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " [x in range(1, 1000) if x%3==0]", " [x for x in range(1000) if x%3==0]", " [x%3 for x in range(1, 1000)]", " [x%3=0 for x in range(1, 1000)]" ],
      "correctAnswer" : 1,
      "question" : "Write a list comprehension for producing a list of numbers between 1 and 1000 that are divisible by 3.\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " [1|x for x in [1, 2, 3]]", " [-1**x for x in [1, 2, 3]]", " [x**-1 for x in [1, 2, 3]]", " [x^-1 for x in range(4)]" ],
      "correctAnswer" : 2,
      "question" : "What is the list comprehension equivalent for: list(map(lambda x:x**-1, [1, 2, 3]))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " [(2**x) for x in range(0, 13)]", " [(x**2) for x in range(1, 13)]", " [(2**x) for x in range(1, 13)]", " [(x**2) for x in range(0, 13)]" ],
      "correctAnswer" : 0,
      "question" : "Write a list comprehension to produce the list: [1, 2, 4, 8, 16……212].\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " [‘good’, ‘oh’, ‘excellent’, ‘450’\t]", " [‘good’]", " [‘good’, ‘#450’]", " [‘oh!’, ‘excellent!’, ‘#450’]" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the code shown below?\nl=[\"good\", \"oh!\", \"excellent!\", \"#450\"]\n[n for n in l if n.isalpha() or n.isdigit()]\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " 2", " 1", " 0", " Error" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the code shown below?\nx=1\ndef cg():\n\tglobal x\n\tx=x+1\t\ncg()\nx\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " 10", " 25", " Junk value", " Error" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the code shown below?\na=10\nglobals()['a']=25\nprint(a)\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " Error", " 4", " Junk value", " 1" ],
      "correctAnswer" : 3,
      "question" : "What is the output of this code?\ndef f(): x=4\nx=1\nf()\nx\n"
    }, {
      "category" : "Advanced",
      "choices" : [ "\tTrue", "\tFalse", "\tWrong syntax for isinstance() method", "\tInvalid method for classes" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following piece of code when executed in the Python shell?\n>>> class A:\n\tpass\n>>> class B(A):\n\tpass\n>>> obj=B()\n>>> isinstance(obj,A)\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " (‘[0] [1]’,)", " (’01’)", " [0] [1].", " 01" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following?\nx = [[0], [1]]\nprint((' '.join(list(map(str, x))),))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " 3456", " (3456)", " (‘3456’)", " (‘3456’,)" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following?\nx = [34, 56]\nprint((''.join(list(map(str, x))),))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " [34, 56].", " [’34’, ’56’].", " 34 56", " error" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following?\nx = [34, 56]\nprint(len(map(str, x)))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " [‘a’, ‘b’, ‘c’, ‘d’].", " [‘abcd’].", " [[‘a’], [‘b’], [‘c’], [‘d’]].", " none of the mentioned" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following?\nx = 'abcd'\nprint(list(map(list, x)))\n"
    }, {
      "category" : "Advanced",
      "choices" : [ " ValueError", " Invalid", " 6", " ValueError(“Invalid”)" ],
      "correctAnswer" : 2,
      "question" : " What is the output of the code shown below?\ndef getMonth(m):\n    if m<1 or m>12:\n        raise ValueError(\"Invalid\")\n    print(m)\ngetMonth(6)\n"
    } ],
    "General" : [ {
      "category" : "general",
      "choices" : [ "yes", "no", "machine dependent", "none of the mentioned" ],
      "correctAnswer" : 0,
      "question" : "Is Python case sensitive when dealing with identifiers?"
    }, {
      "category" : "general",
      "choices" : [ "31 characters", "63 characters", "79 characters", "none of the mentioned" ],
      "correctAnswer" : 3,
      "question" : "What is the maximum possible length of an identifier?"
    }, {
      "category" : "general",
      "choices" : [ "_a = 1", "__a = 1", "__str__ = 1", "none of the mentioned" ],
      "correctAnswer" : 3,
      "question" : "Which of the following is invalid?"
    }, {
      "category" : "general",
      "choices" : [ "my_string_1", "1st_string", "foo", "_" ],
      "correctAnswer" : 1,
      "question" : "Which of the following is an invalid variable?"
    }, {
      "category" : "general",
      "choices" : [ "they are used to indicate a private variables of a class", "they confuse the interpreter", "they are used to indicate global variables", "they slow down execution" ],
      "correctAnswer" : 0,
      "question" : "Why are local variable names beginning with an underscore discouraged?"
    }, {
      "category" : "general",
      "choices" : [ "eval", "assert", "nonlocal", "pass" ],
      "correctAnswer" : 0,
      "question" : "Which of the following is not a keyword?"
    }, {
      "category" : "general",
      "choices" : [ "lower case", "UPPER CASE", "Capitalized", "None of the mentioned" ],
      "correctAnswer" : 3,
      "question" : "All keywords in Python are in"
    }, {
      "category" : "general",
      "choices" : [ "unlimited length", "all private members must have leading and trailing underscores", "underscore and ampersand are the only two special characters allowed", "none of the mentioned" ],
      "correctAnswer" : 0,
      "question" : "Which of the following is true for variable names in Python?"
    }, {
      "category" : "general",
      "choices" : [ "abc = 1,000,000", "a b c = 1000 2000 3000", " a,b,c = 1000, 2000, 3000", "a_b_c = 1,000,000" ],
      "correctAnswer" : 1,
      "question" : "Which of the following is an invalid statement?"
    }, {
      "category" : "general",
      "choices" : [ " __init__", "in", "it", "on" ],
      "correctAnswer" : 1,
      "question" : " Which of the following cannot be a variable?"
    }, {
      "category" : "general",
      "choices" : [ "X^y", "X**y", "X^^y", "None of the mentioned" ],
      "correctAnswer" : 1,
      "question" : "Which is the correct operator for power(xy)?"
    }, {
      "category" : "general",
      "choices" : [ "/", "//", "%", "None of the mentioned" ],
      "correctAnswer" : 1,
      "question" : "Which one of these is floor division?"
    }, {
      "category" : "general",
      "choices" : [ "7", "1", "0", "5" ],
      "correctAnswer" : 1,
      "question" : "What is the answer to this expression, 22 % 3 is?"
    }, {
      "category" : "general",
      "choices" : [ "TRUE", "FALSE", "", "" ],
      "correctAnswer" : 1,
      "question" : "Mathematical operations can be performed on a string. State whether true or false."
    }, {
      "category" : "general",
      "choices" : [ "Left to Right", "Right to Left", "Can’t say", "None of the mentioned" ],
      "correctAnswer" : 0,
      "question" : "Operators with the same precedence are evaluated in which manner?"
    }, {
      "category" : "general",
      "choices" : [ "27", "9", "3", "1" ],
      "correctAnswer" : 2,
      "question" : "What is the output of this expression, 3*1**3?"
    }, {
      "category" : "general",
      "choices" : [ "Addition and Subtraction", "Multiplication, Division and Addition", "Multiplication, Division, Addition and Subtraction", "Addition and Multiplication" ],
      "correctAnswer" : 0,
      "question" : "Which one of the following has the same precedence level?"
    }, {
      "category" : "general",
      "choices" : [ "TRUE", "FALSE", "", "" ],
      "correctAnswer" : 0,
      "question" : "The expression Int(x) implies that the variable x is converted to integer. State whether true or false."
    }, {
      "category" : "general",
      "choices" : [ "Exponential", "Addition", "Multiplication", "Parentheses" ],
      "correctAnswer" : 3,
      "question" : "Which one of the following has the highest precedence in the expression?"
    }, {
      "category" : "general",
      "choices" : [ "Lists", "Dictionary", "Tuples", "Class" ],
      "correctAnswer" : 3,
      "question" : "Which of these in not a core data type?"
    }, {
      "category" : "general",
      "choices" : [ "int", "bool", "void", "None" ],
      "correctAnswer" : 3,
      "question" : "Given a function that does not return any value, What value is thrown by default when executed in shell."
    }, {
      "category" : "general",
      "choices" : [ "round(45.8)", "round(6352.898,2,5)", "round()", "round(7463.123,2,1)" ],
      "correctAnswer" : 0,
      "question" : "Which of the following will run without errors ?"
    }, {
      "category" : "general",
      "choices" : [ "int", "float", "bool", "dict" ],
      "correctAnswer" : 0,
      "question" : "What is the return type of function id?"
    }, {
      "category" : "general",
      "choices" : [ "SyntaxError", "NameError", "ValueError", "TypeError" ],
      "correctAnswer" : 1,
      "question" : "What error occurs when you execute? apple = mango"
    }, {
      "category" : "general",
      "choices" : [ "list", "dictionary", "array", "tuple" ],
      "correctAnswer" : 0,
      "question" : "What data type is the object below ? L = [1, 23, ‘hello’, 1]."
    }, {
      "category" : "general",
      "choices" : [ " <type 'type'>", " 0", " Error", " type ‘float’" ],
      "correctAnswer" : 0,
      "question" : "What will be the output of the following code :\nprint type(type(float))"
    }, {
      "category" : "general",
      "choices" : [ " 1", " 0", " 29", " 4" ],
      "correctAnswer" : 0,
      "question" : "What is the answer to this expression, 29%4 is??"
    }, {
      "category" : "general",
      "choices" : [ " a^^b", " a^b", " a**b", " None of the mentioned" ],
      "correctAnswer" : 2,
      "question" : "Which is the correct operator for power(a b )?"
    }, {
      "category" : "general",
      "choices" : [ " 8", " 7", " 6", " 5" ],
      "correctAnswer" : 2,
      "question" : "What gets printed?\nnums = set([21,32,22,3,32,21,4,6])\nprint(len(nums))"
    }, {
      "category" : "general",
      "choices" : [ " Tuple", " dictionary", " List", " Array" ],
      "correctAnswer" : 2,
      "question" : "What dataype is the object below ?\nL = [2, 32, ‘ashok’, 0]."
    }, {
      "category" : "general",
      "choices" : [ " <class 'list'>", " <class 'complex'>", " <class 'set'>", " <class 'int'>" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following code?\nprint(type([0,1]))"
    }, {
      "category" : "general",
      "choices" : [ " <class 'str'>", " <class 'function'>", " <class 'tuple'>", " <class 'NoneType'>" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code?\ndef a(): pass\nprint(type(a()))"
    }, {
      "category" : "general",
      "choices" : [ " <class 'float'>", " <class 'int'>", " <class 'unicode'>", " <class 'complex'>" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code?\nprint(type(3J))"
    }, {
      "category" : "general",
      "choices" : [ " 1.0", " 1.3", " 1", " 0" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code?\nx = 6.5\ny = 5\nprint(x//y)"
    }, {
      "category" : "general",
      "choices" : [ " 32", " 57", " 10", " None of the mentioned" ],
      "correctAnswer" : 3,
      "question" : "What is the maximum possible length of an identifier?"
    }, {
      "category" : "general",
      "choices" : [ " 3,4,5,2,1,6", " 4,5,6,2,3,1", " 4,2,6,3,1,5", " 1,2,3,4,5,6" ],
      "correctAnswer" : 1,
      "question" : "What is the order of precedence in python?\n1.Subtraction\n2.Division\n3.Addition\n4.Parentheses\n5.Exponential\n6.Multiplication"
    }, {
      "category" : "general",
      "choices" : [ " ghi", " fg", " efghijk", " ghi" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code?\nmylist=['efg','ghi','efghijk','fg']\nprint(max(mylist)"
    }, {
      "category" : "general",
      "choices" : [ " 18", " 19", " Error", " None of the mentioned" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code?\nsol=[7, 8, 3, int('1')]\nprint(sum(sol))"
    }, {
      "category" : "general",
      "choices" : [ " 11", " 8", " 10", " None of the mentioned" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code?\nl= set([12,13,14,22,13,19,12,17,64,13,18])\nprint(len(l))"
    }, {
      "category" : "general",
      "choices" : [ " ['l' 'a' 't' 'r' 'a' 'c' 'a' 'l']", " [l, a, t, r, a, c, a, l]", " ['l', 'a', 't', 'r', 'a', 'c', 'a', 'l']", " None of the mentioned" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following code?\nprint(list(\"latracal\"))"
    }, {
      "category" : "general",
      "choices" : [ " 1", " 2", " 3", " None of the mentioned" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following code?\nx = 1\nprint(+++x)"
    }, {
      "category" : "general",
      "choices" : [ " \\nLatracal Solutions", " Error", " a new line and Latracal Solutions", " the letter r and then Latracal Solutions" ],
      "correctAnswer" : 0,
      "question" : "What is the output when following code is executed ?\nprint r\"\\nLatracal Solutions\""
    }, {
      "category" : "general",
      "choices" : [ " Latracal Solutions", " Latracal", " Latrscal Solutions", " Error" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code?\nx = \"Latracal Solutions\"\nx[4] = 's'\nprint x"
    }, {
      "category" : "general",
      "choices" : [ " Latracal", " Latracal6", " Error", " Latracal213" ],
      "correctAnswer" : 2,
      "question" : "What is the output of “Latracal”+2+1+3 ?"
    }, {
      "category" : "general",
      "choices" : [ " latracal", "lat", "cal", "lacartal" ],
      "correctAnswer" : 1,
      "question" : "What will be the output of the following Python code?\ns=\"latracal\"\ns[:3]"
    }, {
      "category" : "general",
      "choices" : [ " round(6374.123,2,1)", " round()", "round(6355.798,2,5)", " round(63.6)" ],
      "correctAnswer" : 3,
      "question" : "Which of the following will run without errors?"
    }, {
      "category" : "general",
      "choices" : [ " list", " class", " dictionary", " tuple" ],
      "correctAnswer" : 2,
      "question" : "What kind of core data type should we use in order to store values in terms of key and\nvalue?"
    }, {
      "category" : "general",
      "choices" : [ " interpreter/ compile time", " compiler/compile time", " compiler/ run time", " interpreter/ run time" ],
      "correctAnswer" : 3,
      "question" : "Syntax error in python is detected by ______at ______."
    }, {
      "category" : "general",
      "choices" : [ " ['l','a','t','r','a','c','a','l']", " latracal", " Error", "None of the above" ],
      "correctAnswer" : 0,
      "question" : "What is the outut of the following code:\nx=['l','a','t','r','a','c','a','l']\nprint (\"\".join(x))"
    }, {
      "category" : "general",
      "choices" : [ " 1", " 0", " 1.0", " 0.0" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following code:\nprint(True**False/True)"
    }, {
      "category" : "general",
      "choices" : [ " 2", " 0", " 3", " Error" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following code:\na=6\nb=3\nb=++b\nprint(a-b)"
    }, {
      "category" : "general",
      "choices" : [ " 2", " 0", " 3", " Error" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code:\na=6\nb=3\nb=++a\nprint(a-b)"
    }, {
      "category" : "general",
      "choices" : [ " 5", "4", "0", "Error" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code:\na=8\nb=4\nb=b--\nprint(a-b)"
    }, {
      "category" : "general",
      "choices" : [ " chr(x)", "frozenset(s)", "set(x)", "dict(d)" ],
      "correctAnswer" : 1,
      "question" : "Which of the following function is used to convert a string to frozen set in python?"
    }, {
      "category" : "general",
      "choices" : [ " pass", "body", "break", "continue" ],
      "correctAnswer" : 0,
      "question" : "Which of the following keyword is a valid placeholder for the body of the function?"
    }, {
      "category" : "general",
      "choices" : [ " //", "**", "notin", "is" ],
      "correctAnswer" : 2,
      "question" : "Which of the following operator in python evaluates to true if it does not find a variable in\nthe specified sequence and false otherwise?"
    }, {
      "category" : "general",
      "choices" : [ " Integer Division", "returns remainder", "same as a**b", "float division" ],
      "correctAnswer" : 0,
      "question" : "In python 3 what does // operator do?"
    }, {
      "category" : "general",
      "choices" : [ " isdigit()", "isalnum()", "capitalize()", "shuffle(lst)" ],
      "correctAnswer" : 0,
      "question" : "In python, which of the function checks in a string that all characters are digits?"
    }, {
      "category" : "general",
      "choices" : [ " using math", "import math", "include math", "#include math.h" ],
      "correctAnswer" : 1,
      "question" : "In python which is the correct method to load a module?"
    }, {
      "category" : "general",
      "choices" : [ " list.index(obj)", "list.remove(obj)", "list.pop(obj=list[-1])", "list.insert(index,obj)" ],
      "correctAnswer" : 3,
      "question" : "What is the following function inserts an object at given index in a list?"
    }, {
      "category" : "general",
      "choices" : [ " character", "chr", "python do not have any data type for characters they are treated as string", "char" ],
      "correctAnswer" : 2,
      "question" : "What is the name of data type for character in python?"
    }, {
      "category" : "general",
      "choices" : [ " min(list1, list2)", "max(list1, list2)", "cmp(list1, list2)", "len(list1, list2)" ],
      "correctAnswer" : 2,
      "question" : "What is the following function that compares elements of both lists?"
    }, {
      "category" : "general",
      "choices" : [ " list", "tuples", "both are mutable", "none of the above" ],
      "correctAnswer" : 0,
      "question" : "Out of list and tuples, which are mutable?"
    }, {
      "category" : "general",
      "choices" : [ " min(str)", "lower()", "max(str)", "lstrip()" ],
      "correctAnswer" : 0,
      "question" : "which of the following function returns the min alphabetical character from the string str?"
    }, {
      "category" : "general",
      "choices" : [ " import", "function", "try", "def" ],
      "correctAnswer" : 3,
      "question" : "In python, which keyword is used to start function?"
    }, {
      "category" : "general",
      "choices" : [ " open_file(filename,mode)", "openfile(filename,mode)", "fopen(filename,mode)", "open(filename,mode)" ],
      "correctAnswer" : 3,
      "question" : "Which function is used to open the file for reading in python?"
    }, {
      "category" : "general",
      "choices" : [ " script-able language", "bug-able language", "readable language", "writable language" ],
      "correctAnswer" : 2,
      "question" : "Python is said to be easily"
    }, {
      "category" : "general",
      "choices" : [ " Latracal exam and exam", " Latracal exam and ‘test’", " Latracal exam and ‘test’", " Latracal ‘exam’ and exam" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following?\nprint(\"Latracal {0!r} and {0!s}\".format('exam', 'test'))"
    }, {
      "category" : "general",
      "choices" : [ " association", " inheritance", " composition", " All of the above" ],
      "correctAnswer" : 1,
      "question" : "What Relationship Is Appropriate For Fruit And Papaya?"
    }, {
      "category" : "general",
      "choices" : [ " isupper()", " len(string)wrong", " ljust(width[, fillchar])", " join(seq)" ],
      "correctAnswer" : 2,
      "question" : "Which of the following function gets a space-padded string with the original string\nleft-justified to a total of width columns?"
    }, {
      "category" : "general",
      "choices" : [ " class", "return", " def", "All of the above" ],
      "correctAnswer" : 0,
      "question" : "Which of the following keywords mark the beginning of the class definition?"
    }, {
      "category" : "general",
      "choices" : [ " defines an empty class", "defines a list and initializes it", "defines a function, which does nothing", " none of the above" ],
      "correctAnswer" : 2,
      "question" : "what does the following code do?\ndef p(q, r, s): pass"
    }, {
      "category" : "general",
      "choices" : [ " 000111222", "000,111,222", "0,001,112,22", "Error" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following?\nprint('{:#}'.format(000111222))"
    }, {
      "category" : "general",
      "choices" : [ "inheritance", "association", "composition", "All of the above" ],
      "correctAnswer" : 2,
      "question" : "What Relationship Correctly Fits For University And Professor?"
    }, {
      "category" : "general",
      "choices" : [ "method", "class", "object", "data field" ],
      "correctAnswer" : 2,
      "question" : "Which Of The Following Represents A Distinctly Identifiable Entity In The Real World?"
    }, {
      "category" : "general",
      "choices" : [ "A contains a reference to a Circle object", "A contains an int value", "You can assign an int value to A", "A contains an object of the Circle type" ],
      "correctAnswer" : 0,
      "question" : "Which Of The Following Statements Is Most Accurate For The Declaration A = Circle()"
    }, {
      "category" : "general",
      "choices" : [ " A function is a piece of code that performs a specific task.", " Functions are used to create objects in Python.", " Functions are used to create objects in Python.", " All of the above" ],
      "correctAnswer" : 0,
      "question" : "Which of the following statements is true?"
    }, {
      "category" : "general",
      "choices" : [ " Latracal Solutions Digital Transformation across industries", " text Digital Transformation across industries", " Digital Transformation across industries", " Latracal Solutions" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following code?\ndef printLine(text):\nprint(text, 'Digital Transformation across industries.')\nprintLine('Latracal Solutions')"
    }, {
      "category" : "general",
      "choices" : [ "0", "an arbitrary integer", "Error! Functions in Python must have a return statement.", "None object" ],
      "correctAnswer" : 3,
      "question" : "If return statement is not used inside the function, the function will return:"
    }, {
      "category" : "general",
      "choices" : [ "Names Hemanth", "Names('Hemanth', 'Yeshwanth')", "Names Hemanth\nNames Yeshwanth", "Syntax Error! Friends() can take only one argument." ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code?\ndef Friends(*name):\nprint('Names', name)\nFriends('hemanth', 'yeshwanth')"
    }, {
      "category" : "general",
      "choices" : [ "A function that calls itself.", "There is no such thing as recursive function in Python.", "A function that calls all the functions in the program.", "A function that calls all the functions in the program except itself." ],
      "correctAnswer" : 0,
      "question" : "What is a recursive function?"
    }, {
      "category" : "general",
      "choices" : [ "36", "6*6", "12", "lambda a: a*a" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following program?\nsolution = lambda a: a * a\nprint(solution(6))"
    }, {
      "category" : "general",
      "choices" : [ "30", "11", "15", "1" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following program?\ndef Foo(x):\nif (x==1):\nreturn 1\nelse:\nreturn x+Foo(x-1)\nprint(Foo(5))"
    }, {
      "category" : "general",
      "choices" : [ "from math import pi\nprint(pi)", "from math import pi\nprint(math.pi)", "print(pi)", "print(math.pi)" ],
      "correctAnswer" : 0,
      "question" : "Suppose you need to print pi constant defined in math module. Which of the following\ncode can do this task?\nChoose one"
    }, {
      "category" : "general",
      "choices" : [ " , operator", " * operator", " -> symbol", " . operator" ],
      "correctAnswer" : 3,
      "question" : "Which operator is used in Python to import modules from packages?"
    }, {
      "category" : "general",
      "choices" : [ "[4, 2, 8]", "(4, 2, 8)", "(2, 2, 4)", "[2, 2, 4]" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code?\nnumbers = [2,2,4]\nnewNumbers = tuple(map(lambda x: x , numbers))\nprint(newNumbers)"
    }, {
      "category" : "general",
      "choices" : [ "Python is an object-oriented language.", "Python is a high level programming language.", "Python is an interpreted language.", "All of the above." ],
      "correctAnswer" : 3,
      "question" : "Which of the following statements is true?"
    }, {
      "category" : "general",
      "choices" : [ "Indentation", "Parenthesis", "Quotation", "Curly braces" ],
      "correctAnswer" : 0,
      "question" : "What is used to define a block of code (body of loop, function etc.) in Python?"
    }, {
      "category" : "general",
      "choices" : [ " You can write multi-line comments in Python using triple quotes, either ''' or \"\"\".", " Python Interpreter ignores comments.", " Comments are for programmers for better understanding of the program.", " All of the above" ],
      "correctAnswer" : 3,
      "question" : "Which of the following is correct?"
    }, {
      "category" : "general",
      "choices" : [ " Variable name can have symbols like: @, #, $ etc.", " Variable name can start with a digit.", " Variable name can start with an underscore.", " Keywords cannot be used as a variable name." ],
      "correctAnswer" : 2,
      "question" : "Which of the following is correct?"
    }, {
      "category" : "general",
      "choices" : [ "operator", "string", "tuple", "integer" ],
      "correctAnswer" : 1,
      "question" : "In the following code, n is a/an ______?\nn = '5'"
    }, {
      "category" : "general",
      "choices" : [ "2:4:6:8", "2468", "2 4 6 8", "None of the above" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following code?\nprint(2, 4, 6, 8, sep=':')"
    }, {
      "category" : "general",
      "choices" : [ "cin", "scanf()", "<>", "input()" ],
      "correctAnswer" : 3,
      "question" : "What is used to take input from the user in Python?"
    }, {
      "category" : "general",
      "choices" : [ "[3 6 9]", "[3, 6, 9]", "3 6 9", "3, 6, 9" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code?\nnumbers = [3, 6, 9]\nprint(numbers)"
    }, {
      "category" : "general",
      "choices" : [ "False", "5 >= 5", "True", "None" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following code?\nprint(5 >= 5)"
    }, {
      "category" : "general",
      "choices" : [ "first operand is true", "either of the operands is true", "both operands are false", "both operands are true" ],
      "correctAnswer" : 3,
      "question" : "The statement using and operator results true if ______"
    }, {
      "category" : "general",
      "choices" : [ " LatracalSolutions() and a refer to different objects.", " Both LatracalSolutions() and a refer to the same object.", "LatracalSolutions() is a function and a is a variable. None of them are objects.", "Syntax error! You cannot assign function to a variable in Python." ],
      "correctAnswer" : 1,
      "question" : "For the following code, which of the following statements is true?\ndef LatracalSolutions():\nprint(\"Solution\")\na = LatracalSolutions()"
    }, {
      "category" : "general",
      "choices" : [ "a = 40", "a = 30", "a = 20", "a = 20 a = 40" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following program?\ndef outerFunction():\nglobal a\na = 30\ndef innerFunction():\nglobal a\na = 40\nprint('a =', a)\na = 20\nouterFunction()\nprint('a =', a)"
    }, {
      "category" : "general",
      "choices" : [ "You can only make a single object from the given class.", "A class is a blueprint for the object.", "Both statements are true.", "Neither statement is true." ],
      "correctAnswer" : 1,
      "question" : "Which of the following statements is true?"
    }, {
      "category" : "general",
      "choices" : [ "C++\nPython", "C++", "line", "python" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code?\nclass Foo:\ndef printLine(self, line='Python'):\nprint(line)\no1 = Foo()\no1.printLine('C++')"
    }, {
      "category" : "general",
      "choices" : [ "Initializes all the data attributes to zero when called.", "Initializes the class for use.", "This function is called when a new object is instantiated.", "None of the above." ],
      "correctAnswer" : 2,
      "question" : "What does the _init__() function do in Python?"
    }, {
      "category" : "general",
      "choices" : [ "1 1", "2 2", "None None", "a b" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code?\nclass Point:\ndef _init__(self, a = 1, b = 1):\nself.a = a+1\nself.b = b+1\np1 = Point()\nprint(p1.a, p1.b)"
    }, {
      "category" : "general",
      "choices" : [ "class Foo:\npass\nclass Hoo(Foo):\npass", "class Foo(object):\npass\nclass Hoo(object):\npass", "class Foo:\npass", " None of the above code" ],
      "correctAnswer" : 2,
      "question" : "Which of the following code uses the inheritance feature of Python?"
    }, {
      "category" : "general",
      "choices" : [ "Python Inheritance", "Multiple Inheritance", "Hierarchical Inheritance", "Multilevel Inheritance" ],
      "correctAnswer" : 1,
      "question" : "If a class is derived from two different classes, it’s called ____"
    }, {
      "category" : "general",
      "choices" : [ "Special method _add()__ is called when + operator is used.", "In Python, same operator may behave differently depending upon operands.", "You can change the way operators behave in Python.", "All of the above." ],
      "correctAnswer" : 3,
      "question" : "Which of the following statements is true?"
    }, {
      "category" : "general",
      "choices" : [ "latracal['4']", "latracal['5']", "latracal[5]", "latracal[4]" ],
      "correctAnswer" : 3,
      "question" : "Suppose a list with name latracal, contains 10 elements. You can get the 5th element\nfrom the test list using:"
    }, {
      "category" : "general",
      "choices" : [ "['L', 'a', 't', 'r']", "['L', 'a' , 't']", "'Lat'", "None of the above" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following program?\ncompany = ['L', 'a', 't', 'r', 'a', 'c', 'a' 'l']\nprint(company[:-4])"
    }, {
      "category" : "general",
      "choices" : [ " test[3] = 'Latracal'", " test(2) = 'Latracal'", " test[2] = 'Latracal'", " Elements of tuple cannot be changed" ],
      "correctAnswer" : 3,
      "question" : "Suppose a tuple test contains 5 elements. How can you set the 3rd element of the tuple\nto ‘Latracal’?"
    }, {
      "category" : "general",
      "choices" : [ "((2, 3), (4, 6))", "(2, 3, 4, 6)", "(6, 9)", "Error!" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following program?\nprint((2, 3) + (4, 6))"
    }, {
      "category" : "general",
      "choices" : [ " ^ operator", " strcat() function", " . operator", " + operator" ],
      "correctAnswer" : 3,
      "question" : "What is used to concatenate two strings in Python?"
    }, {
      "category" : "general",
      "choices" : [ " Sushma, Javvadi", " Ashok, Sushma", " Ashok, Sushma and Javvadi", " Sushma, Javvadi and Ashok" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following program?\nnames = \"{1}, {2} and {0}\".format('Ashok', 'Sushma', 'Javvadi')\nprint(names)"
    }, {
      "category" : "general",
      "choices" : [ "You can change elements of set unlike tuple.", "A set is an unordered collection of items.", "Elements of set are unique.", "All of the above." ],
      "correctAnswer" : 3,
      "question" : "Which of the following statement is true?"
    }, {
      "category" : "general",
      "choices" : [ "[1, 2, 3]", "[1, 4, 9]", "[0, 1, 4]", "[0, 1, 2]" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following program?\nn = [x*x for x in range(3)]\nprint(n)"
    }, {
      "category" : "general",
      "choices" : [ " opens a file for exclusive creation", " opens a file for appending at the end of the file", " opens a file for reading", " opens a file for writing" ],
      "correctAnswer" : 1,
      "question" : "Opening a file in ‘a’ mode"
    }, {
      "category" : "general",
      "choices" : [ "Opens latracal.txt file for writing only", "Opens latracal.txt file for reading only", "Opens latracal.txt file for both reading and writing", "None of the above" ],
      "correctAnswer" : 1,
      "question" : "What does the following code do?\nf = open(\"latracal.txt\")"
    }, {
      "category" : "general",
      "choices" : [ "If latracal.txt contains newline, read() will return newline as ‘\\n’.", "You can pass an integer to the read() method.", "This program reads the content of latracal.txt file.", "All of the above" ],
      "correctAnswer" : 3,
      "question" : "For the following code,\nf = open('latracal.txt', 'r', encoding = 'utf-8')\nf.read()\nWhich of the following statement is true?"
    }, {
      "category" : "general",
      "choices" : [ "Makes a new directory.", "Prints all directories and files inside the given directory.", "Prints all directories (not files) inside the given directory.", "Prints the current working directory." ],
      "correctAnswer" : 1,
      "question" : "What does the following code do?\nos.listdir()"
    }, {
      "category" : "general",
      "choices" : [ "A syntax error is also an exception.", "An exception is an error that occurs at the runtime.", "An exception is used to exclude a block of code in Python.", "All of the above." ],
      "correctAnswer" : 1,
      "question" : "Which of the following is correct?"
    }, {
      "category" : "general",
      "choices" : [ " Nothing will happen.", "An exception is raised.", "A new file is created.", "None of the above." ],
      "correctAnswer" : 1,
      "question" : "What will happen if you try to open a file that doesn’t exist?"
    }, {
      "category" : "general",
      "choices" : [ "You cannot create custom exceptions in Python.", "You can create a user-defined exception by deriving a class from Error class.", "You can create a user-defined exception by deriving a class from Exception class.", "None of the above." ],
      "correctAnswer" : 2,
      "question" : "Which of the following statement is true?"
    } ],
    "Medium" : [ {
      "category" : "medium",
      "choices" : [ "Numpy, scipy & matplotlib", "Numpy, matplotlib & pandas", "Numpy, pandas & matplotlib", "Numpy, scipy & pandas" ],
      "correctAnswer" : 0,
      "question" : "Pylab is a package that combine _______,________&______ into a single namespace."
    }, {
      "category" : "medium",
      "choices" : [ "‘any’", "‘yan’", "b’any’", "x’any’" ],
      "correctAnswer" : 2,
      "question" : "print('any'.encode())"
    }, {
      "category" : "medium",
      "choices" : [ "A class", "A function", "A method", "A constructor" ],
      "correctAnswer" : 3,
      "question" : "Which among them is used to create an object?"
    }, {
      "category" : "medium",
      "choices" : [ "Tuple(''abc'')", "List(''abc'')", "Set(''abac'')", "None of the above." ],
      "correctAnswer" : 3,
      "question" : "Which among them will produce {'a', 'b', 'c'}?"
    }, {
      "category" : "medium",
      "choices" : [ "CheckButton(frame1, text=''Bold'' , command=CheckButton)", "Checkbutton(frame1 , text=''Bold’’ ,variable=v1 ,command=processCheckbutton)", "Checkbutton(frame1,text=''Bold'',variable=v1.set(),command=v1.set(processCheckbut ton)", "Checkbutton(frame1,text=''Bold'',variable=v1.set(),command=v1.set(processCheckbut ton)" ],
      "correctAnswer" : 1,
      "question" : "Select the correct code to create a check button under parent frame1 and it should be bind to v1?"
    }, {
      "category" : "medium",
      "choices" : [ "Window.eventloop()", "Window.mainloop()", "Window.loop()", "Eventloop.window()" ],
      "correctAnswer" : 1,
      "question" : "Which way among them is used to create an event loop ?"
    }, {
      "category" : "medium",
      "choices" : [ "obj.__str__()", "str(obj)", "print obj", "All of the mentioned" ],
      "correctAnswer" : 3,
      "question" : "If a class defines the __str__(self) method, for an object obj for the class, you can use which command to invoke the __str__ method."
    }, {
      "category" : "medium",
      "choices" : [ "i.__add(j)", "i.__add__(j)", "i.__Add(j)", "i.__ADD(j)" ],
      "correctAnswer" : 1,
      "question" : "Suppose i is 5 and j is 4, i + j is same as"
    }, {
      "category" : "medium",
      "choices" : [ "input(“Enter a string”)", "eval(input(“Enter a string”))", "enter(“Enter a string”)", "eval(enter(“Enter a string”))" ],
      "correctAnswer" : 0,
      "question" : "What function do you use to read a string?"
    }, {
      "category" : "medium",
      "choices" : [ "__345.355", "___345.355", "____345.355", "_____345.354" ],
      "correctAnswer" : 1,
      "question" : "Suppose x is 345.3546, what is format(x, “10.3f”) (_ indicates space)"
    }, {
      "category" : "medium",
      "choices" : [ "xyyxyyxyxyxxy", "12y12y1212x12", "12yxyyxyxyxxy", "xyyxyyxyxyx12" ],
      "correctAnswer" : 0,
      "question" : "print('xyyxyyxyxyxxy'.replace('xy', '12', 0))"
    }, {
      "category" : "medium",
      "choices" : [ "[‘abcdefcdghcd’]", "‘abcdefcdghcd’", "error", "none of the mentioned" ],
      "correctAnswer" : 0,
      "question" : "print('abcdefcdghcd'.split('cd', 0))"
    }, {
      "category" : "medium",
      "choices" : [ "[‘ab’, ‘ef’, ‘gh’]", "[‘ab’, ‘ef’, ‘gh’, ”]", "(‘ab’, ‘ef’, ‘gh’)", "(‘ab’, ‘ef’, ‘gh’, ”)" ],
      "correctAnswer" : 1,
      "question" : "print('abcdefcdghcd'.split('cd', -1))"
    }, {
      "category" : "medium",
      "choices" : [ "sys.version", "sys.version()", "sys.version(0)", "sys.version(1)" ],
      "correctAnswer" : 0,
      "question" : "Which of the following functions can help us to find the version of python that we are currently working on?"
    }, {
      "category" : "medium",
      "choices" : [ "sys.platform", "sys.path", "sys.readline", "sys.argv" ],
      "correctAnswer" : 2,
      "question" : "Which of the following functions is not defined under the sys module?"
    }, {
      "category" : "medium",
      "choices" : [ "helloworld", "hello world10", "hello world11", "error" ],
      "correctAnswer" : 2,
      "question" : "sys.stdout.write(\"hello world\")"
    }, {
      "category" : "medium",
      "choices" : [ "‘ ‘", "[ ]", "[‘ ‘]", "Error" ],
      "correctAnswer" : 2,
      "question" : "sys.argv"
    }, {
      "category" : "medium",
      "choices" : [ "print(sys)", "print(dir.sys)", "print(dir[sys])", "print(dir(sys))" ],
      "correctAnswer" : 3,
      "question" : "To obtain a list of all the functions defined under sys module, which of the following functions can be used?"
    }, {
      "category" : "medium",
      "choices" : [ "sun", "u", "either s, u or n", "error" ],
      "correctAnswer" : 2,
      "question" : "random.choice('sun')"
    }, {
      "category" : "medium",
      "choices" : [ "TRUE", "None", "3", "1" ],
      "correctAnswer" : 1,
      "question" : "What the does random.seed(3) return?"
    }, {
      "category" : "medium",
      "choices" : [ "0", "3", "2.3", "none of the mentioned" ],
      "correctAnswer" : 2,
      "question" : "Which of the following cannot be returned by random.randrange(4)?"
    }, {
      "category" : "medium",
      "choices" : [ "range(3)", "random.choice(range(0, 3))", "random.shuffle(range(3))", "random.select(range(3))" ],
      "correctAnswer" : 1,
      "question" : "Which of the following is equivalent to random.randrange(3)?"
    }, {
      "category" : "medium",
      "choices" : [ "0", "1", "KeyError: 1", "none of the mentioned" ],
      "correctAnswer" : 0,
      "question" : "Which of the following will never be displayed on executing print(random.choice({0: 1, 2: 3}))?"
    }, {
      "category" : "medium",
      "choices" : [ "error", "do nothing, it is a placeholder for a function that is yet to be implemented", "shuffle the elements of the list in-place", "none of the mentioned" ],
      "correctAnswer" : 2,
      "question" : "What does random.shuffle(x) do when x = [1, 2, 3]?"
    }, {
      "category" : "medium",
      "choices" : [ "strings", "lists", "tuples", "integers" ],
      "correctAnswer" : 1,
      "question" : "Which type of elements are accepted by random.shuffle()?"
    }, {
      "category" : "medium",
      "choices" : [ "[0.0, 1.0]", "(0.0, 1.0]", "(0.0, 1.0)", "[0.0, 1.0)" ],
      "correctAnswer" : 3,
      "question" : "What is the range of values that random.random() can return?"
    }, {
      "category" : "medium",
      "choices" : [ "Dictionary comprehension doesn’t exist", "{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6:36}", "{0: 0, 1: 1, 4: 4, 9: 9, 16: 16, 25: 25}", "{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}" ],
      "correctAnswer" : 3,
      "question" : "a={i: i*i for i in range(6)}"
    }, {
      "category" : "medium",
      "choices" : [ "Syntax error", "{1:”check”,2:”check”,3:”check”}", "“check”", "{1:None,2:None,3:None}" ],
      "correctAnswer" : 1,
      "question" : ">>> a={}\\n>>> a.fromkeys([1,2,3],\"check\")"
    }, {
      "category" : "medium",
      "choices" : [ "Returns True if any key of the dictionary is true", "Returns False if dictionary is empty", "Returns True if all keys of the dictionary are true", "Method any() doesn’t exist for dictionary" ],
      "correctAnswer" : 0,
      "question" : "If b is a dictionary, what does any(b) do?"
    }, {
      "category" : "medium",
      "choices" : [ "ab", "rw", "r+", "w+" ],
      "correctAnswer" : 1,
      "question" : "Which of the following is not a valid mode to open a file?"
    }, {
      "category" : "medium",
      "choices" : [ "no difference", "in r+ the pointer is initially placed at the beginning of the file and the pointer is at the end for w+", "in w+ the pointer is initially placed at the beginning of the file and the pointer is at the end for r+", "depends on the operating system" ],
      "correctAnswer" : 1,
      "question" : "What is the difference between r+ and w+ modes?"
    }, {
      "category" : "medium",
      "choices" : [ "fp.name", "fp.file(name)", "self.__name__(fp)", "fp.__name__()" ],
      "correctAnswer" : 0,
      "question" : "How do you get the name of a file from a file object (fp)?"
    }, {
      "category" : "medium",
      "choices" : [ "fp.name", "fp.closed", "fp.mode", "fp.size" ],
      "correctAnswer" : 3,
      "question" : "Which of the following is not a valid attribute of a file object (fp)?"
    }, {
      "category" : "medium",
      "choices" : [ "close(fp)", "fclose(fp)", "fp.close()", "fp.__close__()" ],
      "correctAnswer" : 2,
      "question" : "How do you close a file object (fp)?"
    }, {
      "category" : "medium",
      "choices" : [ "fp.seek()", "fp.tell()", "fp.loc", "fp.pos" ],
      "correctAnswer" : 1,
      "question" : "How do you get the current position within the file?"
    }, {
      "category" : "medium",
      "choices" : [ "Operator over-assignment", "Operator overriding", "Operator overloading", "Operator instance" ],
      "correctAnswer" : 3,
      "question" : "The assignment of more than one function to a particular operator is _______"
    }, {
      "category" : "medium",
      "choices" : [ "Non-static", "Static", "Bounded", "Unbounded" ],
      "correctAnswer" : 0,
      "question" : "Which of the following is not a class method?"
    }, {
      "category" : "medium",
      "choices" : [ "ord()", "ord(‘ ‘)", "ord(”)", "ord(“”)" ],
      "correctAnswer" : 1,
      "question" : "Which of the following functions does not throw an error?"
    }, {
      "category" : "medium",
      "choices" : [ "re.compile.group", "re.compile.groupindex", "re.compile.index", "re.compile.indexgroup" ],
      "correctAnswer" : 1,
      "question" : "Which of the following functions returns a dictionary mapping group names to group numbers?"
    }, {
      "category" : "medium",
      "choices" : [ "‘pq*’ will match ‘pq’", "‘pq?’ matches ‘p’", "‘p{4}, q’ does not match ‘pppq’", "‘pq+’ matches ‘p’" ],
      "correctAnswer" : 3,
      "question" : "Which of the following statements regarding the output of the function re.match is incorrect?"
    }, {
      "category" : "medium",
      "choices" : [ "re.match(‘ab*’, ‘a’)", "re.match(‘ab*’, ‘ab’)", "re.match(‘ab*’, ‘abb’)", "re.match(‘ab*’, ‘ba’)" ],
      "correctAnswer" : 3,
      "question" : "Which of the following lines of code will not show a match?"
    }, {
      "category" : "medium",
      "choices" : [ "‘YXAAAA’", "(‘YXAAAA’)", "(‘AAAAAA’)", "‘AAAAAA’" ],
      "correctAnswer" : 3,
      "question" : "re.sub('Y', 'X', 'AAAAAA', count=2)"
    }, {
      "category" : "medium",
      "choices" : [ "a or b", "False", "ab", "True" ],
      "correctAnswer" : 3,
      "question" : "What will be the output after the following statements?\na=True\nb=False\nprint(a or b)"
    }, {
      "category" : "medium",
      "choices" : [ "a and b", "False", "ab", "True" ],
      "correctAnswer" : 1,
      "question" : "What will be the output after the following statements?\na=True\nb=False\nprint(a and b)"
    }, {
      "category" : "medium",
      "choices" : [ "False", "not a", "not defined", "True" ],
      "correctAnswer" : 0,
      "question" : "What will be the output after the following statements?\na=True\nb=False\nprint(not a)"
    }, {
      "category" : "medium",
      "choices" : [ "defines an empty class", "defines a function, which passes its parameters through", "defines a function, which does nothing", "defines a list and initializes it" ],
      "correctAnswer" : 2,
      "question" : "What does the following code do?\ndef p(q, r, s): pass"
    }, {
      "category" : "medium",
      "choices" : [ "7", "6", "8", "Syntax Error" ],
      "correctAnswer" : 0,
      "question" : "what is the output of the below program?\np = [3,6,9,None,(),[],{},]\nprint(len(p))"
    }, {
      "category" : "medium",
      "choices" : [ "320", "160", "480", "640" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the below program?\nn = lambda b: b * 4\nl = lambda b: b * 5\na = 4\na = n(a)\na = t(a)\na = n(a)\nprint(a)"
    }, {
      "category" : "medium",
      "choices" : [ "0", "1", "2", "3" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the below program?\np = True\nq = False\nr = True\nif not p or q:\nprint(0)\nelif not p or not q and r:\nprint(1)\nelif not p or q or not q and p:\nprint(2)\nelse:\nprint(3)"
    }, {
      "category" : "medium",
      "choices" : [ "1 only", "1 & 4", " 2,3 & 4", " 1,3 &4" ],
      "correctAnswer" : 2,
      "question" : "If PYTHONPATH is set in the environment, which directories are searched for modules?\n1)home directory\n2)PYTHONPATH directory\n3)installation dependent default path\n4)current directory"
    }, {
      "category" : "medium",
      "choices" : [ "7", "3", "1", "4" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the below program?\ncounter = 1\ndef fun():\nglobal counter\nfor i in (1, 2, 3):\ncounter += 2\nfun()\nprint(counter)"
    }, {
      "category" : "medium",
      "choices" : [ "SyntaxError", "333", "236", "None" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the below program?\nclass Account:\ndef _init__(self, id):\nself.id = id\nid = 333\nacc = Account(236)\nprint(acc.id)"
    }, {
      "category" : "medium",
      "choices" : [ "very", "very simple", "simp", "sampleCheck" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the below program?\ndef sampleCheck():\n\"This is a very simple example\"\nreturn 1\nprint(sampleCheck.__doc__[10:14])"
    }, {
      "category" : "medium",
      "choices" : [ " Changes the location where sub-processes are searched for after they are\nlaunched", " Removes all directories for mods", " Changes the location that the python executable is run from", " Adds a new directory to seach for python modules that are imported" ],
      "correctAnswer" : 3,
      "question" : "What does the code below do?\nsys.path.append('/root/mods')"
    }, {
      "category" : "medium",
      "choices" : [ "13", "7", " 5", "3" ],
      "correctAnswer" : 2,
      "question" : "What gets printed?\nimport re\nsum = 0\npattern = 'check'\nif re.match(pattern, 'checkup.txt'):\nsum += 1\nif re.match(pattern, 'text.back'):\nsum += 2\nif re.search(pattern, 'checkup.txt'):\nsum += 4\nif re.search(pattern, 'text.back'):\nsum += 8\nprint(sum)"
    }, {
      "category" : "medium",
      "choices" : [ "print(names.join(\"%s\\n\", names))", " print(names.concatenate(\"\\n\"))", " print(names.join(\"\\n\"))", " print(\"\\n\".join(names))" ],
      "correctAnswer" : 3,
      "question" : "Which of the following print statements will print all the names in the list on a seperate\nline\nnames = [‘Ashok', 'Sushma', 'Tarun', 'Charan', 'Sabid' ,’Chintan’ ,’Khare’ , ‘Vaibhav’]"
    }, {
      "category" : "medium",
      "choices" : [ " MainCl", "An exception is thrown", " _main__", "usr.lib.python.person" ],
      "correctAnswer" : 2,
      "question" : "Assuming the filename for the code below is /usr/lib/python/person.py\nand the program is run as:\npython /usr/lib/python/person.py\nWhat gets printed?\nclass MainCl:\ndef _init__(self):\npass\ndef getAge(self):\nprint(__name__)\nm = MainCl()\nm.getAge()"
    }, {
      "category" : "medium",
      "choices" : [ "1", "0", "2", "3" ],
      "correctAnswer" : 3,
      "question" : "What is the output of this program:\ncount_country= {}\ndef addone(country):\nif country in count_country:\ncount_country[country] += 1\nelse:\ncount_country[country] = 1\naddone('India')\naddone('pakisthan')\naddone('south africa')\nprint(len(count_country))"
    }, {
      "category" : "medium",
      "choices" : [ "1", "2", "5", "4" ],
      "correctAnswer" : 3,
      "question" : "What will be the output of the following code\nfun = {}\nfun[1] = 1\nfun['1'] = 2\nfun[1] += 1\nsum = 0\nfor i in fun:\nsum += fun[i]\nprint(sum)"
    }, {
      "category" : "medium",
      "choices" : [ "2", "7", "6", "4" ],
      "correctAnswer" : 2,
      "question" : "What will be the output of the following code\nfun = {}\nfun[1] = 1\nfun['1'] = 2\nfun[1.0] = 4\nsum = 0\nfor i in fun:\nsum += fun[i]\nprint(sum)"
    }, {
      "category" : "medium",
      "choices" : [ "An exception is thrown", "2", "7", "4" ],
      "correctAnswer" : 0,
      "question" : "What gets printed?\nbag = {}\njars = {}\ncrates = {}\nbag['cereal'] = 1\nbag['candy'] = 2\njars['honey'] = 4\ncrates['bag'] = bag\ncrates['jars'] = jars\nprint(len(crates[bag]))"
    }, {
      "category" : "medium",
      "choices" : [ "18", "21", "33", "66" ],
      "correctAnswer" : 3,
      "question" : "What gets printed\ngameofnumbers = {}\ngameofnumbers[(1,3,6)] = 18\ngameofnumbers[(6,3,1)] = 21\ngameofnumbers[(1,3)] = 24\nsum = 0\nfor k in gameofnumbers:\nsum += gameofnumbers[k]\nprint(len(gameofnumbers) + sum)"
    }, {
      "category" : "medium",
      "choices" : [ "An exception is thrown", "4", "2", "3" ],
      "correctAnswer" : 3,
      "question" : "What gets printed?\npar= {1:'1', 2:'2', 3:'3', 4:'4' }\ndel par[2]\npar[2] = '5'\ndel par[3]\nprint(len(par))"
    }, {
      "category" : "medium",
      "choices" : [ "A", "n", "Ashok", "Charan" ],
      "correctAnswer" : 1,
      "question" : "What gets printed?\nnames = ['Ashok', 'Sushma', 'Tarun', 'Charan']\nprint(names[-1][-1])"
    }, {
      "category" : "medium",
      "choices" : [ "22", "21", "11", "12" ],
      "correctAnswer" : 3,
      "question" : "What is output of the following code?\nnames2 = names1\nnames3 = names1[:]\nnames2[0] = 'Chintan'\nnames3[1] = 'Sabid'\nsum = 0\nfor ls in (names1, names2, names3):\nif ls[0] == 'Chintan':\nsum += 1\nif ls[1] == 'Sabid':\nsum += 10\nprint(sum)"
    }, {
      "category" : "medium",
      "choices" : [ "An exception is thrown", "1", "2", "Nothing is printed" ],
      "correctAnswer" : 2,
      "question" : "What gets printed?\nnames = ['Ashok', 'Sushma', 'Tarun', 'Charan']\nif 'ashok' in names1:\nprint(1)\nelse:\nprint(2)"
    }, {
      "category" : "medium",
      "choices" : [ "12", "8", "4", "5" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code\nnumbers = [3,4,5,6]\nnumbers.append([7,8,9,10])\nprint(len(numbers))"
    }, {
      "category" : "medium",
      "choices" : [ "set", "dictionary", "list", "All of the above" ],
      "correctAnswer" : 3,
      "question" : "Which of the following data structures can be used with the \"in\" operator to check if an\nitem is in the data structure?"
    }, {
      "category" : "medium",
      "choices" : [ "8", "1", "4", "6" ],
      "correctAnswer" : 3,
      "question" : "What is the output of th following code\ndef addItem(listParam):\nlistParam += [1]\nmylist = [5,6,7,8,9]\naddItem(mylist)\nprint(len(mylist))"
    }, {
      "category" : "medium",
      "choices" : [ "An exception is thrown", "7", "5", "2" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following code\nmy_tuple = (3, 4, 5, 6)\nmy_tuple.append( (7, 8, 9) )\nprint(len(my_tuple))"
    }, {
      "category" : "medium",
      "choices" : [ "This program has undefined behavior", "An exception is thrown", "4,2", "2,4" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following code?\nx = 2\ny = 4\nx,y = y,x\noutput = \"{} {}\".format(x, y)\nprint(output)"
    }, {
      "category" : "medium",
      "choices" : [ "2", "9", "4", "6" ],
      "correctAnswer" : 3,
      "question" : "What gets printed?\nimport numpy as np\nlistval = np.array([8,5,3,2,1])\nlistval = listval + 1\nprint (listval[1])"
    }, {
      "category" : "medium",
      "choices" : [ "28", "21", "10", "12" ],
      "correctAnswer" : 0,
      "question" : "What gets printed?\nimport numpy as np\np = np.array([0,3,4,2,1])\nq = np.array([1,2,3,5,8])\nr = p + q\nr = r*p\nprint (r[2])"
    }, {
      "category" : "medium",
      "choices" : [ "5", "3", "2", "1" ],
      "correctAnswer" : 3,
      "question" : "What gets printed?\nimport numpy as np\np = np.array([6,7,8,9,10])\nprint (p.ndim)"
    }, {
      "category" : "medium",
      "choices" : [ "15", "26", "35", "An exception is thrown" ],
      "correctAnswer" : 1,
      "question" : "What gets printed?\nimport numpy as np\np = np.array([6,7,8,9,10])\nq = np.arange(0,20,4)\nr = p + q\nprint (r[4])"
    }, {
      "category" : "medium",
      "choices" : [ "6", "3", "4", "2" ],
      "correctAnswer" : 0,
      "question" : "What gets printed?\na = 2\nb = \"3\"\nc = 4\nsum = 0\nfor i in (a,b,c):\nif isinstance(i, int):\nsum += i\nprint(sum)"
    }, {
      "category" : "medium",
      "choices" : [ "4", "6", "10", "None of the above" ],
      "correctAnswer" : 1,
      "question" : "What gets printed?\na = sum(range(4))\nprint(a)"
    }, {
      "category" : "medium",
      "choices" : [ "14", "10", "18", "None of the above" ],
      "correctAnswer" : 2,
      "question" : "What gets printed?\nvar = { '1' : 3, '2' : 6 }\ncp = var\nvar['1'] = 9\nsum = var['1'] + cp['1']\nprint(sum)"
    }, {
      "category" : "medium",
      "choices" : [ "12", "10", "6", "None of the above" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following code?\np = [3,4]\nq = [5,6]\nvar = { '1' : p, '2' : q }\ncp = var.copy()\nvar['1'][0] = 6\nsum = var['1'][0] + cp['1'][0]\nprint(sum)"
    }, {
      "category" : "medium",
      "choices" : [ "30", "32", "50", "31" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following code?\nclass Person:\ndef _init__(self, id):\nself.id = id\ntrump=Person(50)\ntrump.__dict__['age'] = 30\nprint(trump.age + len(trump.__dict__))"
    }, {
      "category" : "medium",
      "choices" : [ "Latracal Latracal", "Latracal 5", "Latracal", "An Exception is thrown" ],
      "correctAnswer" : 3,
      "question" : "What is output of the following program\na = \"Latracal \"\nb = 5\nprint(a + b)"
    }, {
      "category" : "medium",
      "choices" : [ "Latracal Latracal", "Latracal 5", "Latracal", "An Exception is thrown" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following program:\nvalues = [2, 3, 2, 4]\nnums = set(values)\ndef checkit(num):\nif num in nums:\nreturn True\nelse:\nreturn False\nfor i in filter(checkit, values):\nprint(i)"
    }, {
      "category" : "medium",
      "choices" : [ " 85", " Runtime error", " Compilation error", " None of the above" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following program?\nimport threading\ni = 5\nclass thread(threading.Thread):\ndef _init__(self, thread_ID, thread_name):\nthreading.Thread.__init__(self)\nself.thread_ID = thread_ID\nself.thread_name = thread_name\ndef run(self):\ni = i + 1\nprint(i)\nthread1 = thread(100, \"LS \")\nthread2 = thread(101, \"Latracal Solutions\")\nthread1.start()\nthread2.start()"
    }, {
      "category" : "medium",
      "choices" : [ " ['pq', 'rs']", " ['PQ', 'RS’']", " [PQRS]", " None of the above" ],
      "correctAnswer" : 0,
      "question" : "What is the output of the following program?\nx = ['pq', 'rs']\nfor i in x:\ni.upper()\nprint(x)"
    }, {
      "category" : "medium",
      "choices" : [ " [2,3,4]", " 234", " Error", " None of the above" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following program?\na = 234\nfor i in x:\nprint(i)"
    }, {
      "category" : "medium",
      "choices" : [ "L a t r a c a l S o l u t i o n s", "wwwwww….", " LatracalSolutions", " None of the above" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following program?\nmy_string = \"LatracalSolutions\"\ni = \"w\"\nwhile i in my_string:\nprint(i, end =\" \")"
    }, {
      "category" : "medium",
      "choices" : [ "LATRACALSOLUTIONS", "Error", " LatracalSolutions", " None of the above" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following program?\nmy_string = 'LatracalSolutions'\nfor i in range(len(my_string)):\nmy_string[i].upper()\nprint (my_string)"
    }, {
      "category" : "medium",
      "choices" : [ "True", "False", " 1", " None of the above" ],
      "correctAnswer" : 1,
      "question" : "What is the output of the following program?\nd1 = {\"Latracal\":40, \"Solutions\":45}\nd2 = {\"Latracal\":466, \"Solutions\":45}\nprint d1 > d2"
    }, {
      "category" : "medium",
      "choices" : [ " super().__init__()", " Both A and C", "B.__init__(self)", "None of the above" ],
      "correctAnswer" : 1,
      "question" : "Which of the following can be used to invoke the _init__ Method In B from A, Where A\nIs A subclass of B?"
    }, {
      "category" : "medium",
      "choices" : [ "5", "18", "5 30", "9 18" ],
      "correctAnswer" : 3,
      "question" : "What is the output of the following code?\nimport numpy as np\na = np.array([[2,3,4], [5, 6, 7]])\nb = a.sum(axis=1)\nprint (b)"
    }, {
      "category" : "medium",
      "choices" : [ " 123UTC time", " 3The time taken for the execution of the code", " 123The time taken for the execution of the code", " 3UTC time" ],
      "correctAnswer" : 2,
      "question" : "What is the output of the following code, if the time module has already been imported?\ndef num(m):\nt1 = time.time()\nfor i in range(0,m):\nprint(i)\nt2 = time.time()\nprint(str(t2-t1))"
    } ]
  },
  "Tutorials" : [ {
    "Answer" : "Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.\nIt is used for:\nweb development (server-side),\nsoftware development,\nmathematics,\nsystem scripting.",
    "ID" : 1,
    "Topic" : "Python Introduction"
  }, {
    "Answer" : "Now that we have Python up and running, we can write our first Python program.\nLet's create a very simple program called \"Hello World!\".  A \"Hello, World!\" is a simple program that outputs Hello, World! on the screen. Since it's a very simple program, it's often used to introduce a new programming language to a newbie.\nType the following code in any text editor or an IDE and save it as helloWorld.py\nprint(\"Hello world!\")\nThen, run the file. You will get the following output.\nHello world!\nCongratulations! You just wrote your first program in Python.\nAs we can see, it was pretty easy. This is the beauty of Python programming language.\nPython Keywords and Identifiers\nIn this tutorial, you will learn about keywords (reserved words in Python) and identifiers (names given to variables, functions, etc.).",
    "ID" : 9,
    "Topic" : "Tutorial - Your first Python Program"
  }, {
    "Answer" : "Keywords are the reserved words in Python.\nWe cannot use a keyword as a ,  name or any other identifier. They are used to define the syntax and structure of the Python language.\nIn Python, keywords are case sensitive.\nThere are 33 keywords in Python 3.7. This number can vary slightly in the course of time.\nAll the keywords except True, False and None are in lowercase and they must be written as it is. The list of all the keywords is given below.\nLooking at all the keywords at once and trying to figure out what they mean might be overwhelming.\nIf you want to have an overview, here is the complete  with examples.",
    "ID" : 10,
    "Topic" : "Python Keywords"
  }, {
    "Answer" : "An identifier is a name given to entities like class, functions, variables, etc. It helps to differentiate one entity from another.",
    "ID" : 11,
    "Topic" : "Python Identifiers"
  }, {
    "Answer" : "Indentation refers to the spaces at the beginning of a code line.\nWhere in other programming languages the indentation in code is for readability only, the indentation in Python is very important.\nPython uses indentation to indicate a block of code.\nExample\nif 5 > 2:\n  print(\"Five is greater than two!\")\n\nPython will give you an error if you skip the indentation:\nExample\nSyntax Error:\nif 5 > 2:\nprint(\"Five is greater than two!\")\n\nThe number of spaces is up to you as a programmer, but it has to be at least one.\nExample\nif 5 > 2:\n print(\"Five is greater than two!\")  \nif 5 > 2:\n        print(\"Five is greater than two!\") \n\nYou have to use the same number of spaces in the same block of code, otherwise Python will give you an error:\nExample\nSyntax Error:\nif 5 > 2:\n print(\"Five is greater than two!\") \n        print(\"Five is greater than two!\")",
    "ID" : 15,
    "Topic" : "Python Indentation"
  }, {
    "Answer" : "Comments are very important while writing a program. It describes what's going on inside a program so that a person looking at the source code does not have a hard time figuring it out. You might forget the key details of the program you just wrote in a month's time. So taking time to explain these concepts in form of comments is always fruitful.\nIn Python, we use the hash (#) symbol to start writing a comment.\nIt extends up to the newline character. Comments are for programmers for better understanding of a program. Python Interpreter ignores comment. \n#This is a comment\n#print out Hello\nprint('Hello')",
    "ID" : 16,
    "Topic" : "Python Comments"
  }, {
    "Answer" : "If we have comments that extend multiple lines, one way of doing it is to use hash (#) in the beginning of each line. For example:\n#This is a long comment\n#and it extends\n#to multiple lines\nAnother way of doing this is to use triple quotes, either ''' or \"\"\".\nThese triple quotes are generally used for multi-line strings. But they can be used as multi-line comment as well. Unless they are not docstrings, they do not generate any extra code.\n\"\"\"This is also a\nperfect example of\nmulti-line comments\"\"\"",
    "ID" : 17,
    "Topic" : "Multi-line comments"
  }, {
    "Answer" : "Docstring is short for documentation string.\nIt is a  that occurs as the first statement in a module, function, class, or method definition. We must write what a function/class does in the docstring.",
    "ID" : 18,
    "Topic" : "Docstring in Python"
  }, {
    "Answer" : "Variables are containers for storing data values.\nUnlike other programming languages, Python has no command for declaring a variable.\nA variable is created the moment you first assign a value to it.\nExample\nx = 5\ny = \"John\"\nprint(x)\nprint(y)\n\nVariables do not need to be declared with any particular type and can even change type after they have been set.\nExample\nx = 4 # x is of type int\nx = \"Sally\" # x is now of type str\nprint(x)\n\nString variables can be declared either by using single or double quotes:\nExample\nx = \"John\"\n# is the same as\nx = 'John'",
    "ID" : 19,
    "Topic" : "Creating Variables"
  }, {
    "Answer" : "A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables:\nA variable name must start with a letter or the underscore character\nA variable name cannot start with a number\nA variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\nVariable names are case-sensitive (age, Age and AGE are three different variables)\nRemember that variable names are case-sensitive",
    "ID" : 20,
    "Topic" : "Variable Names"
  }, {
    "Answer" : "Python allows you to assign values to multiple variables in one line:\nExample\nx, y, z = \"Orange\", \"Banana\", \"Cherry\"\nprint(x)\nprint(y)\nprint(z)\n\nAnd you can assign the same value to multiple variables in one line:\nExample\nx = y = z = \"Orange\"\nprint(x)\nprint(y)\nprint(z)",
    "ID" : 21,
    "Topic" : "Assign Value to Multiple Variables"
  }, {
    "Answer" : "The Python print statement is often used to output variables.\nTo combine both text and a variable, Python uses the + character:\nExample\nx = \"awesome\"\nprint(\"Python is \" + x)\n\nYou can also use the + character to add a variable to another variable:\nExample\nx = \"Python is \"\ny = \"awesome\"\nz =  x + y\nprint(z)\n\nFor numbers, the + character works as a mathematical operator:\nExample\nx = 5\ny = 10\nprint(x + y)\n\nIf you try to combine a string and a number, Python will give you an error:\nExample\nx = 5\ny = \"John\"\nprint(x + y)",
    "ID" : 22,
    "Topic" : "Output Variables"
  }, {
    "Answer" : "Variables that are created outside of a function (as in all of the examples above) are known as global variables.\nGlobal variables can be used by everyone, both inside of functions and outside.\nExample\nCreate a variable outside of a function, and use it inside the function\nx = \"awesome\"\n\ndef myfunc():\n  print(\"Python is \" + x)\n\nmyfunc()\n\nIf you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function. The global variable with the same name will remain as it was, global and with the original value.\nExample\nCreate a variable inside a function, with the same name as the global variable\nx = \"awesome\"\n\ndef myfunc():\n  x = \"fantastic\"\n  print(\"Python is \" + x)\n\nmyfunc()\n\nprint(\"Python is \" + x)",
    "ID" : 23,
    "Topic" : "Global Variables"
  }, {
    "Answer" : "Operators are the constructs which can manipulate the value of operands.\nConsider the expression 4 + 5 = 9. Here, 4 and 5 are called operands and + is called operator.\nTypes of Operator\nPython language supports the following types of operators.\nArithmetic Operators\nComparison (Relational) Operators\nAssignment Operators\nLogical Operators\nBitwise Operators\nMembership Operators\nIdentity Operators\nLet us have a look on all operators one by one.",
    "ID" : 24,
    "Topic" : "Python - Basic Operators"
  }, {
    "Answer" : "Assume variable a holds 10 and variable b holds 20, then −\n[  ]",
    "ID" : 25,
    "Topic" : "Python Arithmetic Operators"
  }, {
    "Answer" : "These operators compare the values on either sides of them and decide the relation among them. They are also called Relational operators.\nAssume variable a holds 10 and variable b holds 20, then −\n[  ]",
    "ID" : 26,
    "Topic" : "Python Comparison Operators"
  }, {
    "Answer" : "Assume variable a holds 10 and variable b holds 20, then −\n[  ]",
    "ID" : 27,
    "Topic" : "Python Assignment Operators"
  }, {
    "Answer" : "Bitwise operator works on bits and performs bit by bit operation. Assume if a = 60; and b = 13; Now in binary format they will be as follows −\na = 0011 1100\nb = 0000 1101\n-----------------\na&b = 0000 1100\na|b = 0011 1101\na^b = 0011 0001\n~a  = 1100 0011\nThere are following Bitwise operators supported by Python language\n[  ]",
    "ID" : 28,
    "Topic" : "Python Bitwise Operators"
  }, {
    "Answer" : "There are following logical operators supported by Python language. Assume variable a holds 10 and variable b holds 20 then\n[  ]\nUsed to reverse the logical state of its operand.",
    "ID" : 29,
    "Topic" : "Python Logical Operators"
  }, {
    "Answer" : "Python’s membership operators test for membership in a sequence, such as strings, lists, or tuples. There are two membership operators as explained below −\n[  ]",
    "ID" : 30,
    "Topic" : "Python Membership Operators"
  }, {
    "Answer" : "Identity operators compare the memory locations of two objects. There are two Identity operators explained below −\n[  ]",
    "ID" : 31,
    "Topic" : "Python Identity Operators"
  }, {
    "Answer" : "The following table lists all operators from highest precedence to lowest.\n[  ]",
    "ID" : 32,
    "Topic" : "Python Operators Precedence"
  }, {
    "Answer" : "String literals in python are surrounded by either single quotation marks, or double quotation marks.\n'hello' is the same as \"hello\".\nYou can display a string literal with the print() function:\nExample\nprint(\"Hello\")\nprint('Hello')",
    "ID" : 38,
    "Topic" : "String Literals"
  }, {
    "Answer" : "Assigning a string to a variable is done with the variable name followed by an equal sign and the string:\nExample\na = \"Hello\"\nprint(a)",
    "ID" : 39,
    "Topic" : "Assign String to a Variable"
  }, {
    "Answer" : "You can assign a multiline string to a variable by using three quotes:\nExample\nYou can use three double quotes:\na = \"\"\"Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.\"\"\"\nprint(a)\n\nOr three single quotes:\nExample\na = '''Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.'''\nprint(a)\n\nNote: in the result, the line breaks are inserted at the same position as in the code.",
    "ID" : 40,
    "Topic" : "Multiline Strings"
  }, {
    "Answer" : "You can return a range of characters by using the slice syntax.\nSpecify the start index and the end index, separated by a colon, to return a part of the string.\nExample\nGet the characters from position 2 to position 5 (not included):\nb = \"Hello, World!\"\nprint(b[2:5])",
    "ID" : 42,
    "Topic" : "String Slicing"
  }, {
    "Answer" : "Use negative indexes to start the slice from the end of the string:\nExample\nGet the characters from position 5 to position 1, starting the ID from the end of the string:\nb = \"Hello, World!\"\nprint(b[-5:-2])",
    "ID" : 43,
    "Topic" : "Negative Indexing"
  }, {
    "Answer" : "To get the length of a string, use the len() function.\nExample\nThe len() function returns the length of a string:\na = \"Hello, World!\"\nprint(len(a))",
    "ID" : 44,
    "Topic" : "String Length"
  }, {
    "Answer" : "Python has a set of built-in methods that you can use on strings.\nExample\nThe strip() method removes any whitespace from the beginning or the end:\na = \" Hello, World! \"\nprint(a.strip()) # returns \"Hello, World!\"\n\nExample\nThe lower() method returns the string in lower case:\na = \"Hello, World!\"\nprint(a.lower())\n\nExample\nThe upper() method returns the string in upper case:\na = \"Hello, World!\"\nprint(a.upper())\n\nExample\nThe replace() method replaces a string with another string:\na = \"Hello, World!\"\nprint(a.replace(\"H\", \"J\"))\n\nExample\nThe split() method splits the string into substrings if it finds instances of the separator:\na = \"Hello, World!\"\nprint(a.split(\",\")) # returns ['Hello', ' World!']\n\nLearn more about String Methods with our ",
    "ID" : 45,
    "Topic" : "String Methods"
  }, {
    "Answer" : "To check if a certain phrase or character is present in a string, we can use the keywords in or not in.\nExample\nCheck if the phrase \"ain\" is present in the following text:\ntxt = \"The rain in Spain stays mainly in the plain\"\nx = \"ain\" in txt\nprint(x)\n\nExample\nCheck if the phrase \"ain\" is NOT present in the following text:\ntxt = \"The rain in Spain stays mainly in the plain\"\nx = \"ain\" not in txt\nprint(x) ",
    "ID" : 46,
    "Topic" : "Check String"
  }, {
    "Answer" : "To concatenate, or combine, two strings you can use the + operator.\nExample\nMerge variable a with variable b into variable c:\na = \"Hello\"\nb = \"World\"\nc = a + b\nprint(c)\n\nExample\nTo add a space between them, add a \" \":\na = \"Hello\"\nb = \"World\"\nc = a + \" \" + b\nprint(c)",
    "ID" : 47,
    "Topic" : "String Concatenation"
  }, {
    "Answer" : "As we learned in the Python Variables chapter, we cannot combine strings and numbers like this:\nExample\nage = 36\ntxt = \"My name is John, I am \" + age\nprint(txt)\n\nBut we can combine strings and numbers by using the format() method!\nThe format() method takes the passed arguments, formats them, and places them in the string where the placeholders {} are:\nExample\nUse the format() method to insert numbers into strings:\nage = 36\ntxt = \"My name is John, and I am {}\"\nprint(txt.format(age))\n\nThe format() method takes unlimited number of arguments, and are placed into the respective placeholders:\nExample\nquantity = 3\nitemno = 567\nprice = 49.95\nmyorder = \"I want {} pieces of item {} for {} dollars.\"\nprint(myorder.format(quantity, itemno, price))\n\nYou can use index numbers {0} to be sure the arguments are placed in the correct placeholders:\nExample\nquantity = 3\nitemno = 567\nprice = 49.95\nmyorder = \"I want to pay {2} dollars for {0} pieces of item {1}.\"\nprint(myorder.format(quantity, itemno, price))",
    "ID" : 48,
    "Topic" : "String Format"
  }, {
    "Answer" : " is an ordered sequence of items. It is one of the most used datatype in Python and is very flexible. All the items in a list do not need to be of the same type.\nDeclaring a list is pretty straight forward. Items separated by commas are enclosed within brackets [ ].\n>>> a = [1, 2.2, 'python']\nWe can use the slicing operator [ ] to extract an item or a range of items from a list. Index starts form 0 in Python.\n\n\n\n\na = [5,10,15,20,25,30,35,40]\n# a[2] = 15\nprint(\"a[2] = \", a[2])\n# a[0:3] = [5, 10, 15]\nprint(\"a[0:3] = \", a[0:3])\n# a[5:] = [30, 35, 40]\nprint(\"a[5:] = \", a[5:])\n\n\nLists are mutable, meaning, value of elements of a list can be altered.\n>>> a = [1,2,3]\n>>> a[2]=4\n>>> a\n[1, 2, 4]",
    "ID" : 49,
    "Topic" : "Python List"
  }, {
    "Answer" : " is an ordered sequence of items same as list.The only difference is that tuples are immutable. Tuples once created cannot be modified.\nTuples are used to write-protect data and are usually faster than list as it cannot change dynamically.\nIt is defined within parentheses () where items are separated by commas.\n>>> t = (5,'program', 1+3j)\nWe can use the slicing operator [] to extract items but we cannot change its value.\n\n\n\n\nt = (5,'program', 1+3j)\n# t[1] = 'program'\nprint(\"t[1] = \", t[1])\n# t[0:3] = (5, 'program', (1+3j))\nprint(\"t[0:3] = \", t[0:3])\n# Generates error\n# Tuples are immutable\nt[0] = 10",
    "ID" : 50,
    "Topic" : "Python Tuple"
  }, {
    "Answer" : "\nSet\nA set is a collection which is unordered and unindexed. In Python sets are written with curly brackets.\nExample\nCreate a Set:\nthisset = {\"apple\", \"banana\", \"cherry\"}\nprint(thisset)\n\nNote: Sets are unordered, so you cannot be sure in which order the items will appear.\n\nAccess Items\nYou cannot access items in a set by referring to an index, since sets are unordered the items has no index.\nBut you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.\nExample\nLoop through the set, and print the values:\nthisset = {\"apple\", \"banana\", \"cherry\"}\n\nfor x in thisset:\n  print(x)\n\nExample\nCheck if \"banana\" is present in the set:\nthisset = {\"apple\", \"banana\", \"cherry\"}\n\nprint(\"banana\" in thisset)\n\n\nChange Items\nOnce a set is created, you cannot change its items, but you can add new items.\n\nAdd Items\nTo add one item to a set use the add() method.\nTo add more than one item to a set use the update() method.\nExample\nAdd an item to a set, using the add() method:\nthisset = {\"apple\", \"banana\", \"cherry\"}\n\nthisset.add(\"orange\")\n\nprint(thisset)",
    "ID" : 51,
    "Topic" : "Python Sets"
  }, {
    "Answer" : " is an unordered collection of key-value pairs.\nIt is generally used when we have a huge amount of data. Dictionaries are optimized for retrieving data. We must know the key to retrieve the value.\nIn Python, dictionaries are defined within braces {} with each item being a pair in the form key:value. Key and value can be of any type.\n>>> d = {1:'value','key':2}\n>>> type(d)\n<class 'dict'>\nWe use key to retrieve the respective value. But not the other way around.\n\nExample\nCreate and print a dictionary:\nthisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict)\n\n\n\nAccessing Items\nYou can access the items of a dictionary by referring to its key name, inside square brackets:\nExample\nGet the value of the \"model\" key:\nx = thisdict[\"model\"]\n\n\nThere is also a method called get() that will give you the same result:\nExample\nGet the value of the \"model\" key:\nx = thisdict.get(\"model\")\n\n\n\n\nChange Values\nYou can change the value of a specific item by referring to its key name:\nExample\nChange the \"year\" to 2018:\nthisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nthisdict[\"year\"] = 2018\n\n\n\nCheck if Key Exists\nTo determine if a specified key is present in a dictionary use the in keyword:\nExample\nCheck if \"model\" is present in the dictionary:\nthisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nif \"model\" in thisdict:\n  print(\"Yes, 'model' is one of the keys in the thisdict dictionary\")\n\n\nDictionary Length\nTo determine how many items (key-value pairs) a dictionary has, use the len() method.\nExample\nPrint the number of items in the dictionary:\nprint(len(thisdict))\n\n\nAdding Items\nAdding an item to the dictionary is done by using a new index key and assigning a value to it:\nExample\nthisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nthisdict[\"color\"] = \"red\"\nprint(thisdict)\n\n\n\nRemoving Items\nThere are several methods to remove items from a dictionary:\nExample\nThe pop() method removes the item with the specified key name:\nthisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nthisdict.pop(\"model\")\nprint(thisdict)",
    "ID" : 52,
    "Topic" : "Python Dictionary"
  }, {
    "Answer" : "Python supports the usual logical conditions from mathematics:\nEquals: a == b\nNot Equals: a != b\nLess than: a < b\nLess than or equal to: a <= b\nGreater than: a > b\nGreater than or equal to: a >= b\nThese conditions can be used in several ways, most commonly in \"if statements\" and loops.\nAn \"if statement\" is written by using the if keyword.\nExample\nIf statement:\na = 33\nb = 200\nif b > a:\n  print(\"b is greater than a\")\n\nIn this example we use two variables, a and b, which are used as part of the if statement to test whether b is greater than a. As a is 33, and b is 200, we know that 200 is greater than 33, and so we print to screen that \"b is greater than a\".",
    "ID" : 54,
    "Topic" : "Python Conditions and If statements"
  }, {
    "Answer" : "Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.\nExample\nIf statement, without indentation (will raise an error):\na = 33\nb = 200\nif b > a:\nprint(\"b is greater than a\") # you will get an error",
    "ID" : 55,
    "Topic" : "Indentation"
  }, {
    "Answer" : "The elif keyword is pythons way of saying \"if the previous conditions were not true, then try this condition\".\nExample\na = 33\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")\n\n\nIn this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that \"a and b are equal\".",
    "ID" : 56,
    "Topic" : "Elif"
  }, {
    "Answer" : "The else keyword catches anything which isn't caught by the preceding conditions.\nExample\na = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")\nelse:\n  print(\"a is greater than b\")\n\n\nIn this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the elsecondition and print to screen that \"a is greater than b\".\nYou can also have an else without the elif:\nExample\na = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelse:\n  print(\"b is not greater than a\")",
    "ID" : 57,
    "Topic" : "Else"
  }, {
    "Answer" : "In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on. There may be a situation when you need to execute a block of code several number of times.\nProgramming languages provide various control structures that allow for more complicated execution paths.\nA loop statement allows us to execute a statement or group of statements multiple times. The following diagram illustrates a loop statement −\n\nPython programming language provides following types of loops to handle looping requirements.\nLoop Control Statements\nLoop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.\nPython supports the following control statements. Click the following links to check their detail.\nLet us go through the loop control statements briefly",
    "ID" : 58,
    "Topic" : "Loops"
  }, {
    "Answer" : "We can generate a sequence of numbers using range() function. range(10) will generate numbers from 0 to 9 (10 numbers).\nWe can also define the start, stop and step size as range(start,stop,step size). step size defaults to 1 if not provided.\nThis function does not store all the values in memory, it would be inefficient. So it remembers the start, stop, step size and generates the next number on the go.\nTo force this function to output all the items, we can use the function list().\nThe following example will clarify this.\n# Output: range(0, 10)\nprint(range(10))\n\n# Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(list(range(10)))\n\n# Output: [2, 3, 4, 5, 6, 7]\nprint(list(range(2, 8)))\n\n# Output: [2, 5, 8, 11, 14, 17]\nprint(list(range(2, 20, 3)))\t\nWe can use the range() function in for loops to iterate through a sequence of numbers. It can be combined with the len() function to iterate though a sequence using indexing. Here is an example.\n\n\n\n\n# Program to iterate through a list using indexing\ngenre = ['pop', 'rock', 'jazz']\n# iterate over the list using index\nfor i in range(len(genre)):\n    print(\"I like\", genre[i])\nRun\n\n\nWhen you run the program, the output will be:\nI like pop\nI like rock\n​I like jazz",
    "ID" : 60,
    "Topic" : "The range() function"
  }, {
    "Answer" : "A for loop can have an optional else block as well. The else part is executed if the items in the sequence used in for loop exhausts.\nbreak statement can be used to stop a for loop. In such case, the else part is ignored.\nHence, a for loop's else part runs if no break occurs.\nHere is an example to illustrate this.\n\n\n\n\n1\n2\n3\n4\n5\n6\ndigits = [0, 1, 5]\nfor i in digits:\n    print(i)\nelse:\n    print(\"No items left.\")\nRun\n\n\nWhen you run the program, the output will be:\n0\n1\n5\nNo items left.\nHere, the for loop prints items of the list until the loop exhausts. When the for loop exhausts, it executes the block of code in the else and prints\nNo items left.",
    "ID" : 61,
    "Topic" : "for loop with else"
  }, {
    "Answer" : "With the while loop we can execute a set of statements as long as a condition is true.\nExample\nPrint i as long as i is less than 6:\ni = 1\nwhile i < 6:\n  print(i)\n  i += 1\n\n\nNote: remember to increment i, or else the loop will continue forever.\nThe while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.",
    "ID" : 62,
    "Topic" : "The while Loop"
  }, {
    "Answer" : "With the break statement we can stop the loop even if the while condition is true:\nExample\nExit the loop when i is 3:\ni = 1\nwhile i < 6:\n  print(i)\n  if i == 3:\n    break\n  i += 1",
    "ID" : 63,
    "Topic" : "The break Statement"
  }, {
    "Answer" : "With the continue statement we can stop the current iteration, and continue with the next:\nExample\nContinue to the next iteration if i is 3:\ni = 0\nwhile i < 6:\n  i += 1 \n  if i == 3:\n    continue\n  print(i)",
    "ID" : 64,
    "Topic" : "The continue Statement"
  }, {
    "Answer" : "With the else statement we can run a block of code once when the condition no longer is true:\nExample\nContinue to the next iteration if i is 3:\ni = 1\nwhile i < 6:\n  print(i)\n  i += 1\nelse:\n  print(\"i is no longer less than 6\")",
    "ID" : 65,
    "Topic" : "The else Statement"
  }, {
    "Answer" : "In Python, break and continue statements can alter the flow of a normal loop.\nLoops iterate over a block of code until test expression is false, but sometimes we wish to terminate the current iteration or even the whole loop without checking test expression.\nThe break and continue statements are used in these cases.",
    "ID" : 66,
    "Topic" : "The use of break and continue in Python"
  }, {
    "Answer" : "The break statement terminates the loop containing it. Control of the program flows to the statement immediately after the body of the loop.\nIf break statement is inside a nested loop (loop inside another loop), break will terminate the innermost loop.",
    "ID" : 67,
    "Topic" : "Python break statement"
  }, {
    "Answer" : "break\nhe working of break statement in  and  is shown below.\n\nExample: Python break\n\n\n\n\n# Use of break statement inside loop\nfor val in \"string\":\n    if val == \"i\":\n        break\n    print(val)\nprint(\"The end\")\nRun\n\n\nOutput\ns\nt\nr\nThe end\nIn this program, we iterate through the \"string\" sequence. We check if the letter is \"i\", upon which we break from the loop. Hence, we see in our output that all the letters up till \"i\" gets printed. After that, the loop terminates.",
    "ID" : 68,
    "Topic" : "Syntax of break"
  }, {
    "Answer" : "The continue statement is used to skip the rest of the code inside a loop for the current iteration only. Loop does not terminate but continues on with the next iteration.\nSyntax of Continue\ncontinue\n\nExample: Python continue\n\n\n\n\n# Program to show the use of continue statement inside loops\nfor val in \"string\":\n    if val == \"i\":\n        continue\n    print(val)\nprint(\"The end\")\nRun\n\n\nOutput\ns\nt\nr\nn\ng\nThe end\nThis program is same as the above example except the break statement has been replaced with continue.\nWe continue with the loop, if the string is \"i\", not executing the rest of the block. Hence, we see in our output that all the letters except \"i\" gets printed.",
    "ID" : 69,
    "Topic" : "Python continue statement"
  }, {
    "Answer" : "In Python programming, pass is a null statement. The difference between a and pass statement in Python is that, while the interpreter ignores a comment entirely, pass is not ignored.\nHowever, nothing happens when pass is executed. It results into no operation (NOP).\nSyntax of pass\npass\nWe generally use it as a placeholder.\nSuppose we have a or a  that is not implemented yet, but we want to implement it in the future. They cannot have an empty body. The interpreter would complain. So, we use the pass statement to construct a body that does nothing.",
    "ID" : 70,
    "Topic" : "Pass statement in Python"
  }, {
    "Answer" : "In Python a function is defined using the def keyword:\nExample\ndef my_function():\n  print(\"Hello from a function\")",
    "ID" : 72,
    "Topic" : "Creating a Function"
  }, {
    "Answer" : "To call a function, use the function name followed by parenthesis:\nExample\ndef my_function():\n  print(\"Hello from a function\")\n\nmy_function()",
    "ID" : 73,
    "Topic" : "Calling a Function"
  }, {
    "Answer" : "Information can be passed to functions as parameter.\nParameters are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma.\nThe following example has a function with one parameter (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name:\nExample\ndef my_function(fname):\n  print(fname + \" Refsnes\")\n\nmy_function(\"Emil\")\nmy_function(\"Tobias\")\nmy_function(\"Linus\")",
    "ID" : 74,
    "Topic" : "Function Parameters"
  }, {
    "Answer" : "The following example shows how to use a default parameter value.\nIf we call the function without parameter, it uses the default value:\nExample\ndef my_function(IDry = \"Norway\"):\n  print(\"I am from \" + IDry)\n\nmy_function(\"Sweden\")\nmy_function(\"India\")\nmy_function()\nmy_function(\"Brazil\")",
    "ID" : 75,
    "Topic" : "Default Parameter Value"
  }, {
    "Answer" : "You can send any data types of parameter to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.\nE.g. if you send a List as a parameter, it will still be a List when it reaches the function:\nExample\ndef my_function(food):\n  for x in food:\n    print(x)\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nmy_function(fruits)",
    "ID" : 76,
    "Topic" : "Passing a List as a Parameter"
  }, {
    "Answer" : "To let a function return a value, use the return statement:\nExample\ndef my_function(x):\n  return 5 * x\n\nprint(my_function(3))\nprint(my_function(5))\nprint(my_function(9))",
    "ID" : 77,
    "Topic" : "Return Values"
  }, {
    "Answer" : "You can also send arguments with the key = value syntax.\nThis way the order of the arguments does not matter.\nExample\ndef my_function(child3, child2, child1):\n  print(\"The youngest child is \" + child3)\n\nmy_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")\n\nThe phrase Keyword Arguments are often shortened to kwargs in Python documentations.",
    "ID" : 78,
    "Topic" : "Keyword Arguments"
  }, {
    "Answer" : "If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.\nThis way the function will receive a tuple of arguments, and can access the items accordingly:\nExample\nIf the number of arguments are unknown, add a * before the parameter name:\ndef my_function(*kids):\n  print(\"The youngest child is \" + kids[2])\n\nmy_function(\"Emil\", \"Tobias\", \"Linus\")",
    "ID" : 79,
    "Topic" : "Arbitrary Arguments"
  }, {
    "Answer" : "Python also accepts function recursion, which means a defined function can call itself.\nRecursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.\nThe developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.\nIn this example, tri_recursion() is a function that we have defined to call itself (\"recurse\"). We use the k variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).\nTo a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.\nExample\nRecursion Example\ndef tri_recursion(k):\n  if(k>0):\n    result = k+tri_recursion(k-1)\n    print(result)\n  else:\n    result = 0\n  return result\n\nprint(\"\\n\\nRecursion Example Results\")\ntri_recursion(6)",
    "ID" : 80,
    "Topic" : "Recursion"
  }, {
    "Answer" : "In Python, anonymous function is a  that is defined without a name.\nWhile normal functions are defined using the def keyword, in Python anonymous functions are defined using the lambda keyword.\nHence, anonymous functions are also called lambda functions.",
    "ID" : 81,
    "Topic" : "What are lambda functions in Python?"
  }, {
    "Answer" : "A lambda function in python has the following syntax.\nSyntax of Lambda Function in python\nlambda arguments: expression\nLambda functions can have any number of arguments but only one expression. The expression is evaluated and returned. Lambda functions can be used wherever function objects are required.\n\nExample of Lambda Function in python\nHere is an example of lambda function that doubles the input value.\n\n\n\n\n# Program to show the use of lambda functions\ndouble = lambda x: x * 2\n# Output: 10\nprint(double(5))\nRun\n\n\nIn the above program, lambda x: x * 2 is the lambda function. Here x is the argument and x * 2 is the expression that gets evaluated and returned.\nThis function has no name. It returns a function object which is assigned to the identifier double. We can now call it as a normal function. The statement\ndouble = lambda x: x * 2\nis nearly the same as\ndef double(x):\n   return x * 2",
    "ID" : 82,
    "Topic" : "How to use lambda Functions in Python?"
  }, {
    "Answer" : "We use lambda functions when we require a nameless function for a short period of time.\nIn Python, we generally use it as an argument to a higher-order function (a function that takes in other functions as ). Lambda functions are used along with built-in functions like filter(), map() etc.\nExample use with filter()\nThe filter() function in Python takes in a function and a list as arguments.\nThe function is called with all the items in the list and a new list is returned which contains items for which the function evaluats to True.\nHere is an example use of filter() function to filter out only even numbers from a list.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# Program to filter out only the even items from a list\nmy_list = [1, 5, 4, 6, 8, 11, 3, 12]\nnew_list = list(filter(lambda x: (x%2 == 0) , my_list))\n# Output: [4, 6, 8, 12]\nprint(new_list)\nRun",
    "ID" : 83,
    "Topic" : "Use of Lambda Function in python"
  }, {
    "Answer" : "We can import the definitions inside a module to another module or the interactive interpreter in Python.\nWe use the import keyword to do this. To import our previously defined module example we type the following in the Python prompt.\n>>> import example\nThis does not enter the names of the functions defined in example directly in the current symbol table. It only enters the module name example there.\nUsing the module name we can access the function using the dot . operator. For example:\n>>> example.add(4,5.5)\n9.5\nPython has a ton of standard modules available.\nYou can check out the full list of  and what they are for. These files are in the Lib directory inside the location where you installed Python.\nStandard modules can be imported the same way as we import our user-defined modules.\nThere are various ways to import modules. They are listed as follows.",
    "ID" : 86,
    "Topic" : "Import modules in Python"
  }, {
    "Answer" : "We can import a module using import statement and access the definitions inside it using the dot operator as described above. Here is an example.\n\n\n\n\n# import statement example\n# to import standard module math\nimport math\nprint(\"The value of pi is\", math.pi)\nRun\n\n\nWhen you run the program, the output will be:\nThe value of pi is 3.141592653589793",
    "ID" : 87,
    "Topic" : "Python import statement"
  }, {
    "Answer" : "We can import a module by renaming it as follows.\n\n\n\n\n# import module by renaming it\nimport math as m\nprint(\"The value of pi is\", m.pi)\nRun\n\n\nWe have renamed the math module as m. This can save us typing time in some cases.\nNote that the name math is not recognized in our scope. Hence, math.pi is invalid, m.pi is the correct implementation.",
    "ID" : 88,
    "Topic" : "Import with renaming"
  }, {
    "Answer" : "We can import specific names from a module without importing the module as a whole. Here is an example.\n\n\n\n\n# import only pi from math module\nfrom math import pi\nprint(\"The value of pi is\", pi)\nRun\n\n\nWe imported only the attribute pi from the module.\nIn such case we don't use the dot operator. We could have imported multiple attributes as follows.\n>>> from math import pi, e\n>>> pi\n3.141592653589793\n>>> e\n2.718281828459045",
    "ID" : 89,
    "Topic" : "Python from...import statement"
  }, {
    "Answer" : "We can import all names(definitions) from a module using the following construct.\n\n\n\n\n# import all names from the standard module math\nfrom math import *\nprint(\"The value of pi is\", pi)\nRun\n\n\nWe imported all the definitions from the math module. This makes all names except those beginnig with an underscore, visible in our scope.\nImporting everything with the asterisk (*) symbol is not a good programming practice. This can lead to duplicate definitions for an identifier. It also hampers the readability of our code.",
    "ID" : 90,
    "Topic" : "Import all names"
  }, {
    "Answer" : "While importing a module, Python looks at several places. Interpreter first looks for a built-in module then (if not found) into a list of directories defined in sys.path. The search is in this order.\nThe current directory.\nPYTHONPATH (an environment variable with a list of directory).\nThe installation-dependent default directory.\n>>> import sys\n>>> sys.path\n['',\n'C:\\\\Python33\\\\Lib\\\\idlelib',\n'C:\\\\Windows\\\\system32\\\\python33.zip',\n'C:\\\\Python33\\\\DLLs',\n'C:\\\\Python33\\\\lib',\n'C:\\\\Python33',\n'C:\\\\Python33\\\\lib\\\\site-packages']\nWe can add modify this list to add our own path.",
    "ID" : 91,
    "Topic" : "Python Module Search Path"
  }, {
    "Answer" : "The Python interpreter imports a module only once during a session. This makes things more efficient. Here is an example to show how this works.\nSuppose we have the following code in a module named my_module.\n# This module shows the effect of\n#  multiple imports and reload\n\nprint(\"This code got executed\")\nNow we see the effect of multiple imports.\n>>> import my_module\nThis code got executed\n>>> import my_module\n>>> import my_module\nWe can see that our code got executed only once. This goes to say that our module was imported only once.\nNow if our module changed during the course of the program, we would have to reload it.One way to do this is to restart the interpreter. But this does not help much.\nPython provides a neat way of doing this. We can use the reload() function inside the imp module to reload a module. This is how its done.\n>>> import imp\n>>> import my_module\nThis code got executed\n>>> import my_module\n>>> imp.reload(my_module)\nThis code got executed\n<module 'my_module' from '.\\\\my_module.py'>",
    "ID" : 92,
    "Topic" : "Reloading a module"
  }, {
    "Answer" : "We can use the dir() function to find out names that are defined inside a module.\nFor example, we have defined a function add() in the module example that we had in the beginning.\n>>> dir(example)\n['__builtins__',\n'__cached__',\n'__doc__',\n'__file__',\n'__initializing__',\n'__loader__',\n'__name__',\n'__package__',\n'add']\nHere, we can see a sorted list of names (along with add). All other names that begin with an underscore are default Python attributes associated with the module (we did not define them ourself).\nFor example, the __name__ attribute contains the name of the module.\n>>> import example\n>>> example.__name__\n'example'\nAll the names defined in our current namespace can be found out using the dir() function without any arguments.\n>>> a = 1\n>>> b = \"hello\"\n>>> import math\n>>> dir()\n['__builtins__', '__doc__', '__name__', 'a', 'b', 'math', 'pyscripter']",
    "ID" : 93,
    "Topic" : "The dir() built-in function"
  }, {
    "Answer" : "We don't usually store all of our files in our computer in the same location. We use a well-organized hierarchy of directories for easier access.\nSimilar files are kept in the same directory, for example, we may keep all the songs in the \"music\" directory. Analogous to this, Python has packages for directories and  for files.\nAs our application program grows larger in size with a lot of modules, we place similar modules in one package and different modules in different packages. This makes a project (program) easy to manage and conceptually clear.\nSimilar, as a directory can contain sub-directories and files, a Python package can have sub-packages and modules.\nA directory must contain a file named __init__.py in order for Python to consider it as a package. This file can be left empty but we generally place the initialization code for that package in this file.\nHere is an example. Suppose we are developing a game, one possible organization of packages and modules could be as shown in the figure below.",
    "ID" : 94,
    "Topic" : "What are packages?"
  }, {
    "Answer" : "We can import modules from packages using the dot (.) operator.\nFor example, if want to import the start module in the above example, it is done as follows.\nimport Game.Level.start\nNow if this module contains a  named select_difficulty(), we must use the full name to reference it.\nGame.Level.start.select_difficulty(2)\nIf this construct seems lengthy, we can import the module without the package prefix as follows.\nfrom Game.Level import start\nWe can now call the function simply as follows.\nstart.select_difficulty(2)\nYet another way of importing just the required function (or class or variable) form a module within a package would be as follows.\nfrom Game.Level.start import select_difficulty\nNow we can directly call this function.\nselect_difficulty(2)\nAlthough easier, this method is not recommended. Using the full  avoids confusion and prevents two same identifier names from colliding.\nWhile importing packages, Python looks in the list of directories defined in sys.path, similar as for .",
    "ID" : 95,
    "Topic" : "Importing module from a package"
  }, {
    "Answer" : "\nFile handling is an important part of any web application.\nPython has several functions for creating, reading, updating, and deleting files.",
    "ID" : 96,
    "Topic" : "Python File Open"
  }, {
    "Answer" : "The key function for working with files in Python is the open() function.\nThe open() function takes two parameters; filename, and mode.\nThere are four different methods (modes) for opening a file:\n\"r\" - Read - Default value. Opens a file for reading, error if the file does not exist\n\"a\" - Append - Opens a file for appending, creates the file if it does not exist\n\"w\" - Write - Opens a file for writing, creates the file if it does not exist\n\"x\" - Create - Creates the specified file, returns an error if the file exists\nIn addition you can specify if the file should be handled as binary or text mode\n\"t\" - Text - Default value. Text mode\n\"b\" - Binary - Binary mode (e.g. images)\n\nSyntax\nTo open a file for reading it is enough to specify the name of the file:\nf = open(\"demofile.txt\")\nThe code above is the same as:\nf = open(\"demofile.txt\", \"rt\")\nBecause \"r\" for read, and \"t\" for text are the default values, you do not need to specify them.\nNote: Make sure the file exists, or else you will get an error.",
    "ID" : 97,
    "Topic" : "File Handling"
  }, {
    "Answer" : "\n\nOpen a File on the Server\nAssume we have the following file, located in the same folder as Python:\ndemofile.txt\nHello! Welcome to demofile.txt\nThis file is for testing purposes.\nGood Luck!\nTo open the file, use the built-in open() function.\nThe open() function returns a file object, which has a read() method for reading the content of the file:\nExample\nf = open(\"demofile.txt\", \"r\")\nprint(f.read())\n\n\nRead Only Parts of the File\nBy default the read() method returns the whole text, but you can also specify how many characters you want to return:\nExample\nReturn the 5 first characters of the file:\nf = open(\"demofile.txt\", \"r\")\nprint(f.read(5))\n\n\n\nRead Lines\nYou can return one line by using the readline() method:\nExample\nRead one line of the file:\nf = open(\"demofile.txt\", \"r\")\nprint(f.readline())\n\nBy calling readline() two times, you can read the two first lines:\nExample\nRead two lines of the file:\nf = open(\"demofile.txt\", \"r\")\nprint(f.readline())\nprint(f.readline())\n\nBy looping through the lines of the file, you can read the whole file, line by line:\nExample\nLoop through the file line by line:\nf = open(\"demofile.txt\", \"r\")\nfor x in f:\n  print(x)\n\n\nClose Files\nIt is a good practice to always close the file when you are done with it.\nExample\nClose the file when you are finish with it:\nf = open(\"demofile.txt\", \"r\")\nprint(f.readline())\nf.close()\n\nNote: You should always close your files, in some cases, due to buffering, changes made to a file may not show until you close the file.",
    "ID" : 98,
    "Topic" : "Python File Open"
  }, {
    "Answer" : "\n\n\nWrite to an Existing File\nTo write to an existing file, you must add a parameter to the open() function:\n\"a\" - Append - will append to the end of the file\n\"w\" - Write - will overwrite any existing content\nExample\nOpen the file \"demofile2.txt\" and append content to the file:\nf = open(\"demofile2.txt\", \"a\")\nf.write(\"Now the file has more content!\")\nf.close()\n\n#open and read the file after the appending:\nf = open(\"demofile2.txt\", \"r\")\nprint(f.read())\n\nExample\nOpen the file \"demofile3.txt\" and overwrite the content:\nf = open(\"demofile3.txt\", \"w\")\nf.write(\"Woops! I have deleted the content!\")\nf.close()\n\n#open and read the file after the appending:\nf = open(\"demofile3.txt\", \"r\")\nprint(f.read())\n\nNote: the \"w\" method will overwrite the entire file.",
    "ID" : 99,
    "Topic" : "Python File Write"
  }, {
    "Answer" : "To create a new file in Python, use the open() method, with one of the following parameters:\n\"x\" - Create - will create a file, returns an error if the file exist\n\"a\" - Append - will create a file if the specified file does not exist\n\"w\" - Write - will create a file if the specified file does not exist\nExample\nCreate a file called \"myfile.txt\":\nf = open(\"myfile.txt\", \"x\")\nResult: a new empty file is created!\nExample\nCreate a new file if it does not exist:\nf = open(\"myfile.txt\", \"w\")",
    "ID" : 100,
    "Topic" : "Create a New File"
  }, {
    "Answer" : "\n\nDelete a File\nTo delete a file, you must import the OS module, and run its os.remove() function:\nExample\nRemove the file \"demofile.txt\":\nimport os\nos.remove(\"demofile.txt\")\n\nCheck if File exist:\nTo avoid getting an error, you might want to check if the file exists before you try to delete it:\nExample\nCheck if file exists, then delete it:\nimport os\nif os.path.exists(\"demofile.txt\"):\n  os.remove(\"demofile.txt\")\nelse:\n  print(\"The file does not exist\")\n\nDelete Folder\nTo delete an entire folder, use the os.rmdir() method:\nExample\nRemove the folder \"myfolder\":\nimport os\nos.rmdir(\"myfolder\")\nNote: You can only remove empty folders.",
    "ID" : 101,
    "Topic" : "Python Delete File"
  }, {
    "Answer" : "If there are a large number of  in your Python program, you can arrange your code within different directories to make things more manageable.\nA directory or folder is a collection of files and sub directories. Python has the os , which provides us with many useful methods to work with directories (and files as well).",
    "ID" : 102,
    "Topic" : "What is Directory in Python?"
  }, {
    "Answer" : "We can get the present working directory using the getcwd() method.\nThis method returns the current working directory in the form of a string. We can also use the getcwdb() method to get it as bytes object.\n>>> import os\n\n>>> os.getcwd()\n'C:\\\\Program Files\\\\PyScripter'\n\n>>> os.getcwdb()\nb'C:\\\\Program Files\\\\PyScripter'\nThe extra backslash implies escape sequence. The print() function will render this properly.\n>>> print(os.getcwd())\nC:\\Program Files\\PyScripter",
    "ID" : 103,
    "Topic" : "Get Current Directory"
  }, {
    "Answer" : "We can change the current working directory using the chdir() method.\nThe new path that we want to change to must be supplied as a string to this method. We can use both forward slash (/) or the backward slash (\\) to separate path elements.\nIt is safer to use escape sequence when using the backward slash.\n>>> os.chdir('C:\\\\Python33')\n\n>>> print(os.getcwd())\nC:\\Python33",
    "ID" : 104,
    "Topic" : "Changing Directory"
  }, {
    "Answer" : "All files and sub directories inside a directory can be known using the listdir() method.\nThis method takes in a path and returns a list of sub directories and files in that path. If no path is specified, it returns from the current working directory.\n>>> print(os.getcwd())\nC:\\Python33\n\n>>> os.listdir()\n['DLLs',\n'Doc',\n'include',\n'Lib',\n'libs',\n'LICENSE.txt',\n'NEWS.txt',\n'python.exe',\n'pythonw.exe',\n'README.txt',\n'Scripts',\n'tcl',\n'Tools']\n\n>>> os.listdir('G:\\\\')\n['$RECYCLE.BIN',\n'Movies',\n'Music',\n'Photos',\n'Series',\n'System Volume Information']",
    "ID" : 105,
    "Topic" : "List Directories and Files"
  }, {
    "Answer" : "We can make a new directory using the mkdir() method.\nThis method takes in the path of the new directory. If the full path is not specified, the new directory is created in the current working directory.\n>>> os.mkdir('test')\n\n>>> os.listdir()\n['test']",
    "ID" : 106,
    "Topic" : "Making a New Directory"
  }, {
    "Answer" : "The rename() method can rename a directory or a file.\nThe first argument is the old name and the new name must be supplies as the second argument.\n>>> os.listdir()\n['test']\n\n>>> os.rename('test','new_one')\n\n>>> os.listdir()\n['new_one']",
    "ID" : 107,
    "Topic" : "Renaming a Directory or a File"
  }, {
    "Answer" : "A file can be removed (deleted) using the remove() method.\nSimilarly, the rmdir() method removes an empty directory.\n>>> os.listdir()\n['new_one', 'old.txt']\n\n>>> os.remove('old.txt')\n>>> os.listdir()\n['new_one']\n\n>>> os.rmdir('new_one')\n>>> os.listdir()\n[]\nHowever, note that rmdir() method can only remove empty directories.\nIn order to remove a non-empty directory we can use the rmtree() method inside the shutil module.\n>>> os.listdir()\n['test']\n\n>>> os.rmdir('test')\nTraceback (most recent call last):\n...\nOSError: [WinError 145] The directory is not empty: 'test'\n\n>>> import shutil\n\n>>> shutil.rmtree('test')\n>>> os.listdir()\n[]",
    "ID" : 108,
    "Topic" : "Removing Directory or File"
  }, {
    "Answer" : "Python (interpreter) raises exceptions when it enIDer errors. For example: divided by zero. In this article, you will learn about different exceptions that are built-in in Python.\nWhen writing a program, we, more often than not, will enIDer errors.\nError caused by not following the proper structure (syntax) of the language is called syntax error or parsing error.\n>>> if a < 3\n  File \"<interactive input>\", line 1\n    if a < 3\n           ^\nSyntaxError: invalid syntax\nWe can notice here that a colon is missing in the if statement.\nErrors can also occur at runtime and these are called exceptions. They occur, for example, when a file we try to open does not exist (FileNotFoundError), dividing a number by zero (ZeroDivisionError), module we try to import is not found (ImportError) etc.\nWhenever these type of runtime error occur, Python creates an exception object. If not handled properly, it prints a traceback to that error along with some details about why that error occurred.\n>>> 1 / 0\nTraceback (most recent call last):\n File \"<string>\", line 301, in runcode\n File \"<interactive input>\", line 1, in <module>\nZeroDivisionError: division by zero\n\n>>> open(\"imaginary.txt\")\nTraceback (most recent call last):\n File \"<string>\", line 301, in runcode\n File \"<interactive input>\", line 1, in <module>\nFileNotFoundError: [Errno 2] No such file or directory: 'imaginary.txt'",
    "ID" : 109,
    "Topic" : "Python Errors and Built-in Exceptions"
  }, {
    "Answer" : "Illegal operations can raise exceptions. There are plenty of built-in exceptions in Python that are raised when corresponding errors occur. We can view all the built-in exceptions using the local() built-in functions as follows.\n>>> locals()['__builtins__']\nThis will return us a dictionary of built-in exceptions, functions and attributes.\nSome of the common built-in exceptions in Python programming along with the error that cause then are tabulated below.\nWe can also define our own exception in Python (if required). Visit this page to learn more about . \nWe can handle these built-in and user-defined . ",
    "ID" : 110,
    "Topic" : "Python Built-in Exceptions"
  }, {
    "Answer" : "Python has many  which forces your program to output an error when something in it goes wrong.\nWhen these exceptions occur, it causes the current process to stop and passes it to the calling process until it is handled. If not handled, our program will crash.\nFor example, if  A calls function B which in turn calls function C and an exception occurs in function C. If it is not handled in C, the exception passes to B and then to A.\nIf never handled, an error message is spit out and our program come to a sudden, unexpected halt.",
    "ID" : 111,
    "Topic" : "What are exceptions in Python?"
  }, {
    "Answer" : "In Python, exceptions can be handled using a try statement.\nA critical operation which can raise exception is placed inside the try clause and the code that handles exception is written in except clause.\nIt is up to us, what operations we perform once we have caught the exception. Here is a simple example.\n\n\n\n\n# import module sys to get the type of exception\nimport sys\nrandomList = ['a', 0, 2]\nfor entry in randomList:\n    try:\n        print(\"The entry is\", entry)\n        r = 1/int(entry)\n        break\n    except:\n        print(\"Oops!\",sys.exc_info()[0],\"occured.\")\n        print(\"Next entry.\")\n        print()\nprint(\"The reciprocal of\",entry,\"is\",r)\nRun\n\n\nOutput\nThe entry is a\nOops! <class 'ValueError'> occured.\nNext entry.\n\nThe entry is 0\nOops! <class 'ZeroDivisionError' > occured.\nNext entry.\n\nThe entry is 2\nThe reciprocal of 2 is 0.5\nIn this program, we loop until the user enters an integer that has a valid reciprocal. The portion that can cause exception is placed inside try block.\nIf no exception occurs, except block is skipped and normal flow continues. But if any exception occurs, it is caught by the except block.\nHere, we print the name of the exception using ex_info() function inside sys module and ask the user to try again. We can see that the values 'a' and '1.3' causes ValueError and '0' causes ZeroDivisionError.",
    "ID" : 112,
    "Topic" : "Catching Exceptions in Python"
  }, {
    "Answer" : "In the above example, we did not mention any exception in the except clause.\nThis is not a good programming practice as it will catch all exceptions and handle every case in the same way. We can specify which exceptions an except clause will catch.\nA try clause can have any number of except clause to handle them differently but only one will be executed in case an exception occurs.\nWe can use a tuple of values to specify multiple exceptions in an except clause. Here is an example pseudo code.\ntry:\n   # do something\n   pass\n\nexcept ValueError:\n   # handle ValueError exception\n   pass\n\nexcept (TypeError, ZeroDivisionError):\n   # handle multiple exceptions\n   # TypeError and ZeroDivisionError\n   pass\n\nexcept:\n   # handle all other exceptions\n   pass",
    "ID" : 113,
    "Topic" : "Catching Specific Exceptions in Python"
  }, {
    "Answer" : "In Python programming, exceptions are raised when corresponding errors occur at run time, but we can forcefully raise it using the keyword raise.\nWe can also optionally pass in value to the exception to clarify why that exception was raised.\n>>> raise KeyboardInterrupt\nTraceback (most recent call last):\n...\nKeyboardInterrupt\n\n>>> raise MemoryError(\"This is an argument\")\nTraceback (most recent call last):\n...\nMemoryError: This is an argument\n\n>>> try:\n...     a = int(input(\"Enter a positive integer: \"))\n...     if a <= 0:\n...         raise ValueError(\"That is not a positive number!\")\n... except ValueError as ve:\n...     print(ve)\n...    \nEnter a positive integer: -2\nThat is not a positive number!",
    "ID" : 114,
    "Topic" : "Raising Exceptions"
  }, {
    "Answer" : "The try statement in Python can have an optional finally clause. This clause is executed no matter what, and is generally used to release external resources.\nFor example, we may be connected to a remote data center through the network or working with a file or working with a Graphical User Interface (GUI).\nIn all these circumstances, we must clean up the resource once used, whether it was successful or not. These actions (closing a file, GUI or disconnecting from network) are performed in the finally clause to guarantee execution.\nHere is an example of  to illustrate this.\ntry:\n   f = open(\"test.txt\",encoding = 'utf-8')\n   # perform file operations\nfinally:\n   f.close()\nThis type of construct makes sure the file is closed even if an exception occurs.",
    "ID" : 115,
    "Topic" : "try & finally statements"
  }, {
    "Answer" : "Python has many  which forces your program to output an error when something in it goes wrong.\nHowever, sometimes you may need to create custom exceptions that serves your purpose.\nIn Python, users can define such exceptions by creating a new class. This exception class has to be derived, either directly or indirectly, from Exception class. Most of the built-in exceptions are also derived form this class.\n>>> class CustomError(Exception):\n...     pass\n...\n\n>>> raise CustomError\nTraceback (most recent call last):\n...\n__main__.CustomError\n\n>>> raise CustomError(\"An error occurred\")\nTraceback (most recent call last):\n...\n__main__.CustomError: An error occurred\nHere, we have created a user-defined exception called CustomError which is derived from the Exception class. This new exception can be raised, like other exceptions, using the raisestatement with an optional error message.\nWhen we are developing a large Python program, it is a good practice to place all the user-defined exceptions that our program raises in a separate file. Many standard modules do this. They define their exceptions separately as exceptions.py or errors.py (generally but not always).\nUser-defined exception class can implement everything a normal class can do, but we generally make them simple and concise. Most implementations declare a custom base class and derive others exception classes from this base class. This concept is made clearer in the following example.",
    "ID" : 116,
    "Topic" : "Python Custom Exceptions"
  }, {
    "Answer" : "Python is a multi-paradigm programming language. Meaning, it supports different programming approach.\nOne of the popular approach to solve a programming problem is by creating objects. This is known as Object-Oriented Programming (OOP).\nAn object has two characteristics:\nattributes\nbehavior\nLet's take an example:\nParrot is an object,\nname, age, color are attributes\nsinging, dancing are behavior\nThe concept of OOP in Python focuses on creating reusable code. This concept is also known as DRY (Don't Repeat Yourself).\nIn Python, the concept of OOP follows some basic principles:",
    "ID" : 118,
    "Topic" : "Introduction to OOPs in Python"
  }, {
    "Answer" : "Python is an object oriented programming language.\nAlmost everything in Python is an object, with its properties and methods.\nA Class is like an object constructor, or a \"blueprint\" for creating objects.",
    "ID" : 119,
    "Topic" : "Python Classes/Objects"
  }, {
    "Answer" : "To create a class, use the keyword class:\nExample\nCreate a class named MyClass, with a property named x:\nclass MyClass:\n  x = 5",
    "ID" : 120,
    "Topic" : "Create a Class"
  }, {
    "Answer" : "Now we can use the class named myClass to create objects:\nExample\nCreate an object named p1, and print the value of x:\np1 = MyClass()\nprint(p1.x)",
    "ID" : 121,
    "Topic" : "Create Object"
  }, {
    "Answer" : "The examples above are classes and objects in their simplest form, and are not really useful in real life applications.\nTo understand the meaning of classes we have to understand the built-in __init__() function.\nAll classes have a function called __init__(), which is always executed when the class is being initiated.\nUse the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:\nExample\nCreate a class named Person, use the __init__() function to assign values for name and age:\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n\np1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)\n\nNote: The __init__() function is called automatically every time the class is being used to create a new object.",
    "ID" : 122,
    "Topic" : "The __init__() Function"
  }, {
    "Answer" : "Objects can also contain methods. Methods in objects are functions that belong to the object.\nLet us create a method in the Person class:\nExample\nInsert a function that prints a greeting, and execute it on the p1 object:\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n\n  def myfunc(self):\n    print(\"Hello my name is \" + self.name)\n\np1 = Person(\"John\", 36)\np1.myfunc()\n\nNote: The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.",
    "ID" : 123,
    "Topic" : "Object Methods"
  }, {
    "Answer" : "The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.\nIt does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class:\nExample\nUse the words mysillyobject and abc instead of self:\nclass Person:\n  def __init__(mysillyobject, name, age):\n    mysillyobject.name = name\n    mysillyobject.age = age\n\n  def myfunc(abc):\n    print(\"Hello my name is \" + abc.name)\n\np1 = Person(\"John\", 36)\np1.myfunc()",
    "ID" : 124,
    "Topic" : "The self Parameter"
  }, {
    "Answer" : "You can modify properties on objects like this:\nExample\nSet the age of p1 to 40:\np1.age = 40",
    "ID" : 125,
    "Topic" : "Modify Object Properties"
  }, {
    "Answer" : "You can delete properties on objects by using the del keyword:\nExample\nDelete the age property from the p1 object:\ndel p1.age",
    "ID" : 126,
    "Topic" : "Delete Object Properties"
  }, {
    "Answer" : "You can delete objects by using the del keyword:\nExample\nDelete the p1 object:\ndel p1",
    "ID" : 127,
    "Topic" : "Delete Objects"
  }, {
    "Answer" : "Inheritance is a way of creating new class for using details of existing class without modifying it. The newly formed class is a derived class (or child class). Similarly, the existing class is a base class (or parent class).\nExample 3: Use of Inheritance in Python\n\n\n\n\n# parent class\nclass Bird:\n    \n    def __init__(self):\n        print(\"Bird is ready\")\n    def whoisThis(self):\n        print(\"Bird\")\n    def swim(self):\n        print(\"Swim faster\")\n# child class\nclass Penguin(Bird):\n    def __init__(self):\n        # call super() function\n        super().__init__()\n        print(\"Penguin is ready\")\n    def whoisThis(self):\n        print(\"Penguin\")\n    def run(self):\n        print(\"Run faster\")\npeggy = Penguin()\npeggy.whoisThis()\npeggy.swim()\npeggy.run()\nRun\n\n\nWhen we run this program, the output will be:\nBird is ready\nPenguin is ready\nPenguin\nSwim faster\nRun faster\nIn the above program, we created two classes i.e. Bird (parent class) and Penguin (child class). The child class inherits the functions of parent class. We can see this from swim()method. Again, the child class modified the behavior of parent class. We can see this from whoisThis() method. Furthermore, we extend the functions of parent class, by creating a new run() method.\nAdditionally, we use super() function before __init__() method. This is because we want to pull the content of __init__() method from the parent class into the child class.",
    "ID" : 128,
    "Topic" : "Inheritance"
  }, {
    "Answer" : "Using OOP in Python, we can restrict access to methods and variables. This prevent data from direct modification which is called encapsulation. In Python, we denote private attribute using underscore as prefix i.e single “ _ “ or double “ __“.",
    "ID" : 129,
    "Topic" : "Encapsulation"
  }, {
    "Answer" : "\n\n\n\nclass Computer:\n    def __init__(self):\n        self.__maxprice = 900\n    def sell(self):\n        print(\"Selling Price: {}\".format(self.__maxprice))\n    def setMaxPrice(self, price):\n        self.__maxprice = price\nc = Computer()\nc.sell()\n# change the price\nc.__maxprice = 1000\nc.sell()\n# using setter function\nc.setMaxPrice(1000)\nc.sell()\nRun\n\n\nWhen we run this program, the output will be:\nSelling Price: 900\nSelling Price: 900\nSelling Price: 1000\nIn the above program, we defined a class Computer. We use __init__() method to store the maximum selling price of computer. We tried to modify the price. However, we can’t change it because Python treats the __maxprice as private attributes. To change the value, we used a setter function i.e setMaxPrice() which takes price as parameter.",
    "ID" : 130,
    "Topic" : "Example 4: Data Encapsulation in Python"
  }, {
    "Answer" : "Polymorphism is an ability (in OOP) to use common interface for multiple form (data types).\nSuppose, we need to color a shape, there are multiple shape option (rectangle, square, circle). However we could use same method to color any shape. This concept is called Polymorphism.",
    "ID" : 131,
    "Topic" : "Polymorphism"
  }, {
    "Answer" : "\n\n\n\nclass Parrot:\n    def fly(self):\n        print(\"Parrot can fly\")\n    \n    def swim(self):\n        print(\"Parrot can't swim\")\nclass Penguin:\n    def fly(self):\n        print(\"Penguin can't fly\")\n    \n    def swim(self):\n        print(\"Penguin can swim\")\n# common interface\ndef flying_test(bird):\n    bird.fly()\n#instantiate objects\nblu = Parrot()\npeggy = Penguin()\n# passing the object\nflying_test(blu)\nflying_test(peggy)\nRun\n\n\nWhen we run above program, the output will be:\nParrot can fly\nPenguin can't fly\nIn the above program, we defined two classes Parrot and Penguin. Each of them have common method fly() method. However, their functions are different. To allow polymorphism, we created common interface i.e flying_test() function that can take any object. Then, we passed the objects blu and peggy in the flying_test() function, it ran effectively.",
    "ID" : 132,
    "Topic" : "Example 5: Using Polymorphism in Python"
  }, {
    "Answer" : " work for built-in classes. But same operator behaves differently with different types. For example, the + operator will, perform arithmetic addition on two numbers, merge two lists and concatenate two strings.\nThis feature in Python, that allows same operator to have different meaning according to the context is called operator overloading.\nSo what happens when we use them with objects of a user-defined class? Let us consider the following class, which tries to simulate a point in 2-D coordinate system.\n\n\n\n\nclass Point:\n    def __init__(self, x = 0, y = 0):\n        self.x = x\n        self.y = y\nRun\n\n\nNow, run the code and try to add two points in Python shell.\n\n>>> p1 = Point(2,3)\n>>> p2 = Point(-1,2)\n>>> p1 + p2\nTraceback (most recent call last):\n...\nTypeError: unsupported operand type(s) for +: 'Point' and 'Point'\nWhoa! That's a lot of complains. TypeError was raised since Python didn't know how to add two Point objects together.\nHowever, the good news is that we can teach this to Python through operator overloading. But first, let's get a notion about special functions.",
    "ID" : 134,
    "Topic" : "What is operator overloading in Python?"
  }, {
    "Answer" : "An iterator is an object that contains a IDable number of values.\nAn iterator is an object that can be iterated upon, meaning that you can traverse through all the values.\nTechnically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().",
    "ID" : 135,
    "Topic" : "Python Iterators"
  }, {
    "Answer" : "Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.\nAll these objects have a iter() method which is used to get an iterator:\nExample\nReturn an iterator from a tuple, and print each value:\nmytuple = (\"apple\", \"banana\", \"cherry\")\nmyit = iter(mytuple)\n\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\n\n\nEven strings are iterable objects, and can return an iterator:\nExample\nStrings are also iterable objects, containing a sequence of characters:\nmystr = \"banana\"\nmyit = iter(mystr)\n\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))",
    "ID" : 136,
    "Topic" : "Iterator vs Iterable"
  }, {
    "Answer" : "We can also use a for loop to iterate through an iterable object:\nExample\nIterate the values of a tuple:\nmytuple = (\"apple\", \"banana\", \"cherry\")\n\nfor x in mytuple:\n  print(x)\n\nExample\nIterate the characters of a string:\nmystr = \"banana\"\n\nfor x in mystr:\n  print(x)\n\nThe for loop actually creates an iterator object and executes the next() method for each loop.",
    "ID" : 137,
    "Topic" : "Looping Through an Iterator"
  }, {
    "Answer" : "To create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object.\nAs you have learned in the  chapter, all classes have a function called __init__(), which allows you do some initializing when the object is being created.\nThe __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.\nThe __next__() method also allows you to do operations, and must return the next item in the sequence.\nExample\nCreate an iterator that returns numbers, starting with 1, and each sequence will increase by one (returning 1,2,3,4,5 etc.):\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n\n  def __next__(self):\n    x = self.a\n    self.a += 1\n    return x\n\nmyclass = MyNumbers()\nmyiter = iter(myclass)\n\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))",
    "ID" : 138,
    "Topic" : "Create an Iterator"
  }, {
    "Answer" : "The example above would continue forever if you had enough next() statements, or if it was used in a for loop.\nTo prevent the iteration to go on forever, we can use the StopIteration statement.\nIn the __next__() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:\nExample\nStop after 20 iterations:\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n\n  def __next__(self):\n    if self.a <= 20:\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n\nmyclass = MyNumbers()\nmyiter = iter(myclass)\n\nfor x in myiter:\n  print(x)",
    "ID" : 139,
    "Topic" : "StopIteration"
  }, {
    "Answer" : "Consider a module to be the same as a code library.\nA file containing a set of functions you want to include in your application.",
    "ID" : 140,
    "Topic" : "What is a Module?"
  }, {
    "Answer" : "To create a module just save the code you want in a file with the file extension .py:\nExample\nSave this code in a file named mymodule.py\ndef greeting(name):\n  print(\"Hello, \" + name)",
    "ID" : 141,
    "Topic" : "Create a Module"
  }, {
    "Answer" : "Now we can use the module we just created, by using the import statement:\nExample\nImport the module named mymodule, and call the greeting function:\nimport mymodule\n\nmymodule.greeting(\"Jonathan\")\n\nNote: When using a function from a module, use the syntax: module_name.function_name.",
    "ID" : 142,
    "Topic" : "Use a Module"
  }, {
    "Answer" : "The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc):\nExample\nSave this code in the file mymodule.py\nperson1 = {\n  \"name\": \"John\",\n  \"age\": 36,\n  \"IDry\": \"Norway\"\n}\nExample\nImport the module named mymodule, and access the person1 dictionary:\nimport mymodule\n\na = mymodule.person1[\"age\"]\nprint(a)",
    "ID" : 143,
    "Topic" : "Variables in Module"
  }, {
    "Answer" : "You can name the module file whatever you like, but it must have the file extension .py",
    "ID" : 144,
    "Topic" : "Naming a Module"
  }, {
    "Answer" : "You can create an alias when you import a module, by using the as keyword:\nExample\nCreate an alias for mymodule called mx:\nimport mymodule as mx\n\na = mx.person1[\"age\"]\nprint(a)",
    "ID" : 145,
    "Topic" : "Re-naming a Module"
  }, {
    "Answer" : "There are several built-in modules in Python, which you can import whenever you like.\nExample\nImport and use the platform module:\nimport platform\n\nx = platform.system()\nprint(x)",
    "ID" : 146,
    "Topic" : "Built-in Modules"
  }, {
    "Answer" : "There is a built-in function to list all the function names (or variable names) in a module. The dir() function:\nExample\nList all the defined names belonging to the platform module:\nimport platform\n\nx = dir(platform)\nprint(x)\n\nNote: The dir() function can be used on all modules, also the ones you create yourself.",
    "ID" : 147,
    "Topic" : "Using the dir() Function"
  }, {
    "Answer" : "You can choose to import only parts from a module, by using the from keyword.\nExample\nThe module named mymodule has one function and one dictionary:\ndef greeting(name):\n  print(\"Hello, \" + name)\n\nperson1 = {\n  \"name\": \"John\",\n  \"age\": 36,\n  \"IDry\": \"Norway\"\n}\n\nExample\nImport only the person1 dictionary from the module:\nfrom mymodule import person1\n\nprint (person1[\"age\"])\n\n\nNote: When importing using the from keyword, do not use the module name when referring to elements in the module. Example: person1[\"age\"], not mymodule.person1[\"age\"]",
    "ID" : 148,
    "Topic" : "Import From Module"
  }, {
    "Answer" : "A date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects.\nExample\nImport the datetime module and display the current date:\nimport datetime\n\nx = datetime.datetime.now()\nprint(x)",
    "ID" : 149,
    "Topic" : "Python Dates"
  }, {
    "Answer" : "When we execute the code from the example above the result will be:\n2019-09-01 12:21:07.786423\nThe date contains year, month, day, hour, minute, second, and microsecond.\nThe datetime module has many methods to return information about the date object.\nHere are a few examples, you will learn more about them later in this chapter:\nExample\nReturn the year and name of weekday:\nimport datetime\n\nx = datetime.datetime.now()\n\nprint(x.year)\nprint(x.strftime(\"%A\"))",
    "ID" : 150,
    "Topic" : "Date Output"
  }, {
    "Answer" : "To create a date, we can use the datetime() class (constructor) of the datetime module.\nThe datetime() class requires three parameters to create a date: year, month, day.\nExample\nCreate a date object:\nimport datetime\n\nx = datetime.datetime(2020, 5, 17)\n\nprint(x)\n\nThe datetime() class also takes parameters for time and timezone (hour, minute, second, microsecond, tzone), but they are optional, and has a default value of 0, (None for timezone).",
    "ID" : 151,
    "Topic" : "Creating Date Objects"
  }, {
    "Answer" : "The datetime object has a method for formatting date objects into readable strings.\nThe method is called strftime(), and takes one parameter, format, to specify the format of the returned string:\nExample\nDisplay the name of the month:\nimport datetime\n\nx = datetime.datetime(2018, 6, 1)\n\nprint(x.strftime(\"%B\"))",
    "ID" : 152,
    "Topic" : "The strftime() Method"
  }, {
    "Answer" : "\nJSON is a syntax for storing and exchanging data.\nJSON is text, written with JavaScript object notation.",
    "ID" : 153,
    "Topic" : "Python JSON"
  }, {
    "Answer" : "Python has a built-in package called json, which can be used to work with JSON data.\nExample\nImport the json module:\nimport json",
    "ID" : 154,
    "Topic" : "JSON in Python"
  }, {
    "Answer" : "If you have a JSON string, you can parse it by using the json.loads() method.\nThe result will be a .\nExample\nConvert from JSON to Python:\nimport json\n\n# some JSON:\nx =  '{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\n# parse x:\ny = json.loads(x)\n\n# the result is a Python dictionary:\nprint(y[\"age\"])",
    "ID" : 155,
    "Topic" : "Parse JSON - Convert from JSON to Python"
  }, {
    "Answer" : "If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.\nExample\nConvert from Python to JSON:\nimport json\n\n# a Python object (dict):\nx = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n\n# convert into JSON:\ny = json.dumps(x)\n\n# the result is a JSON string:\nprint(y)\n\n\n\nYou can convert Python objects of the following types, into JSON strings:\ndict\nlist\ntuple\nstring\nint\nfloat\nTrue\nFalse\nNone\nExample\nConvert Python objects into JSON strings, and print the values:\nimport json\n\nprint(json.dumps({\"name\": \"John\", \"age\": 30}))\nprint(json.dumps([\"apple\", \"bananas\"]))\nprint(json.dumps((\"apple\", \"bananas\")))\nprint(json.dumps(\"hello\"))\nprint(json.dumps(42))\nprint(json.dumps(31.76))\nprint(json.dumps(True))\nprint(json.dumps(False))\nprint(json.dumps(None))\n\n\nWhen you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent:",
    "ID" : 156,
    "Topic" : "Convert from Python to JSON"
  }, {
    "Answer" : "Downloading a package is very easy.\nOpen the command line interface and tell PIP to download the package you want.\nNavigate your command line to the location of Python's script directory, and type the following:\nExample\nDownload a package named \"camelcase\":\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip install camelcase",
    "ID" : 161,
    "Topic" : "Download a Package"
  }, {
    "Answer" : "There is a lot of overhead in building an ; we have to implement a class with __iter__() and __next__() method, keep track of internal states, raise StopIterationwhen there was no values to be returned etc.\nThis is both lengthy and IDer intuitive. Generator comes into rescue in such situations.\nPython generators are a simple way of creating iterators. All the overhead we mentioned above are automatically handled by generators in Python.\nSimply speaking, a generator is a function that returns an object (iterator) which we can iterate over (one value at a time).",
    "ID" : 162,
    "Topic" : "What are generators in Python?"
  }, {
    "Answer" : "It is fairly simple to create a generator in Python. It is as easy as defining a normal function with yield statement instead of a return statement.\nIf a function contains at least one yield statement (it may contain other yield or returnstatements), it becomes a generator function. Both yield and return will return some value from a function.\nThe difference is that, while a return statement terminates a function entirely, yieldstatement pauses the function saving all its states and later continues from there on successive calls.",
    "ID" : 163,
    "Topic" : "How to create a generator in Python?"
  }, {
    "Answer" : "Here is how a generator function differs from a .\nGenerator function contains one or more yield statement.\nWhen called, it returns an object (iterator) but does not start execution immediately.\nMethods like __iter__() and __next__() are implemented automatically. So we can iterate through the items using next().\nOnce the function yields, the function is paused and the control is transferred to the caller.\nLocal variables and their states are remembered between successive calls.\nFinally, when the function terminates, StopIteration is raised automatically on further calls.\nHere is an example to illustrate all of the points stated above. We have a generator function named my_gen() with several yield statements.\n\n\n\n\n# A simple generator function\ndef my_gen():\n    n = 1\n    print('This is printed first')\n    # Generator function contains yield statements\n    yield n\n    n += 1\n    print('This is printed second')\n    yield n\n    n += 1\n    print('This is printed at last')\n    yield n\nRun\n\n\nAn interactive run in the interpreter is given below. Run these in the Python shell to see the output.\n>>> # It returns an object but does not start execution immediately.\n>>> a = my_gen()\n\n>>> # We can iterate through the items using next().\n>>> next(a)\nThis is printed first\n1\n>>> # Once the function yields, the function is paused and the control is transferred to the caller.\n\n>>> # Local variables and theirs states are remembered between successive calls.\n>>> next(a)\nThis is printed second\n2\n\n>>> next(a)\nThis is printed at last\n3\n\n>>> # Finally, when the function terminates, StopIteration is raised automatically on further calls.\n>>> next(a)\nTraceback (most recent call last):\n...\nStopIteration\n>>> next(a)\nTraceback (most recent call last):\n...\nStopIteration\nOne interesting thing to note in the above example is that, the value of variable n is remembered between each call.\nUnlike normal functions, the local variables are not destroyed when the function yields. Furthermore, the generator object can be iterated only once.\nTo restart the process we need to create another generator object using something like a = my_gen().\nNote: One final thing to note is that we can use generators with  directly.\nThis is because, a for loop takes an iterator and iterates over it using next() function. It automatically ends when StopIteration is raised. Check here to .\n\n\n\n\n# A simple generator function\ndef my_gen():\n    n = 1\n    print('This is printed first')\n    # Generator function contains yield statements\n    yield n\n    n += 1\n    print('This is printed second')\n    yield n\n    n += 1\n    print('This is printed at last')\n    yield n\n# Using for loop\nfor item in my_gen():\n    print(item)    \nRun\n\nWhen you run the program, the output will be:\nThis is printed first\n1\nThis is printed second\n2\nThis is printed at last\n3",
    "ID" : 164,
    "Topic" : "Differences between Generator function and a Normal function"
  }, {
    "Answer" : "The above example is of less use and we studied it just to get an idea of what was happening in the background.\nNormally, generator functions are implemented with a loop having a suitable terminating condition.\nLet's take an example of a generator that reverses a string.\n\n\n\n\n\ndef rev_str(my_str):\n    length = len(my_str)\n    for i in range(length - 1,-1,-1):\n        yield my_str[i]\n# For loop to reverse the string\n# Output:\n# o\n# l\n# l\n# e\n# h\nfor char in rev_str(\"hello\"):\n     print(char)\nRun\n\nIn this example, we use range() function to get the index in reverse order using the for loop.\nIt turns out that this generator function not only works with string, but also with other kind of iterables like ,  etc.",
    "ID" : 165,
    "Topic" : "Python Generators with a Loop"
  }, {
    "Answer" : "Simple generators can be easily created on the fly using generator expressions. It makes building generators easy.\nSame as lambda function creates an , generator expression creates an anonymous generator function.\nThe syntax for generator expression is similar to that of a . But the square brackets are replaced with round parentheses.\nThe major difference between a list comprehension and a generator expression is that while list comprehension produces the entire list, generator expression produces one item at a time.\nThey are kind of lazy, producing items only when asked for. For this reason, a generator expression is much more memory efficient than an equivalent list comprehension.\n\n\n\n\n# Initialize the list\nmy_list = [1, 3, 6, 10]\n# square each term using list comprehension\n# Output: [1, 9, 36, 100]\n[x**2 for x in my_list]\n# same thing can be done using generator expression\n# Output: <generator object <genexpr> at 0x0000000002EBDAF8>\n(x**2 for x in my_list)\nRun\n\n\nWe can see above that the generator expression did not produce the required result immediately. Instead, it returned a generator object with produces items on demand.\n\n\n\n\n\n# Intialize the list\nmy_list = [1, 3, 6, 10]\na = (x**2 for x in my_list)\n# Output: 1\nprint(next(a))\n# Output: 9\nprint(next(a))\n# Output: 36\nprint(next(a))\n# Output: 100\nprint(next(a))\n# Output: StopIteration\nnext(a)\nRun\n\n\nGenerator expression can be used inside functions. When used in such a way, the round parentheses can be dropped.\n>>> sum(x**2 for x in my_list)\n146\n\n>>> max(x**2 for x in my_list)\n100",
    "ID" : 166,
    "Topic" : "Python Generator Expression"
  }, {
    "Answer" : "There are several reasons which make generators an attractive implementation to go for.\n1. Easy to Implement\nGenerators can be implemented in a clear and concise way as compared to their iterator class IDerpart. Following is an example to implement a sequence of power of 2's using iterator class.\nclass PowTwo:\n    def __init__(self, max = 0):\n        self.max = max\n\n    def __iter__(self):\n        self.n = 0\n        return self\n\n    def __next__(self):\n        if self.n > self.max:\n            raise StopIteration\n\n        result = 2 ** self.n\n        self.n += 1\n        return result\nThis was lengthy. Now lets do the same using a generator function.\ndef PowTwoGen(max = 0):\n    n = 0\n    while n < max:\n        yield 2 ** n\n        n += 1\nSince, generators keep track of details automatically, it was concise and much cleaner in implementation.\n2. Memory Efficient\nA normal function to return a sequence will create the entire sequence in memory before returning the result. This is an overkill if the number of items in the sequence is very large.\nGenerator implementation of such sequence is memory friendly and is preferred since it only produces one item at a time.\n3. Represent Infinite Stream\nGenerators are excellent medium to represent an infinite stream of data. Infinite streams cannot be stored in memory and since generators produce only one item at a time, it can represent infinite stream of data.\nThe following example can generate all the even numbers (at least in theory).\ndef all_even():\n    n = 0\n    while True:\n        yield n\n        n += 2\n4. Pipelining Generators\nGenerators can be used to pipeline a series of operations. This is best illustrated using an example.\nSuppose we have a log file from a famous fast food chain. The log file has a column (4th column) that keeps track of the number of pizza sold every hour and we want to sum it to find the total pizzas sold in 5 years.\nAssume everything is in string and numbers that are not available are marked as 'N/A'. A generator implementation of this could be as follows.\nwith open('sells.log') as file:\n    pizza_col = (line[3] for line in file)\n    per_hour = (int(x) for x in pizza_col if x != 'N/A')\n    print(\"Total pizzas sold = \",sum(per_hour))\nThis pipelining is efficient and easy to read (and yes, a lot cooler!).",
    "ID" : 167,
    "Topic" : "Why generators are used in Python?"
  }, {
    "Answer" : "Python has an interesting feature called decorators to add functionality to an existing code.\nThis is also called metaprogramming as a part of the program tries to modify another part of the program at compile time.",
    "ID" : 168,
    "Topic" : "What are decorators in Python?"
  }, {
    "Answer" : "In order to understand about decorators, we must first know a few basic things in Python.\nWe must be comfortable with the fact that, everything in Python (Yes! Even classes), are . Names that we define are simply identifiers bound to these objects.  are no exceptions, they are objects too (with attributes). Various different names can be bound to the same function object.\nHere is an example.\n\n\n\n\ndef first(msg):\n    print(msg)    \nfirst(\"Hello\")\nsecond = first\nsecond(\"Hello\")\nRun\n\n\nWhen you run the code, both functions first and second gives same output. Here, the names first and second refer to the same function object.\nNow things start getting weirder.\nFunctions can be passed as arguments to another function.\nIf you have used functions like map, filter and reduce in Python, then you already know about this.\nSuch function that take other functions as arguments are also called higher order functions. Here is an example of such a function.\n\n\n\n\ndef inc(x):\n    return x + 1\ndef dec(x):\n    return x - 1\ndef operate(func, x):\n    result = func(x)\n    return result\nRun\n\n\nWe invoke the function as follows.\n>>> operate(inc,3)\n4\n>>> operate(dec,3)\n2\nFurthermore, a function can return another function.\n\n\n\n\ndef is_called():\n    def is_returned():\n        print(\"Hello\")\n    return is_returned\nnew = is_called()\n#Outputs \"Hello\"\nnew()\nRun\n\n\nHere, is_returned() is a nested function which is defined and returned, each time we call is_called().\nFinally, we must know about .",
    "ID" : 169,
    "Topic" : "Prerequisites for learning decorators"
  }, {
    "Answer" : "Functions and methods are called callable as they can be called.\nIn fact, any object which implements the special method __call__() is termed callable. So, in the most basic sense, a decorator is a callable that returns a callable.\nBasically, a decorator takes in a function, adds some functionality and returns it.\n\n\n\n\ndef make_pretty(func):\n    def inner():\n        print(\"I got decorated\")\n        func()\n    return inner\ndef ordinary():\n    print(\"I am ordinary\")\nRun\n\n\nWhen you run the following codes in shell,\n>>> ordinary()\nI am ordinary\n\n>>> # let's decorate this ordinary function\n>>> pretty = make_pretty(ordinary)\n>>> pretty()\nI got decorated\nI am ordinary\nIn the example shown above, make_pretty() is a decorator. In the assignment step.\npretty = make_pretty(ordinary)\nThe function ordinary() got decorated and the returned function was given the name pretty.\nWe can see that the decorator function added some new functionality to the original function. This is similar to packing a gift. The decorator acts as a wrapper. The nature of the object that got decorated (actual gift inside) does not alter. But now, it looks pretty (since it got decorated).\nGenerally, we decorate a function and reassign it as,\nordinary = make_pretty(ordinary).\nThis is a common construct and for this reason, Python has a syntax to simplify this.\nWe can use the @ symbol along with the name of the decorator function and place it above the definition of the function to be decorated. For example,\n@make_pretty\ndef ordinary():\n    print(\"I am ordinary\")\nis equivalent to\ndef ordinary():\n    print(\"I am ordinary\")\nordinary = make_pretty(ordinary)\nThis is just a syntactic sugar to implement decorators.",
    "ID" : 170,
    "Topic" : "Getting back to Decorators"
  }, {
    "Answer" : "The above decorator was simple and it only worked with functions that did not have any parameters. What if we had functions that took in parameters like below?\ndef divide(a, b):\n    return a/b\nThis function has two parameters, a and b. We know, it will give error if we pass in b as 0.\n>>> divide(2,5)\n0.4\n>>> divide(2,0)\nTraceback (most recent call last):\n...\nZeroDivisionError: division by zero\nNow let's make a decorator to check for this case that will cause the error.\n\n\n\n\n\ndef smart_divide(func):\n   def inner(a,b):\n      print(\"I am going to divide\",a,\"and\",b)\n      if b == 0:\n         print(\"Whoops! cannot divide\")\n         return\n      return func(a,b)\n   return inner\n@smart_divide\ndef divide(a,b):\n    return a/b\nRun\n\n\nThis new implementation will return None if the error condition arises.\n>>> divide(2,5)\nI am going to divide 2 and 5\n0.4\n\n>>> divide(2,0)\nI am going to divide 2 and 0\nWhoops! cannot divide\nIn this manner we can decorate functions that take parameters.\nA keen observer will notice that parameters of the nested inner() function inside the decorator is same as the parameters of functions it decorates. Taking this into acID, now we can make general decorators that work with any number of parameter.\nIn Python, this magic is done as function(*args, **kwargs). In this way, args will be the  of positional arguments and kwargs will be the  of keyword arguments. An example of such decorator will be.\ndef works_for_all(func):\n    def inner(*args, **kwargs):\n        print(\"I can decorate any function\")\n        return func(*args, **kwargs)\n    return inner",
    "ID" : 171,
    "Topic" : "Decorating Functions with Parameters"
  }, {
    "Answer" : "Multiple decorators can be chained in Python.\nThis is to say, a function can be decorated multiple times with different (or same) decorators. We simply place the decorators above the desired function.\n\n\n\n\ndef star(func):\n    def inner(*args, **kwargs):\n        print(\"*\" * 30)\n        func(*args, **kwargs)\n        print(\"*\" * 30)\n    return inner\ndef percent(func):\n    def inner(*args, **kwargs):\n        print(\"%\" * 30)\n        func(*args, **kwargs)\n        print(\"%\" * 30)\n    return inner\n@star\n@percent\ndef printer(msg):\n    print(msg)\nprinter(\"Hello\")\nRun\n\n\nThis will give the output.\n\n******************************\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nHello\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n******************************\nThe above syntax of,\n@star\n@percent\ndef printer(msg):\n    print(msg)\nis equivalent to\ndef printer(msg):\n    print(msg)\nprinter = star(percent(printer))\nThe order in which we chain decorators matter. If we had reversed the order as,\n@percent\n@star\ndef printer(msg):\n    print(msg)\nThe execution would take place as,\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n******************************\nHello\n******************************\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
    "ID" : 172,
    "Topic" : "Chaining Decorators in Python"
  } ],
  "records" : {
    "45587zzdccom" : {
      "data" : {
        "dob" : "548",
        "email" : "zzd@c.com",
        "name" : "ssd",
        "phone" : "45587"
      }
    },
    "79734650sjcom" : {
      "data" : {
        "dob" : "548",
        "email" : "sj@.com",
        "name" : "Best app",
        "phone" : "79734650"
      },
      "statistics" : {
        "avg_time_right" : "3.0",
        "avg_time_wrong" : "1.5333333333333332",
        "best_category" : "general",
        "best_category_percentage" : "33",
        "high_score" : "5.0",
        "prefect_quiz" : "0.0",
        "total_quiz" : "2.0",
        "worst_category" : "Advanced",
        "worst_category_percentage" : "0"
      }
    },
    "917579274578sandeepbanoulagmailcom" : {
      "data" : {
        "dob" : "28/09/2000",
        "email" : "sandeep.banoula@gmail.com",
        "name" : "Sandeep Banoula",
        "phone" : "+917579274578"
      }
    },
    "919548334412amishabhakuni2001gmailcom" : {
      "data" : {
        "dob" : "02/02/2001",
        "email" : "amishabhakuni2001@gmail.com",
        "name" : "Amisha",
        "phone" : "+919548334412"
      }
    },
    "945657646testgmailcom" : {
      "data" : {
        "dob" : "26/05/1999",
        "email" : "test@gmail.com",
        "name" : "Hii",
        "phone" : "945657646"
      }
    },
    "963536546michaelgmailcom" : {
      "data" : {
        "dob" : "26/05/1995",
        "email" : "michael@gmail.com",
        "name" : "Michael",
        "phone" : "963536546"
      }
    },
    "PyARAVINDAN T R" : {
      "data" : {
        "dob" : "15/04/02",
        "email" : "aravindsriraj@gmail.com",
        "name" : "ARAVINDAN T R",
        "phone" : "9941467756"
      },
      "statistics" : {
        "avg_time_right" : "7.363636363636363",
        "avg_time_wrong" : "9.0",
        "best_category" : "general",
        "best_category_percentage" : "73",
        "high_score" : "11.0",
        "prefect_quiz" : "0.0",
        "total_quiz" : "1.0",
        "worst_category" : "medium, Advanced",
        "worst_category_percentage" : "0"
      }
    },
    "PyAbrar Hussain Dar" : {
      "data" : {
        "dob" : "12/01/98",
        "email" : "abrardar988651@gmail.com",
        "name" : "Abrar Hussain Dar",
        "phone" : "6362643213"
      }
    },
    "PyAkhila Ambekar" : {
      "data" : {
        "dob" : "20/08/98",
        "email" : "akhila.ambekar@gmail.com",
        "name" : "Akhila Ambekar",
        "phone" : "9390409031"
      }
    },
    "PyAkshay Faldu" : {
      "data" : {
        "dob" : "",
        "email" : "akshay13979@gmail.com",
        "name" : "Akshay Faldu",
        "phone" : "9825869197"
      }
    },
    "PyAman Jain" : {
      "data" : {
        "dob" : "20/04/99",
        "email" : "thevampire0817@gmail.com",
        "name" : "Aman Jain",
        "phone" : "7976744549"
      },
      "statistics" : {
        "avg_time_right" : "1.8571428571428572",
        "avg_time_wrong" : "1.25",
        "best_category" : "medium",
        "best_category_percentage" : "46",
        "high_score" : "7.0",
        "prefect_quiz" : "0.0",
        "total_quiz" : "1.0",
        "worst_category" : "Advanced",
        "worst_category_percentage" : "0"
      }
    },
    "PyAniket Kumar" : {
      "data" : {
        "dob" : "16/01/98",
        "email" : "ak9873172@gmail.com",
        "name" : "Aniket Kumar",
        "phone" : "7761001365"
      }
    },
    "PyEruvaram Prudhvi" : {
      "data" : {
        "dob" : "",
        "email" : "eruvaramprudhvi@gmail.com",
        "name" : "Eruvaram Prudhvi",
        "phone" : "7995319977"
      }
    },
    "PyHAMSTRING 05" : {
      "data" : {
        "dob" : "05/05/97",
        "email" : "tripathi.007.arun@gmail.com",
        "name" : "HAMSTRING 05",
        "phone" : "8818994216"
      }
    },
    "PyHarsh Goyal" : {
      "data" : {
        "dob" : "20/10/00",
        "email" : "harshgoyal185@gmail.com",
        "name" : "Harsh Goyal",
        "phone" : "7404573951"
      }
    },
    "PyKajal Agunde" : {
      "data" : {
        "dob" : "28/08/97",
        "email" : "agundekajal28@gmail.com",
        "name" : "Kajal Agunde",
        "phone" : "9767135572"
      }
    },
    "PyMithun BL" : {
      "data" : {
        "dob" : "17/01/99",
        "email" : "blmithun90@gmail.com",
        "name" : "Mithun BL",
        "phone" : "8548814084"
      },
      "statistics" : {
        "avg_time_right" : "11.6",
        "avg_time_wrong" : "11.0",
        "best_category" : "general",
        "best_category_percentage" : "33",
        "high_score" : "5.0",
        "prefect_quiz" : "0.0",
        "total_quiz" : "1.0",
        "worst_category" : "medium, Advanced",
        "worst_category_percentage" : "0"
      }
    },
    "PyMohan Sai Varun Kasarla" : {
      "data" : {
        "dob" : "01/12/99",
        "email" : "k.m.s.varun@gmail.com",
        "name" : "Mohan Sai Varun Kasarla",
        "phone" : "8465838615"
      }
    },
    "PySAURAV KASHYAP" : {
      "data" : {
        "dob" : "06/11/00",
        "email" : "sauravkashyap06112000@gmail.com",
        "name" : "SAURAV KASHYAP",
        "phone" : "7300608626"
      }
    },
    "PySachin Mehta" : {
      "data" : {
        "dob" : "22/03/98",
        "email" : "sachin.mehta0397@gmail.com",
        "name" : "Sachin Mehta",
        "phone" : "9736962808"
      }
    },
    "PySammy" : {
      "data" : {
        "dob" : "08/05/00",
        "email" : "ogunlalusammy@gmail.com",
        "name" : "Sammy",
        "phone" : "9084622373"
      }
    },
    "PySammy Ogunlalu" : {
      "data" : {
        "dob" : "08/05/00",
        "email" : "ogunlalusammy@gmail.com",
        "name" : "Sammy Ogunlalu",
        "phone" : "9084622373"
      }
    },
    "PySandeep Banoula" : {
      "data" : {
        "dob" : "28/09/00",
        "email" : "sandeep.banoula@gmail.com",
        "name" : "Sandeep Banoula",
        "phone" : "7579274578"
      }
    },
    "PyScientist Salazar" : {
      "data" : {
        "dob" : "12/02/20",
        "email" : "scientistsalazar@gmail.com",
        "name" : "Scientist Salazar",
        "phone" : "9996582146"
      }
    },
    "PySudershan Sharma" : {
      "data" : {
        "dob" : "26/04/99",
        "email" : "sudershan2604@gmail.com",
        "name" : "Sudershan Sharma",
        "phone" : "8219982613"
      }
    },
    "PyToseef Sayed" : {
      "data" : {
        "dob" : "07/04/99",
        "email" : "touseefsayed449@gmail.com",
        "name" : "Toseef Sayed",
        "phone" : "9920515449"
      }
    },
    "PyVamshi Krishna Sambari" : {
      "data" : {
        "dob" : "27/11/96",
        "email" : "vamshi914@gmail.com",
        "name" : "Vamshi Krishna Sambari",
        "phone" : "6303182950"
      }
    },
    "Pynishant singh tomar" : {
      "data" : {
        "dob" : "16/08/04",
        "email" : "nstomar1541@gmail.com",
        "name" : "nishant singh tomar",
        "phone" : "7404270410"
      }
    },
    "Pyraghu raghu" : {
      "data" : {
        "dob" : "27/09/98",
        "email" : "raghutheperfect@gmail.com",
        "name" : "raghu raghu",
        "phone" : "9632291280"
      }
    },
    "Pysai charan" : {
      "data" : {
        "dob" : "07/08/99",
        "email" : "saicharan.chakri@gmail.com",
        "name" : "sai charan",
        "phone" : "8374783637"
      }
    }
  }
}
